^1407746096696
@
sname
Introduce
slabel
Introduce
sdescriptors
xworker.lang.MetaDescriptor3
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
snotXmlAttribute
false
sth_createIndex
false
sth_registMyChilds
false
sth_mark
false
@/@actions
sname
actions
sdescriptors
xworker.lang.MetaDescriptor3/@actions
sth_createIndex
false
sth_registMyChilds
false
sth_mark
false
@/@actions/@Subtitle
sname
Subtitle
sfont
"微软雅黑|18|1|#000000"
Ssubtitles
#$@text#$@
本示例把加法映射成一个模型
加法模型虽然简单
但它包含了定义和使用事物模型的基本方法
首先是创建事物模型
事物模型都是使用元事物编辑出来的
这里我们使用MetaDescriptor3来定义加法模型
加法模型有两个属性x和y
通过添加子节点添属性定义x和y
下面我实现加法模型的解释程序
通过添加它的run方法来实现
首先添加动作（actions）子节点
其次定义run方法
run方法可以用很多种方式定义
这里我们选择使用Groovy脚本模型
输入解释代码return self.getInt("x") + self.getInt("y");
其中self变量是模型实例本身
如对self变量不了解可以参看事物模型引擎X-Meta
到此为止加法模型就定义完成了
下面是如何使用它
第一种方式是用它定义模型实例
比如定义一个AddTest的模型
在AddTest里可以输入x和y
执行它的run方法
可以看到结果
也可以在Java或其他脚本代码中使用加法模型
如我们新建一个加法模型的事物实例
设置x和y属性的值
然后执行
也可以执行以前定义的加法模型实例
然后执行
以上就是加法模型的示例
我们通过元事物定义加法模型
然后使用加法模型编辑实例并运行
谢谢
#$@text#$@
sinitBreakPoint
false
ssuccessBreakPoint
false
sexceptionBreakPoint
false
seditBreakPoint
false
sinterpretationType
Self
sattributeTemplate
false
schildsAttributeTemplate
false
svarScope
Local
sisSynchronized
false
sthrowException
true
suseOtherAction
false
screateLocalVarScope
false
ssaveReturn
false
sdisableGlobalContext
false
sdescriptors
xworker.swt.util.subtitle.Subtitle
sth_createIndex
false
sth_registMyChilds
false
sth_mark
false
