%1478070358614
@
sname=SubtTtle
slabel=SubtTtle
sdescriptors=xworker.lang.MetaDescriptor3
smany=true
seditCols=2
sinitialization=false
smodifier=public
sinheritDescription=false
snotXmlAttribute=false
sjson_isArray=false
sth_createIndex=false
sth_registMyChilds=false
sth_registDisabled=false
sth_mark=false
  @/@actions
  sname=actions
  sdescriptors=xworker.lang.MetaDescriptor3/@actions
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_mark=false
  sid=actions
    @/@actions/@Subtitle
    sname=Subtitle
    sfont="黑体|22|1|#000000"
    Ssubtitles=
#$@text#$@
在这个视频里，我们将演示一下元事物的性质。
主要演示两点，1.元事物的作用是用来创建类，2.通过元事物可以创建元事物自己。
首先我们从对象开始来寻找它的描述者，其中描述者是对象的类和结构
首先我们打开一个对象Tom
打开Tom的描述者Person
打开Person的描述者MetaThingStage3
打开MetaThingStage3的描述者MetaThingStage2
打开MetaThingStage2的描述者MetaThingStage1
打开MetaThingStage1的描述者MetaThingStage0
打开MetaThingStage0的描述者MetaThing
打开MetaThing的描述者MetaDescriptor3
在这里可以看到MetaDescriptor3和MetaThingStage3是相同的，所以构成了一个循环
那么反过来我们是不是可以通过MetaDescriptor3来创建MetaThing，再从MetaThing一步步的创建出MetaThingStage3呢？
显然是可以的，不过由于创建过程耗费时间长，我们只创建前面几步
首先使用MetaDescriptor3来创建MetaThing
然后再用MetaThing创建MetaThingStage0
再用MetaThingStage0来创建MetaThingStage1
在这里要创建的属性就比较多了，我们就不一一演示了
总之，以上简要地演示了元事物可以创建自身，而其它类和对象可以通过元事物直接或者间接的创建
#$@text#$@
    sinterpretationType=Self
    sattributeTemplate=false
    schildsAttributeTemplate=false
    svarScope=Local
    sisSynchronized=false
    sthrowException=true
    suseOtherAction=false
    screateLocalVarScope=false
    ssaveReturn=false
    sdisableGlobalContext=false
    sdebugLog=false
    sdescriptors=xworker.swt.util.subtitle.Subtitle
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    sth_mark=false
    sid=Subtitle
