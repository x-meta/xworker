<?xml version="1.0" encoding="utf-8"?>

<thing name="KafkaStream" descriptors="xworker.lang.MetaDescriptor3">
    <description><![CDATA[<p>使用StreamBuilder构建KafkaSream。</p>

<p>通过子节点构建StreamBuilder，子节点需要实现下面的方法：</p>

<ul>
	<li><strong>void build(StreamBuilder builder)</strong><br />
	构建StreamBuilder。</li>
</ul>

<p>&nbsp;&nbsp;</p>
]]></description>
    <actions>
        <JavaAction name="start" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
             methodName="start"></JavaAction>
        <JavaAction name="stop" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
             methodName="stop"></JavaAction>
        <JavaAction name="getKeySerdeClass" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
             methodName="getKeySerdeClass" usage="params">
            <outs>
                <param name="param" type="java.lang.class"></param>
            </outs>
        </JavaAction>
        <JavaAction name="getValueSerdeClass" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
             methodName="getValueSerdeClass" usage="params">
            <outs>
                <param name="param" type="java.lang.class"></param>
            </outs>
        </JavaAction>
        <GetProperties name="getConfig" _xmeta_id_="18432" descriptors="xworker.lang.actions.ActionUtil/@GetProperties"
             attributeName="config" usage="params"></GetProperties>
    </actions>
    <attribute name="name"></attribute>
    <attribute name="label"></attribute>
    <attribute name="applicationId" default="my-stream-processing-application"></attribute>
    <attribute name="keySerdeClass" _xmeta_id_="keySerde" inputtype="select" size="60" default="StringSerde">
        <value name="ByteArraySerde" value="ByteArraySerde"></value>
        <value name="ByteBufferSerde" value="ByteBufferSerde"></value>
        <value name="BytesSerde" value="BytesSerde"></value>
        <value name="DoubleSerde" value="DoubleSerde"></value>
        <value name="FloatSerde" value="FloatSerde"></value>
        <value name="IntegerSerde" value="IntegerSerde"></value>
        <value name="LongSerde" value="LongSerde"></value>
        <value name="ShortSerde" value="ShortSerde"></value>
        <value name="StringSerde" value="StringSerde"></value>
        <value name="UUIDSerde" value="UUIDSerde"></value>
        <value name="VoidSerde" value="VoidSerde"></value>
    </attribute>
    <attribute name="valueSerdeClass" extends="xworker.org.apache.kafka.KafkaStream/@keySerde"
         inputtype="select" size="60" default="StringSerde"></attribute>
    <attribute name="config" inputtype="textarea">
        <default><![CDATA[bootstrap.servers=
group.id=
enable.auto.commit=true
auto.commit.interval.ms=1000]]></default>
    </attribute>
    <attribute name="description" inputtype="html"></attribute>
    <thing name="AddGlobalStore" extends="xworker.org.apache.kafka.streams.state.Stores,xworker.org.apache.kafka.KafkaStream">
        <description><![CDATA[<p>包装以下方法：</p>

<p>StreamsBuilder.addGlobalStore(StoreBuilder&lt;?&gt; storeBuilder, String topic, Consumed&lt;KIn,VIn&gt; consumed, ProcessorSupplier&lt;KIn,VIn,Void,Void&gt; stateUpdateSupplier)<br />
Adds a global StateStore to the topology.</p>

<p>其中storeBuilder、consumed和stateUpdateSupplier等参数通过子节点创建。</p>

<p><strong>子节点</strong></p>

<p>&nbsp;&nbsp;&nbsp; 当执行addGlobalStore方法后，会遍历执行子节点的build(StreamsBuilder builder)方法</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="execute" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
                 methodName="buildAddGlobalStore"></JavaAction>
            <GetString name="getTopic" _xmeta_id_="13108" descriptors="xworker.lang.actions.ActionUtil/@GetString"
                 attributeName="topic" usage="params"></GetString>
            <NOOP name="create"></NOOP>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="topic" size="50"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="Consumed" extends="xworker.org.apache.kafka.streams.kstream.Consumed"
             inheritDescription="true"></thing>
        <thing name="ProcessorSupplier" extends="xworker.org.apache.kafka.streams.processor.ProcessorSupplier"
             inheritDescription="true"></thing>
    </thing>
    <thing name="AddStateStore" extends="xworker.org.apache.kafka.streams.state.Stores,xworker.org.apache.kafka.KafkaStream">
        <description><![CDATA[<p><strong>包装以下方法：</strong></p>

<p>addStateStore(StoreBuilder&lt;?&gt; builder)<br />
Adds a state store to the underlying Topology.</p>

<p>其中storeBuilder参数通过子节点创建。</p>

<p><strong>子节点</strong></p>

<p>&nbsp;&nbsp;&nbsp; 当执行addGlobalStore方法后，会遍历执行子节点的build(StreamsBuilder builder)方法</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="execute" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
                 methodName="buildAddStateStore"></JavaAction>
            <NOOP name="create"></NOOP>
        </actions>
    </thing>
    <thing name="GlobalTable">
        <description><![CDATA[<p><strong>封装StreamBuilder的以下方法：</strong></p>

<p>Create a GlobalKTable for the specified topic.<br />
&lt;K,V&gt; GlobalKTable&lt;K,V&gt;&nbsp;globalTable(String topic)<br />
&lt;K,V&gt; GlobalKTable&lt;K,V&gt;&nbsp;globalTable(String topic, Consumed&lt;K,V&gt; consumed)<br />
&lt;K,V&gt; GlobalKTable&lt;K,V&gt;&nbsp;globalTable(String topic, Consumed&lt;K,V&gt; consumed, Materialized&lt;K,V,KeyValueStore&lt;org.apache.kafka.common.utils.Bytes,byte[]&gt;&gt; materialized)<br />
&lt;K,V&gt; GlobalKTable&lt;K,V&gt;&nbsp;globalTable(String topic, Materialized&lt;K,V,KeyValueStore&lt;org.apache.kafka.common.utils.Bytes,byte[]&gt;&gt; materialized)</p>

<p>其中 consumed、materialized等参数由子节点创建，根据参数是否设置选择合适的方法执行。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="execute" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
                 methodName="buildGlobalTable"></JavaAction>
            <NOOP name="create"></NOOP>
            <GetString name="getTopic" _xmeta_id_="23867" descriptors="xworker.lang.actions.ActionUtil/@GetString"
                 attributeName="topic" usage="params"></GetString>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="topic" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="Materialized" extends="xworker.org.apache.kafka.streams.kstream.Materialized"
             inheritDescription="true"></thing>
        <thing name="Consumed" extends="xworker.org.apache.kafka.streams.kstream.Consumed"
             inheritDescription="true"></thing>
    </thing>
    <thing name="Stream" extends="xworker.org.apache.kafka.streams.kstream.KStream">
        <description><![CDATA[<p><strong>包装下面的方法：</strong></p>

<p>Create a KStream from the specified topics.<br />
&lt;K,V&gt; KStream&lt;K,V&gt;&nbsp;stream(Collection&lt;String&gt; topics, Consumed&lt;K,V&gt; consumed)<br />
其中consumed参数通过子节点的create方法获取。</p>

<p><strong>子节点的build</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream创建成功不，遍历子节点执行build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="execute" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
                 methodName="buildStream"></JavaAction>
            <NOOP name="create"></NOOP>
            <GetStringList name="getTopics" descriptors="xworker.lang.actions.ActionUtil/@GetStringList"
                 attributeName="topics"></GetStringList>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="topics" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="Table">
        <description><![CDATA[<p><strong>封装StreamBuilder的以下方法：</strong></p>

<p>Create a KTable for the specified topic.<br />
&lt;K,V&gt; KTable&lt;K,V&gt;&nbsp;table(String topic)<br />
&lt;K,V&gt; KTable&lt;K,V&gt;&nbsp;table(String topic, Consumed&lt;K,V&gt; consumed)<br />
&lt;K,V&gt; KTable&lt;K,V&gt;&nbsp;table(String topic, Consumed&lt;K,V&gt; consumed, Materialized&lt;K,V,KeyValueStore&lt;org.apache.kafka.common.utils.Bytes,byte[]&gt;&gt; materialized)<br />
&lt;K,V&gt; KTable&lt;K,V&gt;&nbsp;table(String topic, Materialized&lt;K,V,KeyValueStore&lt;org.apache.kafka.common.utils.Bytes,byte[]&gt;&gt; materialized)</p>

<p>其中 consumed、materialized等参数由子节点创建，根据参数是否设置选择合适的方法执行。</p>

<p><strong>子节点的build</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KTable创建成功，那么会遍历子节点执行void build(KTable ktable)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="execute" outerClassName="xworker.org.apache.kafka.XWorkerKafkaStream"
                 methodName="buildTable"></JavaAction>
            <NOOP name="create"></NOOP>
            <GetString name="getTopic" _xmeta_id_="23867" descriptors="xworker.lang.actions.ActionUtil/@GetString"
                 attributeName="topic" usage="params"></GetString>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="topic" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="Materialized" extends="xworker.org.apache.kafka.streams.kstream.Materialized"
             inheritDescription="true"></thing>
        <thing name="Consumed" extends="xworker.org.apache.kafka.streams.kstream.Consumed"
             inheritDescription="true"></thing>
    </thing>
</thing>