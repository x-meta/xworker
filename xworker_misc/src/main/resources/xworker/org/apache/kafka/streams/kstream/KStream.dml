<?xml version="1.0" encoding="utf-8"?>

<thing name="KStream" descriptors="xworker.lang.MetaDescriptor3">
    <description><![CDATA[<p>KStream is an abstraction of a record stream of KeyValue pairs, i.e., each record is an independent entity/event in the real world. For example a user X might buy two items I1 and I2, and thus there might be two records &lt;K:I1&gt;, &lt;K:I2&gt; in the stream.<br />
A KStream is either defined from one or multiple Kafka topics that are consumed message by message or the result of a KStream transformation. A KTable can also be converted into a KStream.</p>

<p>A KStream can be transformed record by record, joined with another KStream, KTable, GlobalKTable, or can be aggregated into a KTable. Kafka Streams DSL can be mixed-and-matched with Processor API (PAPI) (c.f. Topology) via process(...), transform(...), and transformValues(...).</p>

<p><strong>build</strong></p>

<p>&nbsp;&nbsp;&nbsp; 会遍历和执行子节点的void build(KStream kstream)方法。</p>
]]></description>
    <actions>
        <JavaAction name="build" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
             methodName="build"></JavaAction>
        <NOOP name="create"></NOOP>
    </actions>
    <attribute name="name"></attribute>
    <attribute name="label"></attribute>
    <attribute name="description" inputtype="html"></attribute>
    <thing name="Branch" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.Predicates">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Creates an array of KStream from this stream by branching the records in the original stream based on the supplied predicates.</p>

<p>&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;[]&nbsp;branch(Named named, Predicate&lt;? super K,? super V&gt;... predicates)<br />
&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;[]&nbsp;branch(Predicate&lt;? super K,? super V&gt;... predicates)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream[]成功创建，那么会分别变量KStream[]的并遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createBranch"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="Filter" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.Predicates">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Create a new KStream that consists of all records of this stream which satisfy the given predicate.</p>

<p>&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;filter(Predicate&lt;? super K,? super V&gt; predicate)<br />
&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;filter(Predicate&lt;? super K,? super V&gt; predicate, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFilter"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="FilterNot" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.Predicates">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Create a new KStream that consists all records of this stream which do not satisfy the given predicate.</p>

<p>&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;filterNot(Predicate&lt;? super K,? super V&gt; predicate)<br />
&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;filterNot(Predicate&lt;? super K,? super V&gt; predicate, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFilterNot"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="FlatMap" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.KeyValueMappers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform each record of the input stream into zero or more records in the output stream (both key and value type can be altered arbitrarily).</p>

<p>&nbsp;&nbsp;&nbsp; &lt;KR,VR&gt; KStream&lt;KR,VR&gt;&nbsp;flatMap(KeyValueMapper&lt;? super K,? super V,? extends Iterable&lt;? extends KeyValue&lt;? extends KR,? extends VR&gt;&gt;&gt; mapper)<br />
&nbsp;&nbsp;&nbsp; &lt;KR,VR&gt; KStream&lt;KR,VR&gt;&nbsp;flatMap(KeyValueMapper&lt;? super K,? super V,? extends Iterable&lt;? extends KeyValue&lt;? extends KR,? extends VR&gt;&gt;&gt; mapper, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFlatMap"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="FlatMapValues" _xmeta_id_="FlatMapByValue" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueMappers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Create a new KStream by transforming the value of each record in this stream into zero or more values with the same key in the new stream.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatMapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatMapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFlatMapValues"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="FlatMapValuesWithKey" _xmeta_id_="FlatMapValuesWithKEy" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueMapperWithKeys">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Create a new KStream by transforming the value of each record in this stream into zero or more values with the same key in the new stream.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatMapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatMapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFlatMapValuesWithKey"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="FlatTransform" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.TransformerSuppliers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform each record of the input stream into zero or more records in the output stream (both key and value type can be altered arbitrarily).</p>

<p>&nbsp;&nbsp;&nbsp; &lt;K1,V1&gt; KStream&lt;K1,V1&gt;&nbsp;flatTransform(TransformerSupplier&lt;? super K,? super V,Iterable&lt;KeyValue&lt;K1,V1&gt;&gt;&gt; transformerSupplier, Named named, String... stateStoreNames)<br />
&nbsp;&nbsp;&nbsp; &lt;K1,V1&gt; KStream&lt;K1,V1&gt;&nbsp;flatTransform(TransformerSupplier&lt;? super K,? super V,Iterable&lt;KeyValue&lt;K1,V1&gt;&gt;&gt; transformerSupplier, String... stateStoreNames)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFlatTransform"></JavaAction>
            <GetStringArray name="getStateStoreNames" _xmeta_id_="57323" descriptors="xworker.lang.actions.ActionUtil/@getStringArray"
                 attributeName="stateStoreNames" usage="params"></GetStringArray>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="stateStoreNames" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="FlatTransformValues" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueTransformerSuppliers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform the value of each input record into zero or more new values (with possibly a new type) and emit for each new value a record with the same key of the input record and the value.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatTransformValues(ValueTransformerSupplier&lt;? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, Named named, String... stateStoreNames)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatTransformValues(ValueTransformerSupplier&lt;? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, String... stateStoreNames)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFlatTransformValues"></JavaAction>
            <GetStringArray name="getStateStoreNames" _xmeta_id_="57323" descriptors="xworker.lang.actions.ActionUtil/@getStringArray"
                 attributeName="stateStoreNames" usage="params"></GetStringArray>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="stateStoreNames" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="FlatTransformValuesWithKey" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueTransformerSuppliers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform the value of each input record into zero or more new values (with possibly a new type) and emit for each new value a record with the same key of the input record and the value.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatTransformValues(ValueTransformerWithKeySupplier&lt;? super K,? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, Named named, String... stateStoreNames)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;flatTransformValues(ValueTransformerWithKeySupplier&lt;? super K,? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, String... stateStoreNames)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createFlatTransformValuesWithKey"></JavaAction>
            <GetStringArray name="getStateStoreNames" _xmeta_id_="57323" descriptors="xworker.lang.actions.ActionUtil/@getStringArray"
                 attributeName="stateStoreNames" usage="params"></GetStringArray>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="stateStoreNames" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="Foreach" extends="xworker.org.apache.kafka.streams.kstream.ForeachActions">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Perform an action on each record of KStream.</p>

<p>&nbsp;&nbsp;&nbsp; void&nbsp;foreach(ForeachAction&lt;? super K,? super V&gt; action)<br />
&nbsp;&nbsp;&nbsp; void&nbsp;foreach(ForeachAction&lt;? super K,? super V&gt; action, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createForeach"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="GroupBy" extends="xworker.org.apache.kafka.streams.kstream.KGroupedStream,xworker.org.apache.kafka.streams.kstream.KeyValueMappers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Group the records of this KStream on a new key that is selected using the provided KeyValueMapper and default serializers and deserializers.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;KR&gt; KGroupedStream&lt;KR,V&gt;&nbsp;groupBy(KeyValueMapper&lt;? super K,? super V,KR&gt; keySelector)<br />
&nbsp;&nbsp;&nbsp; &lt;KR&gt; KGroupedStream&lt;KR,V&gt;&nbsp;groupBy(KeyValueMapper&lt;? super K,? super V,KR&gt; keySelector, Grouped&lt;KR,V&gt; grouped)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KGroupedStream成功创建，那么会遍历子节点执行void build(KGroupedStream kgstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createGroupBy"></JavaAction>
        </actions>
        <thing name="Grouped" extends="xworker.org.apache.kafka.streams.kstream.Grouped"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="GroupByKey" extends="xworker.org.apache.kafka.streams.kstream.KGroupedStream">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Group the records by their current key into a KGroupedStream while preserving the original values.</p>

<p>&nbsp;&nbsp;&nbsp; KGroupedStream&lt;K,V&gt;&nbsp;groupByKey()<br />
&nbsp;&nbsp;&nbsp; KGroupedStream&lt;K,V&gt;&nbsp;groupByKey(Grouped&lt;K,V&gt; grouped)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KGroupedStream成功创建，那么会遍历子节点执行void build(KGroupedStream kgstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createGroupByKey"></JavaAction>
        </actions>
        <thing name="Grouped" extends="xworker.org.apache.kafka.streams.kstream.Grouped"
             group="params"></thing>
    </thing>
    <thing name="JoinGlobalKTable" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.KeyValueMappers,xworker.org.apache.kafka.streams.kstream.ValueJoiners">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Join records of this stream with GlobalKTable&#39;s records using non-windowed inner equi join.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;GK,GV,RV&gt; KStream&lt;K,RV&gt;&nbsp;join(GlobalKTable&lt;GK,GV&gt; globalTable, KeyValueMapper&lt;? super K,? super V,? extends GK&gt; keySelector, ValueJoiner&lt;? super V,? super GV,? extends RV&gt; joiner)<br />
&nbsp;&nbsp;&nbsp; &lt;GK,GV,RV&gt; KStream&lt;K,RV&gt;&nbsp;join(GlobalKTable&lt;GK,GV&gt; globalTable, KeyValueMapper&lt;? super K,? super V,? extends GK&gt; keySelector, ValueJoiner&lt;? super V,? super GV,? extends RV&gt; joiner, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createJoinGlobalKTable"></JavaAction>
            <GetObject name="getTable" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="tabe" usage="params"></GetObject>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="JoinKStream" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueJoiners">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Join records of this stream with another KStream&#39;s records using windowed inner equi join with default serializers and deserializers.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VO,VR&gt; KStream&lt;K,VR&gt;&nbsp;join(KStream&lt;K,VO&gt; otherStream, ValueJoiner&lt;? super V,? super VO,? extends VR&gt; joiner, JoinWindows windows)<br />
&nbsp;&nbsp;&nbsp; &lt;VO,VR&gt; KStream&lt;K,VR&gt;&nbsp;join(KStream&lt;K,VO&gt; otherStream, ValueJoiner&lt;? super V,? super VO,? extends VR&gt; joiner, JoinWindows windows, StreamJoined&lt;K,V,VO&gt; streamJoined)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createJoinKStream"></JavaAction>
            <GetObject name="getKStream" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="kstream" usage="params"></GetObject>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="kstream" _xmeta_id_="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="JoinWindows" extends="xworker.org.apache.kafka.streams.kstream.JoinWindows"
             group="params"></thing>
        <thing name="StreamJoined" extends="xworker.org.apache.kafka.streams.kstream.StreamJoined"
             group="params"></thing>
    </thing>
    <thing name="JoinKTable" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueJoiners">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Join records of this stream with KTable&#39;s records using non-windowed inner equi join with default serializers and deserializers.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VT,VR&gt; KStream&lt;K,VR&gt;&nbsp;join(KTable&lt;K,VT&gt; table, ValueJoiner&lt;? super V,? super VT,? extends VR&gt; joiner)<br />
&nbsp;&nbsp;&nbsp; &lt;VT,VR&gt; KStream&lt;K,VR&gt;&nbsp;join(KTable&lt;K,VT&gt; table, ValueJoiner&lt;? super V,? super VT,? extends VR&gt; joiner, Joined&lt;K,V,VT&gt; joined)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createJoinKTable"></JavaAction>
            <GetObject name="getTable" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="tabe" usage="params"></GetObject>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="Joined" extends="xworker.org.apache.kafka.streams.kstream.Joined"
             group="params"></thing>
    </thing>
    <thing name="LeftJoinGlobalKTable" _xmeta_id_="JoinGlobalKTable1" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.KeyValueMappers,xworker.org.apache.kafka.streams.kstream.ValueJoiners">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Join records of this stream with GlobalKTable&#39;s records using non-windowed inner equi join.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;GK,GV,RV&gt; KStream&lt;K,RV&gt;&nbsp;leftJoin(GlobalKTable&lt;GK,GV&gt; globalTable, KeyValueMapper&lt;? super K,? super V,? extends GK&gt; keySelector, ValueJoiner&lt;? super V,? super GV,? extends RV&gt; joiner)<br />
&nbsp;&nbsp;&nbsp; &lt;GK,GV,RV&gt; KStream&lt;K,RV&gt;&nbsp;leftJoin(GlobalKTable&lt;GK,GV&gt; globalTable, KeyValueMapper&lt;? super K,? super V,? extends GK&gt; keySelector, ValueJoiner&lt;? super V,? super GV,? extends RV&gt; joiner, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createLeftJoinGlobalKTable"></JavaAction>
            <GetObject name="getTable" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="tabe" usage="params"></GetObject>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="LeftJoinKStream" _xmeta_id_="JoinKStream1" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueJoiners">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Join records of this stream with another KStream&#39;s records using windowed inner equi join with default serializers and deserializers.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VO,VR&gt; KStream&lt;K,VR&gt;&nbsp;leftJoin(KStream&lt;K,VO&gt; otherStream, ValueJoiner&lt;? super V,? super VO,? extends VR&gt; joiner, JoinWindows windows)<br />
&nbsp;&nbsp;&nbsp; &lt;VO,VR&gt; KStream&lt;K,VR&gt;&nbsp;leftJoin(KStream&lt;K,VO&gt; otherStream, ValueJoiner&lt;? super V,? super VO,? extends VR&gt; joiner, JoinWindows windows, StreamJoined&lt;K,V,VO&gt; streamJoined)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createLeftJoinKStream"></JavaAction>
            <GetObject name="getKStream" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="kstream" usage="params"></GetObject>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="kstream" _xmeta_id_="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="JoinWindows" extends="xworker.org.apache.kafka.streams.kstream.JoinWindows"
             group="params"></thing>
        <thing name="StreamJoined" extends="xworker.org.apache.kafka.streams.kstream.StreamJoined"
             group="params"></thing>
    </thing>
    <thing name="LeftJoinKTable" _xmeta_id_="JoinKTable1" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueJoiners">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Join records of this stream with KTable&#39;s records using non-windowed inner equi join with default serializers and deserializers.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VT,VR&gt; KStream&lt;K,VR&gt;&nbsp;leftJoin(KTable&lt;K,VT&gt; table, ValueJoiner&lt;? super V,? super VT,? extends VR&gt; joiner)<br />
&nbsp;&nbsp;&nbsp; &lt;VT,VR&gt; KStream&lt;K,VR&gt;&nbsp;leftJoin(KTable&lt;K,VT&gt; table, ValueJoiner&lt;? super V,? super VT,? extends VR&gt; joiner, Joined&lt;K,V,VT&gt; joined)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createLeftJoinKTable"></JavaAction>
            <GetObject name="getTable" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="tabe" usage="params"></GetObject>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="Joined" extends="xworker.org.apache.kafka.streams.kstream.Joined"
             group="params"></thing>
    </thing>
    <thing name="OuterJoinKStream" _xmeta_id_="JoinKStream11" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueJoiners">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Join records of this stream with another&nbsp;KStream&#39;s records using windowed outer equi join with default serializers and deserializers.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VO,VR&gt; KStream&lt;K,VR&gt;&nbsp;outerJoin(KStream&lt;K,VO&gt; otherStream, ValueJoiner&lt;? super V,? super VO,? extends VR&gt; joiner, JoinWindows windows)<br />
&nbsp;&nbsp;&nbsp; &lt;VO,VR&gt; KStream&lt;K,VR&gt;&nbsp;outerJoin(KStream&lt;K,VO&gt; otherStream, ValueJoiner&lt;? super V,? super VO,? extends VR&gt; joiner, JoinWindows windows, StreamJoined&lt;K,V,VO&gt; streamJoined)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createOuterJoinKStream"></JavaAction>
            <GetObject name="getKStream" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="kstream" usage="params"></GetObject>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="kstream" _xmeta_id_="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="JoinWindows" extends="xworker.org.apache.kafka.streams.kstream.JoinWindows"
             group="params"></thing>
        <thing name="StreamJoined" extends="xworker.org.apache.kafka.streams.kstream.StreamJoined"
             group="params"></thing>
    </thing>
    <thing name="Map" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.KeyValueMappers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform each record of the input stream into zero or more records in the output stream (both key and value type can be altered arbitrarily).</p>

<p>&nbsp;&nbsp;&nbsp; &lt;KR,VR&gt; KStream&lt;KR,VR&gt;&nbsp;map(KeyValueMapper&lt;? super K,? super V,? extends Iterable&lt;? extends KeyValue&lt;? extends KR,? extends VR&gt;&gt;&gt; mapper)<br />
&nbsp;&nbsp;&nbsp; &lt;KR,VR&gt; KStream&lt;KR,VR&gt;&nbsp;map(KeyValueMapper&lt;? super K,? super V,? extends Iterable&lt;? extends KeyValue&lt;? extends KR,? extends VR&gt;&gt;&gt; mapper, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createMap"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="MapValues" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueMappers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Create a new KStream by transforming the value of each record in this stream into zero or more values with the same key in the new stream.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;mapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;mapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createMapValues"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="MapValuesWithKey" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueMapperWithKeys">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Create a new KStream by transforming the value of each record in this stream into zero or more values with the same key in the new stream.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;mapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;mapValues(ValueMapper&lt;? super V,? extends Iterable&lt;? extends VR&gt;&gt; mapper, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createMapValuesWithKey"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="Merge" extends="xworker.org.apache.kafka.streams.kstream.KStream">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Merge this stream and the given stream into one larger stream.</p>

<p>&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;merge(KStream&lt;K,V&gt; stream)<br />
&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;merge(KStream&lt;K,V&gt; stream, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createMerge"></JavaAction>
            <GetObject name="getKStream" _xmeta_id_="68737" descriptors="xworker.lang.actions.ActionUtil/@GetData"
                 attributeName="kstream" usage="params"></GetObject>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="kstream" _xmeta_id_="table" size="40"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="Peek" extends="xworker.org.apache.kafka.streams.kstream.ForeachActions">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Perform an action on each record of KStream.</p>

<p>&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;peek(ForeachAction&lt;? super K,? super V&gt; action)<br />
&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;peek(ForeachAction&lt;? super K,? super V&gt; action, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createPeek"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="Print" extends="xworker.org.apache.kafka.streams.kstream.Printed" inheritDescription="true">
        <description><![CDATA[<p>Print the records of this KStream using the options provided by&nbsp;Printed&nbsp;Note that this is mainly for debugging/testing purposes, and it will try to flush on each record print.</p>
]]></description>
    </thing>
    <thing name="Process" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.processor.ProcessorSuppliers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Process all records in this stream, one record at a time, by applying a Processor (provided by the given ProcessorSupplier).</p>

<p>&nbsp;&nbsp;&nbsp; void&nbsp;process(ProcessorSupplier&lt;? super K,? super V&gt; processorSupplier, Named named, String... stateStoreNames)<br />
&nbsp;&nbsp;&nbsp; void&nbsp;process(ProcessorSupplier&lt;? super K,? super V&gt; processorSupplier, String... stateStoreNames)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p>&nbsp;</p>
]]></description>
        <actions>
            <JavaAction name="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createProcess"></JavaAction>
            <GetStringArray name="getStateStoreNames" _xmeta_id_="57323" descriptors="xworker.lang.actions.ActionUtil/@getStringArray"
                 attributeName="stateStoreNames" usage="params"></GetStringArray>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="stateStoreNames" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="Repartition" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.Predicates">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Materialize this stream to an auto-generated repartition topic and create a new KStream from the auto-generated topic.</p>

<p>&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;repartition()<br />
&nbsp;&nbsp;&nbsp; KStream&lt;K,V&gt;&nbsp;repartition(Repartitioned&lt;K,V&gt; repartitioned)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createRepartition"></JavaAction>
        </actions>
        <thing name="Repartitioned" _xmeta_id_="Named" extends="xworker.org.apache.kafka.streams.kstream.Repartitioned"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="SelectKey" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.KeyValueMappers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Set a new key (with possibly new type) for each input record.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;KR&gt; KStream&lt;KR,V&gt;&nbsp;selectKey(KeyValueMapper&lt;? super K,? super V,? extends KR&gt; mapper)<br />
&nbsp;&nbsp;&nbsp; &lt;KR&gt; KStream&lt;KR,V&gt;&nbsp;selectKey(KeyValueMapper&lt;? super K,? super V,? extends KR&gt; mapper, Named named)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createSelectKey"></JavaAction>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="To" extends="xworker.org.apache.kafka.streams.processor.TopicNameExtractors">
        <description><![CDATA[<p><strong>封装KStream的以下方法：</strong></p>

<p>Materialize this stream to a topic.</p>

<p>&nbsp;&nbsp;&nbsp; void&nbsp;to(String topic)<br />
&nbsp;&nbsp;&nbsp; void&nbsp;to(String topic, Produced&lt;K,V&gt; produced)<br />
&nbsp;&nbsp;&nbsp; void&nbsp;to(TopicNameExtractor&lt;K,V&gt; topicExtractor)<br />
&nbsp;&nbsp;&nbsp; void&nbsp;to(TopicNameExtractor&lt;K,V&gt; topicExtractor, Produced&lt;K,V&gt; produced)</p>

<p>部分参数通过子节点的create方法创建，根据参数选择合适的方法，其中topic参数优先使用。<br />
&nbsp;</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="buildTo"></JavaAction>
            <GetString name="getTopic" _xmeta_id_="23619" descriptors="xworker.lang.actions.ActionUtil/@GetString"
                 attributeName="topic" usage="params"></GetString>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="topic" size="40"></attribute>
        <thing name="Produced" extends="xworker.org.apache.kafka.streams.kstream.Produced"
             group="params" inheritDescription="true"></thing>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="ToTable" extends="xworker.org.apache.kafka.streams.kstream.KTable">
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="buildToTable"></JavaAction>
            <NOOP name="create" _xmeta_id_="create1"></NOOP>
        </actions>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="description" inputtype="html"></attribute>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <thing name="Materialized" extends="xworker.org.apache.kafka.streams.kstream.Materialized"
             group="params" inheritDescription="true"></thing>
    </thing>
    <thing name="Transform" _xmeta_id_="FlatTransform1" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.TransformerSuppliers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform each record of the input stream into zero or more records in the output stream (both key and value type can be altered arbitrarily).</p>

<p>&nbsp;&nbsp;&nbsp; &lt;K1,V1&gt; KStream&lt;K1,V1&gt;&nbsp;transform(TransformerSupplier&lt;? super K,? super V,Iterable&lt;KeyValue&lt;K1,V1&gt;&gt;&gt; transformerSupplier, Named named, String... stateStoreNames)<br />
&nbsp;&nbsp;&nbsp; &lt;K1,V1&gt; KStream&lt;K1,V1&gt;&nbsp;transform(TransformerSupplier&lt;? super K,? super V,Iterable&lt;KeyValue&lt;K1,V1&gt;&gt;&gt; transformerSupplier, String... stateStoreNames)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createTransform"></JavaAction>
            <GetStringArray name="getStateStoreNames" _xmeta_id_="57323" descriptors="xworker.lang.actions.ActionUtil/@getStringArray"
                 attributeName="stateStoreNames" usage="params"></GetStringArray>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="stateStoreNames" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="TransformValues" _xmeta_id_="FlatTransformValues1" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueTransformerSuppliers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform the value of each input record into zero or more new values (with possibly a new type) and emit for each new value a record with the same key of the input record and the value.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;transformValues(ValueTransformerSupplier&lt;? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, Named named, String... stateStoreNames)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;transformValues(ValueTransformerSupplier&lt;? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, String... stateStoreNames)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createTransformValues"></JavaAction>
            <GetStringArray name="getStateStoreNames" _xmeta_id_="57323" descriptors="xworker.lang.actions.ActionUtil/@getStringArray"
                 attributeName="stateStoreNames" usage="params"></GetStringArray>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="stateStoreNames" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
    <thing name="TransformValuesWithKey" _xmeta_id_="FlatTransformValuesWithKey1" extends="xworker.org.apache.kafka.streams.kstream.KStream,xworker.org.apache.kafka.streams.kstream.ValueTransformerSuppliers">
        <description><![CDATA[<p><strong>封装以下方法</strong></p>

<p>Transform the value of each input record into zero or more new values (with possibly a new type) and emit for each new value a record with the same key of the input record and the value.</p>

<p>&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;transformValues(ValueTransformerWithKeySupplier&lt;? super K,? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, Named named, String... stateStoreNames)<br />
&nbsp;&nbsp;&nbsp; &lt;VR&gt; KStream&lt;K,VR&gt;&nbsp;transformValues(ValueTransformerWithKeySupplier&lt;? super K,? super V,Iterable&lt;VR&gt;&gt; valueTransformerSupplier, String... stateStoreNames)</p>

<p>其中参数由子节点的create方法创建，根据参数选择合适的方法执行。</p>

<p><strong>执行子节点的build方法</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果KStream成功创建，那么会遍历子节点执行void build(KStream kstream)方法。</p>
]]></description>
        <actions>
            <JavaAction name="build" _xmeta_id_="create" outerClassName="xworker.org.apache.kafka.streams.kstream.KStreamActions"
                 methodName="createTransformValuesWithKey"></JavaAction>
            <GetStringArray name="getStateStoreNames" _xmeta_id_="57323" descriptors="xworker.lang.actions.ActionUtil/@getStringArray"
                 attributeName="stateStoreNames" usage="params"></GetStringArray>
        </actions>
        <thing name="Named" extends="xworker.org.apache.kafka.streams.kstream.Named"
             group="params" inheritDescription="true"></thing>
        <attribute name="name"></attribute>
        <attribute name="label"></attribute>
        <attribute name="stateStoreNames" inputtype="textarea"></attribute>
        <attribute name="description" inputtype="html"></attribute>
    </thing>
</thing>