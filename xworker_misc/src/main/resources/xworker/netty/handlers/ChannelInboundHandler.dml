<?xml version="1.0" encoding="utf-8"?>

<thing name="ChannelInboundHandler" descriptors="xworker.lang.MetaDescriptor3">
    <description><![CDATA[<p>ChannelHandler&nbsp;which adds callbacks for state changes. This allows the user to hook in to state changes easily.</p>

<p><strong>注意：</strong></p>

<p>&nbsp;&nbsp;&nbsp; 在NettyClient中使用是，不建议在<strong>channelRegistered()</strong>方法中发送注册之类的消息到服务器，经测试在某些情况下这些消息会丢失，可以使用NettyClient的startSuccess事件中发送注册消息等。</p>
]]></description>
    <actions>
        <JavaAction name="create" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="create"></JavaAction>
        <JavaAction name="handlerAdded" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="handlerAdded" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="handlerRemoved" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="handlerRemoved" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="channelRegistered" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="channelRegistered" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="channelUnregistered" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="channelUnregistered" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="channelActive" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="channelActive" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="channelInactive" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="channelInactive" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="channelRead" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="channelRead" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
                <param name="msg" type="java.lang.Object"></param>
            </ins>
        </JavaAction>
        <JavaAction name="channelReadComplete" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="channelReadComplete" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="userEventTriggered" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="userEventTriggered" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
                <param name="evt" type="java.lang.Object"></param>
            </ins>
        </JavaAction>
        <JavaAction name="channelWritabilityChanged" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="channelWritabilityChanged" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <JavaAction name="exceptionCaught" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="exceptionCaught" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
                <param name="cause" type="java.lang.Throwable"></param>
            </ins>
        </JavaAction>
        <JavaAction name="sslOperationComplete" outerClassName="xworker.io.netty.handlers.ThingChannelInboundHandler"
             methodName="sslOperationComplete" usage="event">
            <ins>
                <param name="ctx" type="io.netty.channel.ChannelHandlerContext"></param>
            </ins>
        </JavaAction>
        <GetBoolean name="isPrintLog" descriptors="xworker.lang.actions.ActionUtil/@GetBoolean"
             attributeName="printLog" usage="params"></GetBoolean>
        <GetBoolean name="isSslOperationComplete" descriptors="xworker.lang.actions.ActionUtil/@GetBoolean"
             attributeName="sslOperationComplete" usage="event"></GetBoolean>
    </actions>
    <attribute name="name"></attribute>
    <attribute name="label"></attribute>
    <attribute name="printLog" inputtype="truefalse" modifier="" default="true">
        <description><![CDATA[<p>在默认实现的事件里是否打印日志。</p>
]]></description>
    </attribute>
    <attribute name="sslOperationComplete" inputtype="truefalse">
        <description><![CDATA[<p>如果为true，那么监听SslHandler的SSL握手成功后的事件，可以通过重写sslOperationComplete方法来监听。</p>
]]></description>
    </attribute>
    <attribute name="description" inputtype="html"></attribute>
    <thing name="actions" _xmeta_id_="actions1" descriptors="xworker.lang.MetaDescriptor2/@thing"
         label="Actions" extends="xworker.lang.actions.Actions" many="true" editCols="2"
         zh_label="动作" inheritDescription="true">
        <attribute name="name"></attribute>
    </thing>
</thing>