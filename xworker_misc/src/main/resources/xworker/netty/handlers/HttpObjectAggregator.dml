<?xml version="1.0" encoding="utf-8"?>

<thing name="HttpObjectAggregator" descriptors="xworker.lang.MetaDescriptor3">
    <description><![CDATA[<p>A&nbsp;ChannelHandler&nbsp;that aggregates an&nbsp;HttpMessage&nbsp;and its following&nbsp;HttpContents into a single&nbsp;FullHttpRequest&nbsp;or&nbsp;FullHttpResponse&nbsp;(depending on if it used to handle requests or responses) with no following&nbsp;HttpContents. It is useful when you don&#39;t want to take care of HTTP messages whose transfer encoding is &#39;chunked&#39;. Insert this handler after&nbsp;HttpObjectDecoder&nbsp;in the&nbsp;ChannelPipeline:</p>

<p>&nbsp;</p>

<p>ChannelPipeline p = ...;<br />
...<br />
p.addLast(&quot;encoder&quot;, new HttpResponseEncoder());<br />
p.addLast(&quot;decoder&quot;, new HttpRequestDecoder());<br />
p.addLast(&quot;aggregator&quot;, new HttpObjectAggregator(1048576));<br />
...<br />
p.addLast(&quot;handler&quot;, new HttpRequestHandler());</p>

<p>Be aware that you need to have the&nbsp;HttpResponseEncoder&nbsp;or&nbsp;HttpRequestEncoder&nbsp;before the&nbsp;HttpObjectAggregator&nbsp;in the&nbsp;ChannelPipeline.</p>
]]></description>
    <actions>
        <JavaAction name="create" outerClassName="xworker.io.netty.handlers.HandlerActions"
             methodName="createHttpObjectAggregator"></JavaAction>
        <GetInt name="getMaxContentLength" descriptors="xworker.lang.actions.ActionUtil/@GetInt"
             attributeName="maxContentLength"></GetInt>
    </actions>
    <attribute name="name"></attribute>
    <attribute name="label"></attribute>
    <attribute name="maxContentLength" default="1048576"></attribute>
    <attribute name="description" inputtype="html"></attribute>
</thing>