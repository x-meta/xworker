<?xml version="1.0" encoding="utf-8"?>

<QuickContent name="LocalActionListener" descriptors="xworker.content.QuickContent" label="局部监听器"
     type="thingDesc" group="dynamicModel.-990|Actions.listener" icon="icons/html.png"
     th_sortWeight="20" simpleBrowser="true" en_label="Local action listener" th_createIndex="true"
     th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>局部监听器</h1>

<p>&nbsp;&nbsp;&nbsp; 可以把动作监听器设置到动作上下文中的栈中，只要栈还存在那么就可以监听使用该动作上下文执行的动作。</p>

<p>&nbsp;&nbsp;&nbsp; 如下面的示例代码要执行一个动作，动作执行时可以打印详细执行情况，包括子动作的执行情况。</p>

<pre class="brush:groovy;">
import org.xmeta.Thing;
import org.xmeta.ActionContext;

//在动作上下文中的栈层中指定上下文事物为DebugContext
def ac = new ActionContext();
ac.peek().setContextThing(new Thing(&quot;xworker.lang.context.DebugContext&quot;));

//使用具有DebugContext的动作上下文执行动作
def action = currentThing.getAction();
action.run(ac);</pre>

<p>&nbsp;</p>
]]></description>
    <en_description><![CDATA[<h1>Local action listener</h1>

<p>&nbsp;&nbsp;&nbsp; You can set the action listener to the stack in the action context. As long as the stack still exists, you can listen to the actions executed using the action context.</p>

<p>&nbsp;&nbsp;&nbsp;For example, the following example code needs to execute an action. When the action is executed, you can print the detailed execution, including the execution of the sub action.</p>

<pre class="brush:groovy;">
import org.xmeta.Thing;
import org.xmeta.ActionContext;

//Set action listener
def ac = new ActionContext();
ac.peek().setContextThing(new Thing(&quot;xworker.lang.context.DebugContext&quot;));

//Executing an action using an action context with DebugContext
def action = currentThing.getAction();
action.run(ac);</pre>

<p>&nbsp;</p>
]]></en_description>
</QuickContent>