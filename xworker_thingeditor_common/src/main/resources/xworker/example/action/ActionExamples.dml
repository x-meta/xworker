%1627639685758
@
sname=ActionExamples
slabel=ActionExamples
Sdescription=
#$@text#$@
<p>动作相关的示例注册到这里来。</p>

<p>&nbsp;</p>
#$@text#$@
sdescriptors=xworker.swt.xworker.ThingRegistThings
sinheritDescription=false
sth_createIndex=true
sth_registThing=child|xworker.example.ExamplesIndex
sth_registMyChilds=true
sth_registDisabled=false
sth_mark=false
  @/@IteratorFileLine
  sname=IteratorFileLine
  stype=thingDemo
  spath=xworker.example.action._actions.IteratorFileLine
  sgroup=dynamicModel.-990|Actions.-800|definition
  sgroupDescriptor=false
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h1>动作定义示例</h1>

<h2>1.说明</h2>

<p>&nbsp;&nbsp;&nbsp; 这是一个遍历文件的行的对象类的动作。参数是文件(file)，用户可以重写doLine方法监听遍历。</p>

<p>&nbsp;&nbsp;&nbsp; 本示例中动作的run方法使用Groovy实现，相比用Java实现代码简单一些。</p>

<h2>2.file参数</h2>

<p>&nbsp;&nbsp;&nbsp; 通过属性file和方法getFile一起实现，默认实现通过file属性获取文件，可以是文件路径和变量等等。用户可以通过重写getFile方法来自定义获取文件。</p>

<h3>&nbsp;</h3>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Example of action definition</h2>

<h3>Using groovy implementation</h3>

<p>&nbsp;&nbsp;&nbsp; Using groovy is a lot less code than using Java.</p>

<h3>Actions are also objects</h3>

<p>&nbsp;&nbsp;&nbsp; The action model is also an object, so you can define your own behaviors, such as getFile and doLine. The action model as an object generally inherits the xworker.lang.actions.SelfAction model.</p>

<h3>Techniques for obtaining parameters</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; To execute the example action, you need to pass in a file parameter, which is implemented by the getFile method. You can get the file from the file attribute, or from the context of ognl and variable. You can also achieve a user-defined method to get the file by rewriting the getFile method.</p>

<h3>Callback</h3>

<p>&nbsp;&nbsp;&nbsp; The consumer may need to process every line of the file, where the doLine method is defined to override the doLine method.</p>
#$@text#$@
  sth_mark=false
  sid=IteratorFileLine
  @/@IteratorFileLineJava
  sname=IteratorFileLineJava
  stype=thingDemo
  spath=xworker.example.action._actions.IteratorFileLineJava
  sgroup=dynamicModel.-990|Actions.-800|definition
  sgroupDescriptor=false
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h1>动作定义示例</h1>

<h2>1.说明</h2>

<p>&nbsp;&nbsp;&nbsp; 这是一个遍历文件的行的对象类的动作。参数是文件(file)，用户可以重写doLine方法监听遍历。</p>

<p>&nbsp;&nbsp;&nbsp; 本示例中动作的run方法使用Java实现。虽然编写Java是Groovy复杂一些，但作为模型库时通常建议使用Java实现，这样性能会更好也更通用。</p>

<h2>2.file参数</h2>

<p>&nbsp;&nbsp;&nbsp; 通过属性file和方法getFile一起实现，默认实现通过file属性获取文件，可以是文件路径和变量等等。用户可以通过重写getFile方法来自定义获取文件。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Example of action definition</h2>

<h3>Using java implementation</h3>

<p>&nbsp;&nbsp;&nbsp; It is recommended to use java to implement run method in model library and high performance situation.</p>

<h3>Actions are also objects</h3>

<p>&nbsp;&nbsp;&nbsp; The action model is also an object, so you can define your own behaviors, such as GetFile and doline. The action model as an object generally inherits the xworker.lang.actions.SelfAction model.</p>

<h3>Techniques for obtaining parameters</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; To execute the example action, you need to pass in a file parameter, which is implemented by the getFile method. You can get the file from the file attribute, or from the context of ognl and variable. You can also achieve a user-defined method to get the file by rewriting the getFile method.</p>

<h3>Callback</h3>

<p>&nbsp;&nbsp;&nbsp; The consumer may need to process every line of the file, where the doLine method is defined to override the doLine method.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=IteratorFileLineJava
  @/@BeginDemo
  sname=BeginDemo
  stype=thingDemo
  spath=xworker.example.thing.actions.BeginDemo
  sgroup=dynamicModel.-990|Actions.util.statement
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Begin</h2>

<p>&nbsp;&nbsp;&nbsp; Begin的作用类似与 {......}，永远编写{}内的代码。</p>

<p>&nbsp;&nbsp;&nbsp; 本示例用Groovy代码表示：</p>

<pre class="brush:groovy;">
{
    println(&quot;hello&quot;);

    println(&quot;hello world&quot;);
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Begin</h2>

<p>&nbsp;&nbsp;&nbsp; Begin works like {...}, always writing code within {}.</p>

<p>&nbsp;&nbsp;&nbsp; This example is represented in groovy Code:</p>

<pre class="brush:groovy;">
{
    println(&quot;hello&quot;);

    println(&quot;hello world&quot;);
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=BeginDemo
  @/@DoDemo
  sname=DoDemo
  stype=thingDemo
  spath=xworker.example.thing.actions.DoDemo
  sgroup=dynamicModel.-990|Actions.util.statement
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Do</h2>

<p>&nbsp;&nbsp;&nbsp; 本示例的代码用Groovy表示类似如下。</p>

<pre class="brush:groovy;">
int i = 0;
do{
   i++;
   println(i);

   if(i &gt; 8){
      break;
   }
}while(i &lt; 10);</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Do</h2>

<p>&nbsp;&nbsp;&nbsp; The code in this example is similar to the following in groovy.</p>

<pre class="brush:groovy;">
int i = 0;
do{
   i++;
   println(i);

   if(i &gt; 8){
      break;
   }
}while(i &lt; 10);</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=DoDemo
  @/@Groovy
  sname=Groovy
  stype=thingDemo
  spath=xworker.example.thing.actions.GroovyActionDemo
  sgroup=dynamicModel.-990|Actions.commonactions.script
  sicon=icons/application.png
  sth_sortWeight=-100
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Groovy</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Groovy动作是XWorker中最常用的脚本类动作。</p>

<p>&nbsp;&nbsp;&nbsp; Groovy脚本会先编译成类然后再加载运行。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 在Android下Groovy脚本不能使用，可以考虑使用BeanShell脚本。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Groovy</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Groovy actions are the most commonly used script actions in xworker.</p>

<p>&nbsp;&nbsp;&nbsp; Groovy scripts are compiled into classes before they are loaded and run.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Groovy script cannot be used under Android. Consider using bean shell script.</p>
#$@text#$@
  sth_mark=false
  sid=Groovy
  @/@JavaScript
  sname=JavaScript
  stype=thingDemo
  spath=xworker.example.thing.actions.JdkScriptDemo
  sgroup=dynamicModel.-990|Actions.commonactions.script
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>JdkScript</h2>

<p>&nbsp;&nbsp;&nbsp; 调用JDK内置的Script引擎。如要使用其它脚本语言，需要自行拷贝相关的类库到XWorker的lib目录下。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>JdkScript</h2>

<p>&nbsp;&nbsp;&nbsp; Call JDK&#39;s built-in script engine. If you want to use other scripting languages, you need to copy the relevant class library to the Lib directory of xworker.</p>
#$@text#$@
  sth_mark=false
  sid=JavaScript
  @/@Behavior
  sname=Behavior
  stype=thingDemo
  spath=xworker.example.thing.actions.ActionBase
  sgroup=dynamicModel.-990|Actions.util.object
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>对象的行为</h2>

<p>&nbsp;&nbsp;&nbsp; 动作模型可以用于实现对象的行为。</p>

<h3>self变量</h3>

<p>&nbsp;&nbsp;&nbsp; 当动作作为对象的行为时，对象模型本身会以self变量传入，self相当于Java的this变量。</p>

<p>&nbsp;&nbsp;&nbsp; 在当前示例里，直接执行helloJava和helloGroovy动作会报self变量不存在的异常。选择根节点ActionBase，然后再选择它的行为helloJava或helloGroovy则会执行正常。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Behavior of objects</h2>

<p>&nbsp;&nbsp;&nbsp; Action models can be used to implement the behavior of objects.</p>

<h3>Self variable</h3>

<p>&nbsp;&nbsp;&nbsp; When an action is the behavior of an object, the object model itself is passed in as a self variable, which is equivalent to Java&#39;s this variable.</p>

<p>&nbsp;&nbsp;&nbsp; In the current example, directly executing the hellojava and hellogogroovy actions will report an exception that the self variable does not exist. Select the root node actionbase, and then select its behavior hellojava or hellogogroovy to execute normally.</p>
#$@text#$@
  sth_mark=false
  sid=Behavior
  @/@Overwrite
  sname=Overwrite
  stype=thingDemo
  spath=xworker.example.thing.actions.InheritInstance
  sgroup=dynamicModel.-990|Actions.util.object
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>行为的重写</h2>

<p>&nbsp;&nbsp;&nbsp; 在动态模型里对象可以重写类的方法，方法是对象重新编写要重写的方法。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Rewriting of behavior</h2>

<p>&nbsp;&nbsp;&nbsp; In the dynamic model, an object needs to rewrite a method, which can be defined directly.</p>
#$@text#$@
  sth_mark=false
  sid=Overwrite
  @/@BeanShell
  sname=BeanShell
  stype=thingDemo
  spath=xworker.example.action._actions.code.BeanShellExample/@BeanShellExample
  sgroup=dynamicModel.-990|Actions.commonactions.script
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>BeanShell</h2>

<p>&nbsp;&nbsp;&nbsp; BeanShell的性能比Groovy低，但好处是可以在Android下运行，因为无需编译成Class。</p>

<p><a href="http://www.beanshell.org/">http://www.beanshell.org</a></p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>BeanShell</h2>

<p>&nbsp;&nbsp;&nbsp; The performance of bean shell is lower than that of groovy, but the advantage is that it can be run under Android, because it does not need to be compiled into class.</p>

<p><a href="http://www.beanshell.org/">http://www.beanshell.org</a></p>
#$@text#$@
  sth_mark=false
  sid=BeanShell
  @/@Scals
  sname=Scala
  stype=thingDemo
  spath=xworker.example.action._actions.code.BeanShellExample/@ScalaExample
  sgroup=dynamicModel.-990|Actions.commonactions.script
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Scala</h2>

<p>&nbsp;&nbsp;&nbsp; 在XWorker里也可以使用Scala作为动作，需要自行安装Scala。</p>

<p>&nbsp;&nbsp;&nbsp; Scala在这里被当作Java来使用，并不是纯粹的脚本，是编译成类然后调用的。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Scala</h2>

<p>&nbsp;&nbsp;&nbsp; Scala can also be used as an action in xworker. You need to install Scala yourself.</p>

<p>&nbsp;&nbsp;&nbsp; Scala is used here as Java. It is not a pure script. It is compiled into classes and then called.</p>
#$@text#$@
  sth_mark=false
  sid=Scals
  @/@Inner Actions
  sname=Inner Actions
  slabel=使用其它动作
  stype=thingDemo
  spath=xworker.example.action._actions.code.CodeExamples/@DefineActionExample
  sgroup=dynamicModel.-990|Actions.commonactions.script
  sgroupDescriptor=false
  sicon=icons/application.png
  sth_sortWeight=60
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h1>使用其它动作</h1>

<p>&nbsp;&nbsp;&nbsp; 在脚本可能会调用其它动作，可以通过ActionDefined子节点来实现。</p>

<p>&nbsp;&nbsp;&nbsp; 比如本示例是一个Groovy动作模型，在Groovy代码里需要调用生成消息摘要的动作，分别生成sha1和md5摘要，此时可以在ActionDefined节点下定义。</p>

<p>&nbsp;</p>
#$@text#$@
  sen_label=Use other actions
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_noThingRegistViewer=false
  sth_fileMonitor=false
  sth_deprecated=false
  Sen_description=
#$@text#$@
<h2>Internal action</h2>

<p>&nbsp;&nbsp;&nbsp; The action&#39;s child node ActionDefined declares the internal action, which is visible to the current action and its child nodes.</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sth_registQueryOnlySelf=false
  sid=Inner Actions
  @/@Code Assist
  sname=Code Assist
  slabel=变量描述
  stype=thingDemo
  spath=xworker.example.action._actions.code.CodeExamples/@CodeAssist
  sgroup=dynamicModel.-990|Actions.codeassit
  sgroupDescriptor=false
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h1>变量描述</h1>

<h2>1.变量描述</h2>

<p>&nbsp;&nbsp;&nbsp; 可以在任何一个模型节点下添加变量描述（VariablesDescs)，变量描述定义在MetaThing下，用于描述有哪些变量。</p>

<p>&nbsp;&nbsp;&nbsp; 如当前的示例描述了一个thing变量，在Groovy动作的代码里输入&quot;thing.&quot;，那么会弹出该变量的属性和方法。</p>

<p>&nbsp;&nbsp;&nbsp; 如何设置变量描述，见变量描述模型的文档。</p>

<h2>3.注意事项</h2>

<p>&nbsp;&nbsp;&nbsp; 变量描述只描述变量，起到代码辅助的作用，并不代表该变量是真实存在的。</p>

<p>&nbsp;</p>
#$@text#$@
  sen_label=Variable description
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_noThingRegistViewer=false
  sth_fileMonitor=false
  sth_deprecated=false
  Sen_description=
#$@text#$@
<h2>Code Assistant</h2>

<p>&nbsp;&nbsp;&nbsp; Xworker provides a simple code assist.</p>

<ul>
	<li><strong>Alt&nbsp;+ H</strong><br />
	A selection box will pop up, listing all known variables as well as the word segmentation list for the current text.<br />
	&nbsp;</li>
	<li><strong>Alt&nbsp;+ P</strong>&nbsp;&nbsp;or &nbsp;<strong>T</strong><br />
	he window to import the class pops up.</li>
</ul>

<p>&nbsp;&nbsp; &nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sth_registQueryOnlySelf=false
  sid=Code Assist
  @/@CreateObject
  sname=CreateObject
  stype=thingDemo
  spath=xworker.example.action._actions.java.JavaActionsExamples/@CreateObjectExample
  sgroup=dynamicModel.-990|Actions.util.java
  sgroupDescriptor=false
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>创建对象</h2>

<p>&nbsp;&nbsp;&nbsp; 指定Java类，实例化一个Java对象的例子。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Create Object</h2>

<p>&nbsp;&nbsp;&nbsp; Specify a Java class and instantiate&nbsp; a Java object.</p>
#$@text#$@
  sth_mark=false
  sid=CreateObject
  @/@With
  sname=With
  stype=thingDemo
  spath=xworker.example.action._actions.statement.WithExample/@With
  sgroup=dynamicModel.-990|Actions.util.statement
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>With</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; With模型用在需要创建和释放资源的场合，用代码表示With模型大概如下。</p>

<pre class="brush:java;">
try{
     //Create resources

     //Do something
}finally{
     //Release resources
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>With</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; The with model is used in situations where resources need to be created and released. The code representation of the with model is as follows.</p>

<pre class="brush:java;">
try{
     //Create resources

     //Do something
}finally{
     //Release resources
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=With
  @/@ActionListener
  sname=ActionListener
  slabel=资源管理
  stype=thingDemo
  spath=xworker.things.p2020.p04.p15.ActionCommonsExamples/@actionListener
  sgroup=dynamicModel.-990|Actions.listener
  sgroupDescriptor=false
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h1>资源管理</h1>

<p>&nbsp;&nbsp;&nbsp; 动作监听器可以用于资源管理，在动作执行前初始化资源，在执行完成或异常后释放资源，还可以根据执行完成或异常提交或回滚。</p>

<p>&nbsp;&nbsp;&nbsp; 如本示例通过数据源获取和释放连接。</p>
#$@text#$@
  sen_label=Resource management
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_noThingRegistViewer=false
  sth_fileMonitor=false
  sth_deprecated=false
  Sen_description=
#$@text#$@
<h1>Resource management</h1>

<p>&nbsp;&nbsp;&nbsp; Action listener can be used for resource management, initializing resources before action execution, releasing resources after execution completion or exception, and submitting or rolling back according to execution completion or exception.</p>

<p>&nbsp;&nbsp;&nbsp; As in this example, the connection is obtained and released through the data source.</p>
#$@text#$@
  sth_mark=false
  sth_registQueryOnlySelf=false
  sid=ActionListener
