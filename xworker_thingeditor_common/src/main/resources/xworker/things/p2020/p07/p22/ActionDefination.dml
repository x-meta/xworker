<?xml version="1.0" encoding="utf-8"?>

<QuickContent name="ActionDefination" descriptors="xworker.content.QuickContent" label="定义动作"
     type="thingDesc" group="dynamicModel.-990|Actions.-800|definition" groupDescriptor="true"
     icon="icons/html.png" th_sortWeight="800" simpleBrowser="true" en_label="Defination"
     th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>定义动作</h1>

<h2>1.动作模型的约定</h2>

<h3>1.1.动作模型需要实现run方法</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 一个模型要能够作为动作执行，那么需要实现run方法。</p>

<h3>1.2.脚本类动作和对象类动作</h3>

<p>&nbsp;&nbsp;&nbsp; 动作一般分为脚本类动作和对象类动作。脚本类动作一般用于执行各种脚本语言，如Groovy、Jythong、Javascript等等，对象类动作自身一般是作为对象存在的。</p>

<h3>1.3.注册动作</h3>

<p>&nbsp;&nbsp;&nbsp; 新的动作可以以<strong>child</strong>的方式注册到<strong>xworker.lang.actions.Actions</strong>模型下。</p>

<h2>2.脚本类动作</h2>

<p>&nbsp;&nbsp;&nbsp; 脚本类动作也需要实现run方法，一般在run方法里执行模型里编写的代码。</p>

<h3>2.1.获取脚本模型自身的方法</h3>

<pre class="brush:as3;">
Bindings bindings = context.getScope(context.getScopesSize() - 2);		
		
Action action = null;
if(bindings.getCaller() instanceof Thing){
	Thing actionThing = (Thing) bindings.getCaller();
	action = actionThing.getAction();
	action.checkChanged();
}else{
	action = (Action) bindings.getCaller();			
}</pre>

<h3>2.2.获取和执行代码的示意代码</h3>

<pre class="brush:groovy;">
Thing actionThing = action.getThing();

String code = actionThing.getString(&quot;code&quot;);

Object reuslt = eval(code);

return result;</pre>

<h2>3.对象类动作</h2>

<p>&nbsp;&nbsp;&nbsp; 对象类动作模型本身是对象，即执行它的run方式self变量是动作模型自身。</p>

<h3>3.1.实现run方法</h3>

<p>&nbsp;&nbsp;&nbsp; 对象类的动作需要实现一个名为run的方法。在run方法可以通过self变量访问动作模型自身。</p>

<h3>3.2.继承SelfAction</h3>

<p>&nbsp;&nbsp;&nbsp; 对象类的动作一般要继承xworker.lang.actions.SelfAction模型，这样在run方法里可以通过self变量获取动作自己。</p>

<h3>3.3.通过属性和行为传参</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;动作相当于方法和函数，对象类动作可以通过自身的属性来设置参数等。</p>

<p>&nbsp;&nbsp;&nbsp; 对象类动作一般通过属性和行为一起传参数据。比如一个对象类动作需要一个名为file的参数，那么可以设置一个名为file的属性，并设置一个名为getFile的方法。其中getFile方法一般是使用分组_actions.thingaction下的动作实现的。</p>

<h3>3.4.事件和回调</h3>

<p>&nbsp;&nbsp;&nbsp; 对象类动作可以申明事件和回调的方法，用户可以实现这些方法，这些方法将在run方法里被调用。</p>

<h2>4.示例</h2>

<p>&nbsp;&nbsp;&nbsp; 示例有两个模型，分别是IteratorFileLine和IteratorFileLineJava。它们的功能是一样，用于遍按行遍历文件的内容，是分别用GroovyAction和JavaAction实现的。</p>

<h3>4.1.file属性和getFile()方法</h3>

<p>&nbsp;&nbsp;&nbsp; file属性和getFile()方法展示的是一般处理传入参数的方法。getFile()方法用于返沪需要遍历的文件。getFile()方法的默认实现是从file属性上取值，根据值返回相应的对象。如果默认的getFile()方法不能满足需要，用户也可以重写getFile()方法。</p>

<h3>4.2.doLine()</h3>

<p>&nbsp;&nbsp;&nbsp; 用于可以通过重写doLine()方法来处理遍历时文件的每一行数据。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></description>
    <en_description><![CDATA[<h1>Define action</h1>

<h2>1.Convention of action model</h2>

<h3>1.1.The action model needs to implement the run method</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; If a model can be executed as an action, it needs to implement the run method.</p>

<h3>1.2.Script and object actions</h3>

<p>&nbsp;&nbsp;&nbsp; Actions are generally divided into script actions and object actions. Script actions are generally used to execute various script languages, such as groovy, jythong, JavaScript and so on. Object class actions generally exist as objects.</p>

<h3>1.3.Register action</h3>

<p>&nbsp;&nbsp;&nbsp; New actions can be registered in <strong>child </strong>type to<strong>&nbsp;</strong> model&nbsp;<strong>xworker.lang.actions.Aactions</strong>.</p>

<h2>2.Script action</h2>

<p>&nbsp;&nbsp;&nbsp; Script actions also need to implement the run method. Generally, the code written in the model is executed in the run method.</p>

<h3>2.1.Method to get script model itself</h3>

<pre class="brush:as3;">
Bindings bindings = context.getScope(context.getScopesSize() - 2);		
		
Action action = null;
if(bindings.getCaller() instanceof Thing){
	Thing actionThing = (Thing) bindings.getCaller();
	action = actionThing.getAction();
	action.checkChanged();
}else{
	action = (Action) bindings.getCaller();			
}</pre>

<h3>2.2.Schematic code of gets and executes the&nbsp; code</h3>

<pre class="brush:groovy;">
Thing actionThing = action.getThing();

String code = actionThing.getString(&quot;code&quot;);

Object reuslt = eval(code);

return result;</pre>

<h2>3.Object action</h2>

<p>&nbsp;&nbsp;&nbsp; The object class action model itself is an object, that is, the run mode to execute it, and the self variable is the action model itself.</p>

<h3>3.1.Implementation of run method</h3>

<p>&nbsp;&nbsp;&nbsp; The&nbsp; object action needs to implement a method called run. In the run method, the action model itself can be accessed through the self variable.</p>

<h3>3.2.Extends SelfAction</h3>

<p>&nbsp; &nbsp;&nbsp;The object&nbsp;action should be inherited generally <strong>xworker.lang.actions.SelfAction</strong> model, so that the action itself can be obtained through the self variable in the run method.</p>

<h3>3.3.Passing parameters through attributes and behaviors</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Actions are equivalent to methods and functions, and object actions can set parameters through their own properties.</p>

<p>&nbsp;&nbsp;&nbsp;Object actions usually pass parameter data together through attributes and behaviors. For example, if an object class action needs a parameter named file, you can set a property named file and a method named getFile. The getFile method generally uses actions under grouping_ actions.thingaction to implement.</p>

<h3>3.4.Events and callbacks</h3>

<p>&nbsp;&nbsp;&nbsp; Object actions can declare the methods of events and callbacks. Users can implement these methods. These methods will be called in the run method.</p>

<h2>4.Example</h2>

<p>&nbsp;&nbsp;&nbsp; The example has two models, IteratorFileLine and IteratorFilelineJava. Their functions are the same, for traversing the contents of files by row, implemented with GroovyAction and JavaAction respectively.</p>

<h3>4.1.file attribute and getFile() method</h3>

<p>&nbsp;&nbsp;&nbsp; The file property and the getFile () method show the general methods for handling incoming parameters. The getFile () method is used to traverse the file. The default implementation of getFile () method is to take a value from the file attribute and return the corresponding object according to the value. If the default getFile () method does not meet the needs, users can also override the getFile () method.</p>

<h3>4.2.doLine()</h3>

<p>&nbsp;&nbsp;&nbsp;It is used to process every line of data in the file when traversing by rewriting the doLine() method.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></en_description>
</QuickContent>