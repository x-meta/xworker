<?xml version='1.0' encoding='utf-8'?>

<QuickContent name="DynamicPrinciple" descriptors="xworker.content.QuickContent" label="动态模型的原理"
     type="thingDesc" group="dynamicModel" icon="icons/html.png" th_sortWeight="200" simpleBrowser="true"
     en_label="Principles of dynamic models" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">&#xd;
    <description><![CDATA[<h1>动态模型原理</h1>

<h2>1.概要</h2>

<p>&nbsp; &nbsp; 动态模型使用结构化的数据编程，它有两个核心问题。</p>

<ol>
	<li><strong>如何用数据表示各种东西</strong><br />
	动态模型采用的是面向对象的方法。<br />
	&nbsp;</li>
	<li><strong>如何让数据变成可执行的程序</strong><br />
	动态模型采取的是迭代解释执行的方法。</li>
</ol>

<h2>2.面向对象</h2>

<h3>2.1.基本思想</h3>

<p>&nbsp; &nbsp; 想要把数据解释成对象，我们可以根据需要赋予数据不同的角色。</p>

<h3>2.2.模型和事物</h3>

<p>&nbsp; &nbsp; 动态模型首先假设数据能够表示各种东西，所以此时我们用事物（Thing)和模型来称呼它。事物是指数据所表示的东西，模型是指数据本身。</p>

<p>&nbsp; &nbsp; 在动态模型里数据是树形结构的，动态模型把每一个树节点都当作独立的模型，而一个树节点和可以包含属性和子节点，因此一个模型就是由属性和子节点（子模型）组成的了。</p>

<h3>2.3.动作</h3>

<p>&nbsp; &nbsp; 因为我们最终要实现用数据编程，即最后数据要能当程序来运行，为了这个目标我们可以先假设任何数据都是可执行的。此时我们把数据称为动作，同样的任何模型和事物都可以转化为动作。</p>

<p>&nbsp;&nbsp;&nbsp; 实际实现里，动作相当于方法和函数。</p>

<h3>2.4.对象</h3>

<p>&nbsp; &nbsp; 由于一个模型可以含有属性和子模型（2.2的定义），而任何模型都可以执行（2.3的假设），因此可以把一个模型的某些子节点当成它的行为，从而可以把一个模型看作是对象。</p>

<p>&nbsp; &nbsp; 动作相当于方法和函数，当一个动作属于某个对象，并且对象可以调用该动作的时候，这个动作可以看作是对象的行为。</p>

<h3>2.5.描述者</h3>

<p>&nbsp; &nbsp; 描述者是用于描述模型的模型，描述者也可以看作是模型的类，用于描述模型的结构和行为。在动态模型里，一个模型的描述者可以是任意模型，并且模型继承描述者的行为。</p>

<h3>2.6.继承</h3>

<p>&nbsp; &nbsp; 在动态模型里，一个模型可以继承除了自身之外的其它任意模型，从而继承被继承模型的行为。</p>

<h3>2.7.面向对象</h3>

<p>&nbsp; &nbsp; 以上，实际上就实现了面向对象的方法。</p>

<h2>3.动态模型的实现</h2>

<p>&nbsp; &nbsp; 实现动态模型编程的核心是如何解释执行一个模型的方法。</p>

<ol>
	<li>在上面的2.2.中假设了任意模型都可以转化为动作来执行。具体的执行方法是把模型作为对象，去执行对象的为run的方法。</li>
	<li>模型的run方法还是模型（见2.4，使用模型的子节点来定义模型的行为），因此执行run方法回到步骤1.</li>
	<li>以上是一个递归的方法，如要让递归能够终止，那么一些模型是由引擎直接执行的。</li>
</ol>

<p>&nbsp; &nbsp; 以上是如何执行一个模型的方法。比如XWorker的动态模型引擎是使用Java实现的，模型名为JavaAction的模型是由引擎直接执行的，即执行JavaAction并不需要执行它的run方法，而是由引擎直接解释执行。</p>

<pre class="brush:xml;">
&lt;JavaAction name=&quot;run&quot; useOuterJava=&quot;true&quot; outerClassName=&quot;test.HelloWorld&quot; methodName=&quot;run&quot;/&gt;</pre>

<p>&nbsp; &nbsp; 比如上面的模型（XML）执行时并不需要执行它的run方法，它是由引擎直接执行的，引擎会根据它的属性定义执行Java类test.HelloWorld的run()方法。</p>]]></description>&#xd;
    <en_description><![CDATA[<h1>Principle of dynamic model</h1>

<h2>1. Summary</h2>

<p>&nbsp; &nbsp; The dynamic model uses structured data programming, which has two core problems. </p>

<ol>
<li><strong>How to use data to represent various things</strong><br />
The dynamic model uses an object-oriented approach. <br />
&nbsp;</li>
<li><strong>How to make data an executable program</strong><br />
The dynamic model adopts the method of iterative interpretation and execution. </li>
</ol>

<h2>2. Object-oriented</h2>

<h3>2.1. Basic Ideas</h3>

<p>&nbsp; &nbsp; To interpret data as objects, we can assign different roles to the data as needed. </p>

<h3>2.2. Models and things</h3>

<p>&nbsp; &nbsp; The dynamic model first assumes that the data can represent various things, so at this time we call it things (Thing) and models. Things refer to what the data represents, and models refer to the data itself. </p>

<p>&nbsp; &nbsp; In the dynamic model, the data is in a tree structure. The dynamic model treats each tree node as an independent model, and a tree node can contain attributes and sub-nodes. Therefore, a model is composed of attributes and sub-nodes. Nodes (sub-models) are made up. </p>

<h3>2.3. Action</h3>

<p>&nbsp; &nbsp; Because we finally want to realize programming with data, that is, the final data must be able to run as a program. For this goal, we can first assume that any data is executable. At this time, we call data an action, and any model or thing can be transformed into an action. </p>

<p>&nbsp;&nbsp;&nbsp; In actual implementation, actions are equivalent to methods and functions. </p>

<h3>2.4. Object</h3>

<p>&nbsp; &nbsp; Since a model can contain attributes and sub-models (the definition of 2.2), and any model can be executed (the assumption of 2.3), some child nodes of a model can be regarded as its behavior, which can Think of a model as an object. </p>

<p>&nbsp; &nbsp; Actions are equivalent to methods and functions. When an action belongs to an object and the object can call the action, the action can be regarded as the behavior of the object. </p>

<h3>2.5. Descriptor</h3>

<p>&nbsp; &nbsp; The descriptor is a model used to describe the model, and the descriptor can also be regarded as a class of the model, used to describe the structure and behavior of the model. In a dynamic model, the descriptor of a model can be any model, and the model inherits the behavior of the descriptor. </p>

<h3>2.6. Inheritance</h3>

<p>&nbsp; &nbsp; In a dynamic model, a model can inherit any model other than itself, thereby inheriting the behavior of the inherited model. </p>

<h3>2.7. Object-oriented</h3>

<p>&nbsp; &nbsp; Above, the object-oriented method is actually implemented. </p>

<h2>3. Realization of dynamic model</h2>

<p>&nbsp; &nbsp; The core of implementing dynamic model programming is how to interpret and execute a model. </p>

<ol>
<li>In 2.2. above, it is assumed that any model can be transformed into actions for execution. The specific execution method is to use the model as an object, and to execute the object is the run method. </li>
<li>The run method of the model is still the model (see 2.4, Use the child nodes of the model to define the behavior of the model), so execute the run method and return to step 1.</li>
<li>The above is a recursive method. If the recursion is to be terminated, some models are directly executed by the engine. </li>
</ol>

<p>&nbsp; &nbsp; The above is how to execute a model. For example, the dynamic model engine of XWorker is implemented in Java, and the model named JavaAction is directly executed by the engine, that is, the execution of JavaAction does not need to execute its run method, but is directly interpreted and executed by the engine. </p>

<pre class="brush:xml;">
&lt;JavaAction name=&quot;run&quot; useOuterJava=&quot;true&quot; outerClassName=&quot;test.HelloWorld&quot; methodName=&quot;run&quot;/&gt;</pre>

<p>&nbsp; &nbsp; For example, the above model (XML) does not need to execute its run method when it is executed. It is executed directly by the engine, and the engine will execute the run() of the Java class test.HelloWorld according to its attribute definition. method. </p>]]></en_description>&#xd;
</QuickContent>