<?xml version='1.0' encoding='utf-8'?>

<QuickContent name="DataObjectSkills" descriptors="xworker.content.QuickContent" label="数据对象使用技巧"
     type="thingDesc" group="xworker.dataobject" icon="icons/html.png" th_sortWeight="-10000"
     simpleBrowser="true" hideOutline="true" en_label="Tips for using data objects" th_createIndex="true"
     th_registThing="child|xworker.example.ExamplesIndex">&#xd;
    <description><![CDATA[<h1>数据对象使用技巧</h1>

<h2>1.数据对象示例</h2>

<p>&nbsp;&nbsp;&nbsp; 数据对象的示例大多在界面那边，比如<a href="javascript:invoke('action:xworker.swt.xworker.prototype.ThingRegistSelector/@actions/@utilBrowserSelectThing?thing=xworker.swtshare.p2020.p07.p11.DataObjectIntroduce')">SWT</a>。</p>

<h2>2.自定义数据对象</h2>

<p>&nbsp;&nbsp;&nbsp; 一个数据对象并不需要实现全部的方法，可以根据应用场合实现相应的方法。比如在表单界面里可能就不需要数据对象的任何方法，在只读的表格里可能只需要数据对象实现doQuery()方法。</p>

<p>&nbsp;&nbsp;&nbsp; 因此如果现有的数据对象不能满足需要，可以随时重写相关方法，或使用AbstractDataObject编写自己的数据对象。</p>

<h2>3.使用事件监听处理数据</h2>

<p>&nbsp;&nbsp;&nbsp; 数据对象支持autoInit、afterCreated、onLoaded、beforeUpdate、afterUpdate、beforeDelete、afterDeleted、beforeQuery和afterQueryed等事件。要使用这些事件，首先编辑数据对象时打开相关属性，其次是实现相应名字的动作，当事件发生时，就会调用对应名字的动作。</p>

<p>&nbsp;&nbsp;&nbsp; 比如在插入数据之前需要修改数据对象，那么可以实现autoInit方法。比如在查询之后对查询结果做处理，那么可以实现afterQueryed方法。</p>

<h2>4.QueryFormDataObject和Condition</h2>

<p>&nbsp;&nbsp;&nbsp; 查询表单数据对象和查询条件。虽然是可选的，但建议设置。设置后一般就可以直接生成增删改查的界面，可以通过菜单直接编辑数据了。</p>

<h2>5.界面相关</h2>

<p>&nbsp;&nbsp;&nbsp; 以下对象一般都提供了绑定界面控件的方法，绑定后当对象的值发生变化后界面也可以及时发生变化。比如当数据对象列表增加了一条记录后，表格也会自动增加一行。当一个数据对象的值发生变化后，表单或表格中对应的行的值也会自动更新。</p>

<h3>5.1.DataStore（数据仓库）</h3>

<p>&nbsp;&nbsp;&nbsp; DataStore一般含有数据对象、查询条件的配置、查询条件的值、当前查询结果，当前分页信息等等。</p>

<p>&nbsp;&nbsp;&nbsp; 在界面里一般通过DataStore绑定数据对象。比如表格(Table)是togn过DataStore绑定数据对象的，数据的分页等也通过DataStore实现的。</p>

<h3>5.2.数据对象监听器</h3>

<p>&nbsp;&nbsp;&nbsp; 可以为数据对象添加监听器，这样数据对象修改后，可以通过监听器修改界面。</p>

<p>&nbsp;&nbsp;&nbsp; 比如一个界面的标签显示的是数据对象中名字属性的值，可以在监听器中监听数据对象修改的事件，从而即时更新界面标签的值。</p>

<h3>5.3.DataObjectList</h3>

<p>&nbsp;&nbsp;&nbsp; 是一个List&lt;DataObject&gt;，同样提供了监听器，可以监听修改事件。</p>

<h3>5.4.表单</h3>

<p>&nbsp;&nbsp;&nbsp; 数据对象生成表单的方法和通过模型生成表单的方法是基本相同的方法，二者基本是通用的。</p>

<p>&nbsp;&nbsp;&nbsp; 表单相关的设置主要是在属性(attribute)模型里设置，编辑属性时可以查看<strong>Editor</strong>标签页。</p>

<h3>5.5.表格</h3>

<p>&nbsp;&nbsp;&nbsp; 数据对象以及其属性的模型编辑界面里，<strong>GridView</strong>标签页是和表格相关的属性。如是否可以编辑、分页信息和列的宽度等等信息。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>]]></description>&#xd;
    <en_description><![CDATA[<h1>Tips for using data objects</h1>

<h2>1. Data object example</h2>

<p>&nbsp;&nbsp;&nbsp; Most examples of data objects are on the interface side, such as <a href="javascript:invoke('action:xworker.swt.xworker.prototype.ThingRegistSelector/@actions/@utilBrowserSelectThing?thing= xworker.swtshare.p2020.p07.p11.DataObjectIntroduce')">SWT</a>. </p>

<h2>2. Custom data objects</h2>

<p>&nbsp;&nbsp;&nbsp; A data object does not need to implement all methods, and can implement corresponding methods according to the application. For example, you may not need any method of the data object in the form interface, and may only need the data object to implement the doQuery() method in the read-only form. </p>

<p>&nbsp;&nbsp;&nbsp; Therefore, if the existing data object cannot meet your needs, you can rewrite the relevant methods at any time, or use AbstractDataObject to write your own data object. </p>

<h2>3. Use event monitoring to process data</h2>

<p>&nbsp;&nbsp;&nbsp; The data object supports events such as autoInit, afterCreated, onLoaded, beforeUpdate, afterUpdate, beforeDelete, afterDeleted, beforeQuery, and afterQueryed. To use these events, first open the relevant properties when editing the data object, and then implement the action with the corresponding name. When the event occurs, the action with the corresponding name will be called. </p>

<p>&nbsp;&nbsp;&nbsp; For example, you need to modify the data object before inserting data, then you can implement the autoInit method. For example, to process the query results after the query, you can implement the afterQueryed method. </p>

<h2>4.QueryFormDataObject and Condition</h2>

<p>&nbsp;&nbsp;&nbsp; Query form data objects and query conditions. Although it is optional, it is recommended. After setting, it is generally possible to directly generate an interface for adding, deleting, modifying and checking, and you can directly edit the data through the menu. </p>

<h2>5. Interface related</h2>

<p>&nbsp;&nbsp;&nbsp; The following objects generally provide methods for binding interface controls. After binding, the interface can also change in time when the value of the object changes. For example, when a record is added to the data object list, the table will automatically add a row. When the value of a data object changes, the value of the corresponding row in the form or table will also be automatically updated. </p>

<h3>5.1.DataStore (data warehouse)</h3>

<p>&nbsp;&nbsp;&nbsp; DataStore generally contains data objects, configuration of query conditions, values ​​of query conditions, current query results, current paging information, and so on. </p>

<p>&nbsp;&nbsp;&nbsp; In the interface, data objects are generally bound through DataStore. For example, the table (Table) is togn bind the data object through the DataStore, and the data paging is also realized through the DataStore. </p>

<h3>5.2. Data Object Listener</h3>

<p>&nbsp;&nbsp;&nbsp; You can add a listener to the data object, so that after the data object is modified, you can modify the interface through the listener. </p>

<p>&nbsp;&nbsp;&nbsp; For example, the label of an interface displays the value of the name attribute in the data object, and you can listen to the event of data object modification in the listener, thereby instantly updating the value of the interface label. </p>

<h3>5.3.DataObjectList</h3>

<p>&nbsp;&nbsp;&nbsp; is a List&lt;DataObject&gt;, and a listener is also provided to monitor modification events. </p>

<h3>5.4. Form</h3>

<p>&nbsp;&nbsp;&nbsp; The method of generating a form from a data object and the method of generating a form through a model are basically the same, and the two are basically common. </p>

<p>&nbsp;&nbsp;&nbsp; Form-related settings are mainly set in the attribute model. You can view the <strong>Editor</strong> tab when editing attributes. </p>

<h3>5.5. Form</h3>

<p>&nbsp;&nbsp;&nbsp; In the model editing interface of the data object and its attributes, the <strong>GridView</strong> tab is the attributes related to the table. Such as whether it can be edited, paging information and column width and so on. </p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>]]></en_description>&#xd;
</QuickContent>