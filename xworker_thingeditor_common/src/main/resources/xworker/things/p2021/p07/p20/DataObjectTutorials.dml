<?xml version='1.0' encoding='utf-8'?>

<QuickContent name="DataObjectTutorials" descriptors="xworker.content.QuickContent" label="dataobject"
     type="swtGuide" group="xworker.dataobject" groupDescriptor="true" icon="icons/application.png"
     th_sortWeight="-8000" hideOutline="true" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">&#xd;
    <description><![CDATA[<h1>数据对象教程</h1>

<p>&nbsp;&nbsp;&nbsp; 介绍数据对象的基本知识。</p>]]></description>&#xd;
    <en_description><![CDATA[<h1>Data Object Tutorial</h1>

<p>&nbsp;&nbsp;&nbsp; Introduce the basic knowledge of data objects. </p>]]></en_description>&#xd;
    <SwtGuide showHeader="true">&#xd;
        <SimpleBrowser name="introduce" _xmeta_id_="SimpleBrowser" label="数据对象简介" en_label="Introduction to Data Objects">&#xd;
            <description><![CDATA[<p>&nbsp;&nbsp;&nbsp; 本教程介绍数据对象的基本知识，通过本教程能够对数据对象有一个基本了解。</p>

<p>&nbsp;&nbsp;&nbsp; 数据对象（DataObject)是一个基于关系模型的二维表数据框架。它有下面几个主要特点。</p>

<ul>
	<li><strong>统一API</strong><br />
	数据库、CSV和Excel等等都使用统一的增删改查的API，相互之间也可以关联，用户也可以很容易的实现自己数据对象。<br />
	&nbsp;</li>
	<li><strong>数据管理界面</strong><br />
	可以用数据对象快速编写和数据相关的各种界面，如表单、表格、数据的增删改查界面和图表等等。</li>
</ul>

<p>&nbsp;&nbsp; 点击<strong>下一步</strong>按钮进一步了解数据对象。</p>]]></description>&#xd;
            <en_description><![CDATA[<p>&nbsp;&nbsp;&nbsp; This tutorial introduces the basic knowledge of data objects. Through this tutorial, you can have a basic understanding of data objects. </p>

<p>&nbsp;&nbsp;&nbsp; DataObject is a two-dimensional table data frame based on a relational model. It has the following main features. </p>

<ul>
<li><strong>Unified API</strong><br />
Databases, CSVs, Excel, etc. all use a unified API for adding, deleting, modifying and checking, and they can also be associated with each other, and users can easily implement their own data objects. <br />
&nbsp;</li>
<li><strong>Data management interface</strong><br />
Data objects can be used to quickly compile various interfaces related to data, such as forms, tables, data addition, deletion, modification, and query interfaces, charts, and so on. </li>
</ul>

<p>&nbsp;&nbsp; Click the <strong>Next</strong> button to learn more about the data object. </p>]]></en_description>&#xd;
            <Buttons>&#xd;
                <NextButton name="nextButton"/>&#xd;
            </Buttons>&#xd;
        </SimpleBrowser>&#xd;
        <BrowserComposite name="createDataObject" label="创建数据对象" browserLocation="top" description="&lt;p>数据对象有很多种，可以根据需要选择创建。&lt;/p>"
             en_label="Create DataObject" en_description="&lt;p>There are many kinds of data objects, and you can choose to create them according to your needs. &lt;/p>">&#xd;
            <Composite>&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <ThingRegistor name="thingRegist" thing="xworker.dataObject.DataObjects" registType="child"
                     showContent="true" contentDisplayType="Composite" contentDefaultOpenMethod="thingDesc"
                     autoLoad="true"/>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <PreButton name="nextButton"/>&#xd;
                <NextButton name="nextButton" _xmeta_id_="nextButton1"/>&#xd;
            </Buttons>&#xd;
        </BrowserComposite>&#xd;
        <BrowserComposite name="editDataObject" label="编辑数据对象" browserLocation="top" en_label="Edit data object">&#xd;
            <description><![CDATA[<p>数据对象相当于数据的映射。这里简单介绍各种数据对象都有的配置，其它可以参看具体的数据对象。</p>

<ul>
	<li><strong>属性(attribute)</strong><br />
	一个数据对象至少要有一个属性。属性是用来映射字段的。如要实现增删改，那么只要要有一个主键字段。由于界面控件的需要，通常最好只有一个主键字段。</li>
	<li><strong>QueryFormDataObject(可选）</strong><br />
	查询表单的定义。也是使用数据对象编写的，任意数据对象都可以，只是用于生成表单。</li>
	<li><strong>Condition（可选）</strong><br />
	查询、批量更新和批量删除时会用到。用于生成查询的条件语句，或用来判断一个Java对象是否符合条件等。</li>
</ul>

<p>下面的数据对象模型是一个数据库数据对象的例子。</p>]]></description>&#xd;
            <en_description><![CDATA[<p>Data objects are equivalent to data mapping. Here is a brief introduction to the configuration of various data objects, and you can refer to specific data objects for others. </p>

<ul>
<li><strong>Attributes</strong><br />
A data object must have at least one attribute. Attributes are used to map fields. If you want to add, delete, and modify, you only need to have a primary key field. Due to the needs of interface controls, it is usually best to have only one primary key field. </li>
<li><strong>QueryFormDataObject(optional)</strong><br />
Query the definition of the form. It is also written using data objects. Any data object can be used, but it is used to generate forms. </li>
<li><strong>Condition (optional)</strong><br />
It will be used for query, batch update and batch delete. Used to generate conditional statements for queries, or to determine whether a Java object meets conditions, etc. </li>
</ul>

<p>The data object model below is an example of a database data object. </p>]]></en_description>&#xd;
            <Composite>&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <ThingEditor name="ThingEditor" thingPath="xworker.app.monitor.dataobjects.MonitorData"/>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <PreButton name="nextButton"/>&#xd;
                <NextButton name="nextButton" _xmeta_id_="nextButton1"/>&#xd;
            </Buttons>&#xd;
        </BrowserComposite>&#xd;
        <BrowserComposite name="dataObjectUI" label="数据对象和界面" browserLocation="top" en_label="Data objects and interfaces">&#xd;
            <description><![CDATA[<p>数据对象一般用于界面中，通过数据对象可以快速生成各种界面。如下面的列子。</p>

<ul>
	<li><strong>表单</strong><br />
	通过数据对象可以快速生成各种表单。可以设置表单的校验等。</li>
	<li><strong>表格</strong><br />
	数据对象可以通过数据仓库（DataStore)绑定到表格等控件上，可以实现在表格中列出和编辑数据，也可以绑定到分页控件上实现分页。</li>
	<li><strong>图表</strong><br />
	利用数据对象的数据展示图表，一般也是使用数据仓库（DataStore)绑定。</li>
	<li><strong>编辑器</strong><br />
	有多种编辑器控件。比如常用的增删改查的数据对象编辑器。</li>
	<li><strong>其它</strong><br />
	其它各种和数据对象相关的界面控件。下面列举了DataObjectContainer控件。</li>
</ul>]]></description>&#xd;
            <en_description><![CDATA[<p>Data objects are generally used in interfaces, and various interfaces can be quickly generated through data objects. Such as the following Liezi. </p>

<ul>
<li><strong>Form</strong><br />
Various forms can be quickly generated through data objects. You can set up the validation of the form. </li>
<li><strong>Form</strong><br />
Data objects can be bound to controls such as tables through the data store (DataStore), can list and edit data in the table, or can be bound to paging controls to implement paging. </li>
<li><strong>Chart</strong><br />
Use the data of the data object to display the chart, generally using the data warehouse (DataStore) binding. </li>
<li><strong>Editor</strong><br />
There are multiple editor controls. For example, the commonly used data object editor for adding, deleting, modifying and checking. </li>
<li><strong>Other</strong><br />
Various other interface controls related to data objects. Listed below are the DataObjectContainer controls. </li>
</ul>]]></en_description>&#xd;
            <Composite>&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <CTabFolder name="mainTabFolder">&#xd;
                    <CTabItem name="formTabItem" text="lang:d=表单&amp;en=Form" delayReload="true">&#xd;
                        <DemoSWT name="formDemo" composite="xworker.example.swt.xworker.dataobject.DataObjectForm/@group"/>&#xd;
                    </CTabItem>&#xd;
                    <CTabItem name="tableTableItem" text="lang:d=表格&amp;en=Table" delayReload="true">&#xd;
                        <DemoSWT name="tableDemo" composite="xworker.example.swt.xworker.dataobject.PagingToolBar/@group"/>&#xd;
                    </CTabItem>&#xd;
                    <CTabItem name="chartTabItem" text="lang:d=图表&amp;en=Chart" delayReload="true">&#xd;
                        <DemoSWT name="chartDemo" composite="xworker.things.p2019.p07.p23.ECharts/@Composite"/>&#xd;
                    </CTabItem>&#xd;
                    <CTabItem name="editorTabItem" text="lang:d=数据编辑器&amp;en=DataObjectEditor"
                         delayReload="true">&#xd;
                        <DemoSWT name="editorDemo" composite="xworker.example.swt.xworker.dataobject.DataObjectEditCompoiste/@group"/>&#xd;
                    </CTabItem>&#xd;
                    <CTabItem name="otherItem" text="lang:d=其它&amp;en=Other" delayReload="true">&#xd;
                        <DemoSWT name="otherDemo" composite="xworker.example.things.p2019.p07.p22.DataObjectContainer/@Composite"/>&#xd;
                    </CTabItem>&#xd;
                </CTabFolder>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <PreButton name="nextButton"/>&#xd;
                <NextButton name="nextButton" _xmeta_id_="nextButton1"/>&#xd;
            </Buttons>&#xd;
        </BrowserComposite>&#xd;
        <SimpleBrowser name="code" label="在代码中使用数据对象" en_label="Use data objects in code">&#xd;
            <description><![CDATA[<p>可以在代码中使用数据对象，如下面的示例。</p>

<pre class="brush:groovy;">
import org.xmeta.ActionContext;
import xworker.dataObject.DataObject;

//数据对象的各种操作一般需要一个动作上下文
def ac = new ActionContext();

//创建数据对象，需要指定数据对象的模型
DataObject dataObject = new DataObject(&quot;xworker.app.monitor.dataobjects.MonitorData&quot;);

//脏数据，数据对象是一个Map，当执行put()时会把put的值作为脏数据
//在创建和更新数据时，一般只会插入和更新脏数据
data.put(&quot;name&quot;, &quot;test&quot;);

//创建数据，如插入数据到数据库，通过返回值是否为null判断创建成功。自增长的主键等此时也会赋值。
dataObject = dataObject.create(ac);

//根据主键更新数据，返回更新的数量
int updatedCount  = dataObject.update(ac);

//根据主键删除数据，返回删除的数量
int deletedCount = dataObject.delete(ac);
</pre>

<p>&nbsp;</p>]]></description>&#xd;
            <en_description><![CDATA[<p>You can use data objects in your code, as shown in the example below. </p>

<pre class="brush:groovy;">
import org.xmeta.ActionContext;
import xworker.dataObject.DataObject;

//Various operations of data objects generally require an action context
def ac = new ActionContext();

//To create a data object, you need to specify the model of the data object
DataObject dataObject = new DataObject(&quot;xworker.app.monitor.dataobjects.MonitorData&quot;);

//Dirty data, the data object is a Map, when put () is executed, the value of put will be regarded as dirty data
//When creating and updating data, generally only insert and update dirty data
data.put(&quot;name&quot;, &quot;test&quot;);

//Create data, such as inserting data into the database, judge whether the creation is successful by whether the return value is null. Self-incrementing primary keys, etc. will also be assigned at this time.
dataObject = dataObject.create(ac);

//Update the data according to the primary key and return the updated number
int updatedCount = dataObject.update(ac);

//Delete data according to the primary key and return the number of deletions
int deletedCount = dataObject.delete(ac);
</pre>

<p>&nbsp;</p>]]></en_description>&#xd;
            <Buttons>&#xd;
                <PreButton name="nextButton"/>&#xd;
                <NextButton name="nextButton" _xmeta_id_="nextButton1"/>&#xd;
            </Buttons>&#xd;
        </SimpleBrowser>&#xd;
        <SimpleBrowser name="summary" label="总结" en_label="Summary">&#xd;
            <description><![CDATA[<p>总结一下数据对象的基本知识。</p>

<ul>
	<li><strong>数据对象模型相当于数据的映射</strong><br />
	数据对象模型本身相当于数据的映射模型。<br />
	&nbsp;</li>
	<li><strong>数据对象可以应用于界面</strong><br />
	结合界面控件，可以快速生成各种和数据相关的界面。<br />
	&nbsp;</li>
	<li><strong>数据对象也可以在代码中使用</strong><br />
	也可以在在代码中调用数据对象，使用数据对象的增删改查。</li>
</ul>]]></description>&#xd;
            <en_description><![CDATA[<p>Summarize the basic knowledge of data objects. </p>

<ul>
<li><strong>Data object model is equivalent to data mapping</strong><br />
The data object model itself is equivalent to the data mapping model. <br />
&nbsp;</li>
<li><strong>Data objects can be applied to the interface</strong><br />
Combined with interface controls, you can quickly generate various data-related interfaces. <br />
&nbsp;</li>
<li><strong>Data objects can also be used in code</strong><br />
You can also call the data object in the code, and use the addition, deletion, and modification of the data object. </li>
</ul>]]></en_description>&#xd;
            <Buttons>&#xd;
                <PreButton name="nextButton"/>&#xd;
            </Buttons>&#xd;
        </SimpleBrowser>&#xd;
    </SwtGuide>&#xd;
</QuickContent>