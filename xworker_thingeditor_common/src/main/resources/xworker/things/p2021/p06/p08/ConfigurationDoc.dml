<?xml version="1.0" encoding="utf-8"?>

<QuickContent name="ConfigurationDoc" descriptors="xworker.content.QuickContent" label="配置"
     type="thingDesc" group="xworker.-1000|lang" icon="icons/html.png" th_sortWeight="70"
     simpleBrowser="true" en_label="Configuration" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>配置</h1>

<h2>1.基本概念</h2>

<p>&nbsp;&nbsp;&nbsp; 配置为不同的场合下配置不同的资源。如在开发环境和正式环境使用的数据库连接可能是不同的，通过配置可以方面的切换它们。</p>

<h3>1.1.配置(Configuration)</h3>

<p>&nbsp;&nbsp;&nbsp; 配置模型，可以包含一个或者多个Profile。</p>

<h3>1.2.Profile</h3>

<p>&nbsp;&nbsp;&nbsp; Profile是配置下面的子模型。Profile相当于环境，比如测试环境可以建一个名为test的Profile，正式部署的环境可以创建一个名为dist的Profile。</p>

<h3>1.3.资源</h3>

<p>&nbsp;&nbsp;&nbsp; Profile模型下的子模型。资源一般是使用者最终要使用的东西。比如数据源等。</p>

<h2>2.使用方法</h2>

<h3>2.1.创建配置模型</h3>

<p>&nbsp;&nbsp;&nbsp; 配置模型的描述者是<strong>xworker.lang.Configuration</strong>，使用它来编写配置模型，注意配置模型的名字固定为<strong>Configuration</strong>。</p>

<p>&nbsp;&nbsp;&nbsp; 配置模型一定要<strong>放到项目的相对根路径</strong>，比如项目的路径是com.xxx.aproject，那么配置模型就放到com.xxx.aproject下。</p>

<p>&nbsp;&nbsp;&nbsp; 配置模型不能放到子目录下的原因是寻找配置有默认规则，比如一个模型是com.xxx.aproject.test.Test，这个模型要想获得配置模型，它寻找配置模型的顺序如下：</p>

<ol>
	<li>com.xxx.aproject.test.Configuration</li>
	<li>com.xxx.aproject.Configuration</li>
	<li>com.xxx.Configuration</li>
	<li>com.Configuration</li>
	<li>Configuration</li>
</ol>

<h3>2.2.编写配置模型</h3>

<p>&nbsp;&nbsp;&nbsp;在配置模型里添加Profile子节点。给Profile起一个名字用来表示环境的名字，在Profile下添加各种资源模型，如数据库连接等。</p>

<h3>2.3.使用配置</h3>

<h4>2.3.1.设置使用哪个配置Profile</h4>

<pre class="brush:groovy;">
import xworker.lang.Configuration;

//一般在系统启动时设置，参数是Profile的名字
Configuration.setProfile(&quot;test&quot;);

//临时设置Profile的方法，只对当前线程有效
try{
    Configuration.setProfileLocal(&quot;dist&quot;);
     .....  //这里的代码里，使用dist
}finally{
     //一定要和setProfileLocal()成对出现
    Configuration.clearProfileLocal();
}</pre>

<h4>&nbsp;&nbsp;&nbsp; 设置启动的Profile一般在系统启动时设置，如main()函数里。除此之外还可以通过jvm的参数设置生效的profile，如：<strong>-Dxworker.profile=&quot;xxx&quot;</strong>。</h4>

<h4>2.3.2.在代码里获取配置的资源模型</h4>

<pre class="brush:groovy;">
import xworker.lang.Configuration;

//通过资源的名字获取，要传入包名，可能会返回null
Thing dataSource = Configuration.getConfiguration(&quot;dataSource&quot;, &quot;com.xxx.aproject&quot;, actionContext);

//通过模型来获取，同上，模型用于获取包名
Thing thing = world.getThing(&quot;com.xxx.aproject.test.Test&quot;);
Thing dataSource = Configuration.getConfiguration(&quot;dataSource&quot;, thing, actionContext);</pre>

<h4>2.3.3.在模型里使用表达式获取资源模型</h4>

<p>&nbsp;&nbsp;&nbsp; 比如在数据库数据对象模型里，可以通过表达式获取配置的数据源，如：_c_.dataSource，其中_c_.是表示获取配置的前缀，dataSource是资源的名称。</p>

<h4>2.3.4.执行配置的初始化方法</h4>

<p>&nbsp;&nbsp;&nbsp;&nbsp;第一次使用一个Profile，或者Profile模型发生变更时，会遍历Profile的子节点并执行init()方法。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></description>
</QuickContent>