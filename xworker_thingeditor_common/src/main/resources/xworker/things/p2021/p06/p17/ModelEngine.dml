<?xml version="1.0" encoding="utf-8"?>

<QuickContent name="ModelEngine" descriptors="xworker.content.QuickContent" label="动态模型引擎" type="thingDesc"
     group="dynamicModel" icon="icons/html.png" th_sortWeight="20" simpleBrowser="true"
     en_label="Dynamic Model Engine" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>动态模型引擎</h1>

<p>&nbsp;&nbsp;&nbsp; 动态模型引擎相关的一些知识。</p>

<h2>1.模型</h2>

<h3>1.1.路径</h3>

<p>&nbsp;&nbsp;&nbsp; 每一个模型都有一个唯一的路径，相同的路径的模型视为同一个模型。模型的路径规则基本同Java的包名，如org.xworker.Abc是一个合法的模型的路径。</p>

<p>&nbsp;&nbsp;&nbsp; 每一个模型下的子节点都是独立的模型，它的路径规则是父模型的路径+/@+模型的Id。如org.xworker.Abc/@achild或org.xworker.Abc/@achild/@child是子节点的路径</p>

<p>&nbsp;&nbsp;&nbsp; 注意模型的Id默认使用模型的属性name的值，也可以是没有意义的数字字符串等，只是为了和同级别的子节点做区分，同一级的模型的Id不能重复。</p>

<h3>1.2.属性</h3>

<p>&nbsp;&nbsp;&nbsp; 模型的属性可以是任意Java对象，也可以是没有定义的额外属性。但在序列化存储时，只有被定义的属性且值能序列化成字符串的才能正常保存。</p>

<p>&nbsp;&nbsp;&nbsp; 模型是面向对象的，模型的属性是由它的类模型（描述者）定义的。</p>

<h3>1.3.类和继承</h3>

<p>&nbsp;&nbsp;&nbsp; 模型可以有任意个类（描述者），一个模型也可以作为自己的描述者。一个模型也可以继承任意个其它模型（继承自己无意义）。</p>

<h3>1.4.模型的XML格式</h3>

<p>&nbsp;&nbsp;&nbsp; 模型的XML格式约定如下：</p>

<ul>
	<li><strong>descriptors属性</strong><br />
	descriptors属性的值是其类模型（描述者）的路径，如有多个使用英文逗号分割。<br />
	&nbsp;</li>
	<li><strong>extends属性</strong><br />
	extends属性的值是被继承的模型的路径，如有多个使用英文逗号分割。<br />
	&nbsp;</li>
	<li><strong>_xmeta_id_属性</strong><br />
	如果有，其属性值是模型的ID。<br />
	&nbsp;</li>
	<li><strong>&lt;xxx&gt;some text&lt;/xxx&gt;文本块</strong><br />
	XML节点中的文本快一般作为属性的值，如上面xxx节点不是作为模型，而是作为它的父节点的模型的一个属性，其中属性名是xxx，xxx属性的值是some text。</li>
</ul>

<p>&nbsp;&nbsp;&nbsp; 动态模型只用到了XML的基本功能，其它可能XML存在的功能可能并未用到。</p>

<h2>2.模型管理器</h2>

<p>&nbsp;&nbsp;&nbsp; 模型管理器有时也当作是模型的项目。它的主要功能是管理模型的存储，比如在文件里保存和读取模型的FileThingManager，在数据库中保存和读取模型的JdbcThingManager等等。</p>

<h3>2.1.默认事物管理器</h3>

<p>&nbsp;&nbsp;&nbsp; 引擎启动后默认实例化的事物管理器有下面几个。</p>

<ul>
	<li><strong>TransientThingManager</strong><br />
	保存在内存中的模型，可能会被垃圾回收。用默认的构造函数实例化的Thing对象默认保存在这里。<br />
	&nbsp;&nbsp;</li>
	<li>
	<p><strong>ClassThingManager</strong><br />
	读取在Classpath中模型，ClassThingManager管理的模型是只读的（修改后不能保存）。<br />
	&nbsp;</p>
	</li>
	<li>
	<p><strong>JarThingManager</strong><br />
	读取Classpath中的jar，创建JarThingManager。Classpath中的模型有可能会先被ClassThingManager读取。JarThingManager管理模型也是只读的（修改后不能保存）。<br />
	&nbsp;</p>
	</li>
	<li>
	<p><strong>FileThingManager</strong><br />
	引擎根目录下的projects目录下的子目录一般是FileThingManager管理。</p>
	</li>
</ul>

<h3>2.2.JdbcThingManger</h3>

<p>&nbsp;&nbsp;&nbsp; JdbcThingManger可以把模型保存到数据库中。方法是在projects/创建一个目录，在该目录下创建一个名为dml.properties的文件，文件内容如下。</p>

<pre class="brush:as3;">
name=xxx
class=org.xmeta.thingManagers.JdbcThingManager
driverClass=xxx
url=xxx
user=xxx
password=xxx
</pre>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 根据具体情况填入xxx的值。</p>

<h3>2.3.RedisThingManger</h3>

<p>&nbsp;&nbsp;&nbsp; RedisThingManager可以把模型保存在Redis数据库中。方法是在projects/创建一个目录，在该目录下创建一个名为dml.properties的文件，文件内容如下。</p>

<pre class="brush:plain;">
name=xxx
class=org.xmeta.thingManagers.RedisThingManager
host=xxx
port=xxx
password=xxx</pre>

<p>&nbsp;&nbsp;&nbsp; 根据具体情况填入相应的xxx值。</p>

<h3>2.4.自定义事物管理器</h3>

<p>&nbsp;&nbsp;&nbsp; 可以实现org.xmtea.ThingManager接口，使用时的配置方法参看JdbcThingManager。</p>

<h2>3.引擎中的路径</h2>

<p>&nbsp;&nbsp;&nbsp; 引擎中的几个主要目录。</p>

<h3>3.1.引擎根目录</h3>

<p>&nbsp;&nbsp;&nbsp; 初始化引擎时需要指定一个可以读写的目录，因为运行时可能会产生一些临时文件等。</p>

<p>&nbsp;&nbsp;&nbsp; 下面的目录是相对于引擎根目录的，在引擎根目录下。</p>

<h3>3.2.projects目录</h3>

<p>&nbsp;&nbsp;&nbsp; 项目目录，projects下的每一个目录都是一个项目，即事物管理器（ThingManager)。</p>

<h3>3.2.lib目录（可选）</h3>

<p>&nbsp;&nbsp;&nbsp; 额外的包可以放在这个目录下。</p>

<h3>3.3.work目录</h3>

<p>&nbsp;&nbsp;&nbsp; 运行时产生的临时文件等都放到这个目录下。可以删除，比如脚本模型改变了但是代码未重新编译，那么一般删除该目录后可以解决，删除后还会自动创建。</p>

<h2>4._local项目</h2>

<p>&nbsp;&nbsp;&nbsp; 目前，引擎运行后都会检查和创建一个_local项目。_local项目一般用于本地，如各种自定义的本地配置等等。</p>

<p>&nbsp;</p>
]]></description>
</QuickContent>