<?xml version='1.0' encoding='utf-8'?>

<QuickContent name="ModelEngine" descriptors="xworker.content.QuickContent" label="动态模型引擎" type="thingDesc"
     group="dynamicModel" icon="icons/html.png" th_sortWeight="20" simpleBrowser="true"
     en_label="Dynamic Model Engine" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">&#xd;
    <description><![CDATA[<h1>动态模型引擎</h1>

<p>&nbsp;&nbsp;&nbsp; 动态模型引擎相关的一些知识。</p>

<h2>1.模型</h2>

<h3>1.1.路径</h3>

<p>&nbsp;&nbsp;&nbsp; 每一个模型都有一个唯一的路径，相同的路径的模型视为同一个模型。模型的路径规则基本同Java的包名，如org.xworker.Abc是一个合法的模型的路径。</p>

<p>&nbsp;&nbsp;&nbsp; 每一个模型下的子节点都是独立的模型，它的路径规则是父模型的路径+/@+模型的Id。如org.xworker.Abc/@achild或org.xworker.Abc/@achild/@child是子节点的路径</p>

<p>&nbsp;&nbsp;&nbsp; 注意模型的Id默认使用模型的属性name的值，也可以是没有意义的数字字符串等，只是为了和同级别的子节点做区分，同一级的模型的Id不能重复。</p>

<h3>1.2.属性</h3>

<p>&nbsp;&nbsp;&nbsp; 模型的属性可以是任意Java对象，也可以是没有定义的额外属性。但在序列化存储时，只有被定义的属性且值能序列化成字符串的才能正常保存。</p>

<p>&nbsp;&nbsp;&nbsp; 模型是面向对象的，模型的属性是由它的类模型（描述者）定义的。</p>

<h3>1.3.类和继承</h3>

<p>&nbsp;&nbsp;&nbsp; 模型可以有任意个类（描述者），一个模型也可以作为自己的描述者。一个模型也可以继承任意个其它模型（继承自己无意义）。</p>

<h3>1.4.模型的XML格式</h3>

<p>&nbsp;&nbsp;&nbsp; 模型的XML格式约定如下：</p>

<ul>
	<li><strong>descriptors属性</strong><br />
	descriptors属性的值是其类模型（描述者）的路径，如有多个使用英文逗号分割。<br />
	&nbsp;</li>
	<li><strong>extends属性</strong><br />
	extends属性的值是被继承的模型的路径，如有多个使用英文逗号分割。<br />
	&nbsp;</li>
	<li><strong>_xmeta_id_属性</strong><br />
	如果有，其属性值是模型的ID。<br />
	&nbsp;</li>
	<li><strong>&lt;xxx&gt;some text&lt;/xxx&gt;文本块</strong><br />
	XML节点中的文本快一般作为属性的值，如上面xxx节点不是作为模型，而是作为它的父节点的模型的一个属性，其中属性名是xxx，xxx属性的值是some text。</li>
</ul>

<p>&nbsp;&nbsp;&nbsp; 动态模型只用到了XML的基本功能，其它可能XML存在的功能可能并未用到。</p>

<h2>2.模型管理器</h2>

<p>&nbsp;&nbsp;&nbsp; 模型管理器有时也当作是模型的项目。它的主要功能是管理模型的存储，比如在文件里保存和读取模型的FileThingManager，在数据库中保存和读取模型的JdbcThingManager等等。</p>

<h3>2.1.默认事物管理器</h3>

<p>&nbsp;&nbsp;&nbsp; 引擎启动后默认实例化的事物管理器有下面几个。</p>

<ul>
	<li><strong>TransientThingManager</strong><br />
	保存在内存中的模型，可能会被垃圾回收。用默认的构造函数实例化的Thing对象默认保存在这里。<br />
	&nbsp;&nbsp;</li>
	<li>
	<p><strong>ClassThingManager</strong><br />
	读取在Classpath中模型，ClassThingManager管理的模型是只读的（修改后不能保存）。<br />
	&nbsp;</p>
	</li>
	<li>
	<p><strong>JarThingManager</strong><br />
	读取Classpath中的jar，创建JarThingManager。Classpath中的模型有可能会先被ClassThingManager读取。JarThingManager管理模型也是只读的（修改后不能保存）。<br />
	&nbsp;</p>
	</li>
	<li>
	<p><strong>FileThingManager</strong><br />
	引擎根目录下的projects目录下的子目录一般是FileThingManager管理。</p>
	</li>
</ul>

<h3>2.2.JdbcThingManger</h3>

<p>&nbsp;&nbsp;&nbsp; JdbcThingManger可以把模型保存到数据库中。方法是在projects/创建一个目录，在该目录下创建一个名为dml.properties的文件，文件内容如下。</p>

<pre class="brush:as3;">
name=xxx
class=org.xmeta.thingManagers.JdbcThingManager
driverClass=xxx
url=xxx
user=xxx
password=xxx
</pre>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 根据具体情况填入xxx的值。</p>

<h3>2.3.RedisThingManger</h3>

<p>&nbsp;&nbsp;&nbsp; RedisThingManager可以把模型保存在Redis数据库中。方法是在projects/创建一个目录，在该目录下创建一个名为dml.properties的文件，文件内容如下。</p>

<pre class="brush:plain;">
name=xxx
class=org.xmeta.thingManagers.RedisThingManager
host=xxx
port=xxx
password=xxx</pre>

<p>&nbsp;&nbsp;&nbsp; 根据具体情况填入相应的xxx值。</p>

<h3>2.4.自定义事物管理器</h3>

<p>&nbsp;&nbsp;&nbsp; 可以实现org.xmtea.ThingManager接口，使用时的配置方法参看JdbcThingManager。</p>

<h2>3.引擎中的路径</h2>

<p>&nbsp;&nbsp;&nbsp; 引擎中的几个主要目录。</p>

<h3>3.1.引擎根目录</h3>

<p>&nbsp;&nbsp;&nbsp; 初始化引擎时需要指定一个可以读写的目录，因为运行时可能会产生一些临时文件等。</p>

<p>&nbsp;&nbsp;&nbsp; 下面的目录是相对于引擎根目录的，在引擎根目录下。</p>

<h3>3.2.projects目录</h3>

<p>&nbsp;&nbsp;&nbsp; 项目目录，projects下的每一个目录都是一个项目，即事物管理器（ThingManager)。</p>

<h3>3.2.lib目录（可选）</h3>

<p>&nbsp;&nbsp;&nbsp; 额外的包可以放在这个目录下。</p>

<h3>3.3.work目录</h3>

<p>&nbsp;&nbsp;&nbsp; 运行时产生的临时文件等都放到这个目录下。可以删除，比如脚本模型改变了但是代码未重新编译，那么一般删除该目录后可以解决，删除后还会自动创建。</p>

<h2>4._local项目</h2>

<p>&nbsp;&nbsp;&nbsp; 目前，引擎运行后都会检查和创建一个_local项目。_local项目一般用于本地，如各种自定义的本地配置等等。</p>

<p>&nbsp;</p>]]></description>&#xd;
    <en_description><![CDATA[<h1>Dynamic model engine</h1>

<p>&nbsp;&nbsp;&nbsp; Some knowledge about dynamic model engines. </p>

<h2>1. Model</h2>

<h3>1.1. Path</h3>

<p>&nbsp;&nbsp;&nbsp; Each model has a unique path, and models with the same path are considered the same model. The path rules of the model are basically the same as the Java package name, for example, org.xworker.Abc is a valid model path. </p>

<p>&nbsp;&nbsp;&nbsp; The child nodes under each model are independent models, and its path rule is the path of the parent model +/@+the Id of the model. Such as org.xworker.Abc/@achild or org.xworker.Abc/@achild/@child is the path of the child node</p>

<p>&nbsp;&nbsp;&nbsp; Note that the Id of the model uses the value of the attribute name of the model by default, or it can be a meaningless numeric string, etc., just to distinguish it from the child nodes of the same level, the Id of the model of the same level Cannot be repeated. </p>

<h3>1.2. Attributes</h3>

<p>&nbsp;&nbsp;&nbsp; The attributes of the model can be any Java object or additional attributes that are not defined. However, when serializing storage, only defined attributes and values ​​that can be serialized into strings can be stored normally. </p>

<p>&nbsp;&nbsp;&nbsp; The model is object-oriented, and the attributes of the model are defined by its class model (descriptor). </p>

<h3>1.3. Classes and inheritance</h3>

<p>&nbsp;&nbsp;&nbsp; A model can have any number of classes (descriptors), and a model can also serve as its own descriptor. A model can also inherit any number of other models (inheriting itself is meaningless). </p>

<h3>1.4. The XML format of the model</h3>

<p>&nbsp;&nbsp;&nbsp; The XML format convention of the model is as follows:</p>

<ul>
<li><strong>descriptors attribute</strong><br />
The value of the descriptors attribute is the path of its class model (descriptor). If there are more than one, use English commas to separate. <br />
&nbsp;</li>
<li><strong>extends attribute</strong><br />
The value of the extends attribute is the path of the inherited model. If there are more than one, use English commas to separate. <br />
&nbsp;</li>
<li><strong>_xmeta_id_attribute</strong><br />
If so, its attribute value is the ID of the model. <br />
&nbsp;</li>
<li><strong>&lt;xxx&gt;some text&lt;/xxx&gt;text block</strong><br />
The text in the XML node is generally used as the value of the attribute. For example, the xxx node above is not used as a model, but as an attribute of the model of its parent node. The attribute name is xxx, and the value of the xxx attribute is some text. </li>
</ul>

<p>&nbsp;&nbsp;&nbsp; The dynamic model only uses the basic functions of XML, and other possible functions of XML may not be used. </p>

<h2>2. Model Manager</h2>

<p>&nbsp;&nbsp;&nbsp; Model Manager is sometimes treated as a model item. Its main function is to manage the storage of the model, such as the FileThingManager that saves and reads the model in a file, the JdbcThingManager that saves and reads the model in the database, and so on. </p>

<h3>2.1. The default thing manager</h3>

<p>&nbsp;&nbsp;&nbsp; The following things are instantiated by default after the engine is started. </p>

<ul>
<li><strong>TransientThingManager</strong><br />
Models stored in memory may be garbage collected. Thing objects instantiated with the default constructor are saved here by default. <br />
&nbsp;&nbsp;</li>
<li>
<p><strong>ClassThingManager</strong><br />
Read the model in Classpath, the model managed by ClassThingManager is read-only (cannot be saved after modification). <br />
&nbsp;</p>
</li>
<li>
<p><strong>JarThingManager</strong><br />
Read the jar in the Classpath and create the JarThingManager. The model in Classpath may be read by ClassThingManager first. The JarThingManager management model is also read-only (it cannot be saved after modification). <br />
&nbsp;</p>
</li>
<li>
<p><strong>FileThingManager</strong><br />
The subdirectories under the projects directory under the engine root directory are generally managed by FileThingManager. </p>
</li>
</ul>

<h3>2.2.JdbcThingManger</h3>

<p>&nbsp;&nbsp;&nbsp; JdbcThingManger can save the model to the database. The method is to create a directory in projects/, create a file named dml.properties in the directory, the content of the file is as follows. </p>

<pre class="brush:as3;">
name=xxx
class=org.xmeta.thingManagers.JdbcThingManager
driverClass=xxx
url=xxx
user=xxx
password=xxx
</pre>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Fill in the value of xxx according to the specific situation. </p>

<h3>2.3.RedisThingManger</h3>

<p>&nbsp;&nbsp;&nbsp; RedisThingManager can save the model in the Redis database. The method is to create a directory in projects/, create a file named dml.properties in the directory, the content of the file is as follows. </p>

<pre class="brush:plain;">
name=xxx
class=org.xmeta.thingManagers.RedisThingManager
host=xxx
port=xxx
password=xxx</pre>

<p>&nbsp;&nbsp;&nbsp; Fill in the corresponding xxx value according to the specific situation. </p>

<h3>2.4. Custom thing manager</h3>

<p>&nbsp;&nbsp;&nbsp; It can implement the org.xmtea.ThingManager interface. For the configuration method when using it, please refer to JdbcThingManager. </p>

<h2>3. Path in the engine</h2>

<p>&nbsp;&nbsp;&nbsp; Several major directories in the engine. </p>

<h3>3.1. Engine root directory</h3>

<p>&nbsp;&nbsp;&nbsp; You need to specify a readable and writable directory when initializing the engine, because some temporary files may be generated during runtime. </p>

<p>&nbsp;&nbsp;&nbsp; The following directories are relative to the engine root directory, under the engine root directory. </p>

<h3>3.2.projects directory</h3>

<p>&nbsp;&nbsp;&nbsp; Project directory, each directory under projects is a project, that is, ThingManager. </p>

<h3>3.2.lib directory (optional)</h3>

<p>&nbsp;&nbsp;&nbsp; Additional packages can be placed in this directory. </p>

<h3>3.3.work directory</h3>

<p>&nbsp;&nbsp;&nbsp; Temporary files generated during runtime are placed in this directory. It can be deleted. For example, if the script model is changed but the code is not recompiled, it can be solved after deleting the directory, and it will be created automatically after deletion. </p>

<h2>4._local project</h2>

<p>&nbsp;&nbsp;&nbsp; Currently, a _local project will be checked and created after the engine runs. The _local project is generally used locally, such as various custom local configurations and so on. </p>

<p>&nbsp;</p>]]></en_description>&#xd;
</QuickContent>