@xworker.http.doc.Introduction
sname
Introduction
slabel
Introduction
sdescriptors
xworker.http.ControlSet
@xworker.http.doc.Introduction/@index
sname
index
sdescriptors
xworker.http.ControlSet/@SimpleControl
@xworker.http.doc.Introduction/@index/@forms
sname
forms
sbelongToHtml
true
sstyle
default
SotherHeads
#$@text#$@
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<LINK REL ="stylesheet" TYPE="text/css" HREF="fckeditor/editor/css/fck_editorarea.css" TITLE="Style"/>
<script type="text/javascript" src="js/xworker/InnerBrowserUtil.js"></script>
#$@text#$@
sdescriptors
xworker.http.controls.SimpleControl/@view
@xworker.http.doc.Introduction/@index/@forms/@htmlCode
sname
htmlCode
ShtmlCode
#$@text#$@
<p><span style="font-size: small"><strong>WebControl</strong><span style="font-size: xx-small"><strong><a href="javascript:void(0)">edit</a></strong></span></span></p>
<p>&nbsp;&nbsp;&nbsp; WebControl是WEB框架事物，可以通过WebControl编写WEB应用。</p>
<p>&nbsp;&nbsp;&nbsp; 在XWorker中WebControl也是普通的事物，只要一个事物有httpDo的动作，那么这个事物就可以是一个WEB应用，只要一个描述者有httpDo的行为，那么这个描述者就可以作为WebControl。</p>
<p><strong>WebControl的定义</strong></p>
<p>&nbsp;&nbsp;&nbsp; 实现了httpDo动作的事物就可以作为WEB应用，在浏览器中输入地址do?sc=&lt;事物的路径&gt;就可以执行这个WEB应用。</p>
<p>&nbsp;&nbsp;&nbsp; 当一个实现httpDo动作的事物作为其他事物的描述者是，这个事物就可以认为是一个WEB框架。</p>
<p>&nbsp;&nbsp;&nbsp; httpDo方法在执行时会传入request(HttpServerletRequest)和response(HttpServletResponse)两个常规变量，还会传入一个requestBean（xworker.ui.http.HttpRequestBean）变量，requestBean用于辅助读取数据等。</p>
<p>&nbsp;&nbsp;&nbsp; 执行事物的httpDo的Serverlet是xworker.ui.http.HttoServletDo，这个类是控制所有WebControl的总类。</p>
<p><strong>常用WebControl</strong></p>
<ol>
    <li><a onClick="invoke('thing.xworker.uiweb.http.ControlSet')" href="javascriptvoid(0)">xworker.http.ControlSet&nbsp;</a></li>
</ol>
<p>&nbsp;&nbsp;&nbsp; ControlSet集合常用的WebControl以及定义界面的描述事物等，通过ControlSet可以方便的编写WEB应用，一般都是通过ControlSet创建WEB应用事物的。</p>
<ol start="2">
    <li><a onClick="invoke('thing.xworker.uiweb.http.controls.SimpleControl')" href="javascriptvoid(0)">xworker.http.controls.SimpleControl</a></li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 一个简单的WebControl，执行指定的名为doAction的动作，并根据doAction的返回结果执行相应的结果输出，结果输入里集合了常用的界面输入形式，比如freemarker模板、XWorker表单、JasperReports、重定向等。</p>
<p>&nbsp;&nbsp;&nbsp; 例子：</p>
<p style="margin-left: 40px"><a href="do?sc=xworker:ui:test.http.TestControlSet:/@aSimpleControl">xworker:ui:test.http.TestControlSet:/@aSimpleControl</a>，<a onClick="invoke('thing:xworker:ui:test.http.TestControlSet:/@aSimpleControl')" href="javascript:void(0)">打开此事物</a>。</p>
<ol start="3">
    <li><a onClick="invoke('thing.xworker.uiweb.http.controls.BizControl')" href="javascriptvoid(0)">xworker.http.controls.BizControl</a></li>
</ol>
<p>&nbsp;&nbsp;&nbsp;BizControl用于编写复杂的WEB应用，执行前会找到相应的Web App配置，为每个动作提供默认的Hibernate Session，判断是否要登录等。</p>
<p>&nbsp;&nbsp; BizControl适合于开发大型应用，能够减少工作量。</p>
<p>&nbsp;</p>
#$@text#$@
sdescriptors
xworker.html.base.container.childs/@htmlCode
@xworker.http.doc.Introduction/@index/@success
sname
success
stype
form
scontentType
text/html;
svalue
xworker.http.doc.Introduction/@index/@forms
sdescriptors
xworker.http.controls.SimpleControl/@result
