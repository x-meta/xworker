<?xml version="1.0" encoding="utf-8"?>

<ThingGuide name="AddListener" descriptors="xworker.lang.util.ThingGuide" label="事件编辑器" en_label="Listener Editor"
     th_createIndex="true" th_registThing="guide|xworker.swt.events.Listeners,guide|xworker.swt.widgets.Widget"
     group="event">
    <Composite label="事件编辑器" en_label="Event Editor">
        <Composite descriptors="xworker.lang.util.ThingGuideNodes/@Composite/@Composite,xworker.swt.Widgets/@Composite">
            <GridLayout name="mainCompositeGridLayout"></GridLayout>
            <SashForm name="sashForm" weights="30,70">
                <GridData name="sashFormGridData" style="FILL_BOTH"></GridData>
                <SashForm name="eventSashForm" style="VERTICAL" weights="30,70">
                    <Composite name="controlEventComposite">
                        <GridLayout name="controlEventCompositeGridLayout"></GridLayout>
                        <Label name="haveEventLabel" text="lang:d=已实现事件：&amp;en=Implemented events:">
                            <GridData name="GridData" style="FILL_HORIZONTAL"></GridData>
                        </Label>
                        <List name="implementedList">
                            <GridData name="implementsListGridData" style="FILL_BOTH"></GridData>
                            <Event name="onSelection" ref="actions:selectEvent"></Event>
                        </List>
                    </Composite>
                    <Composite name="eventComposite">
                        <GridLayout name="eventCompositeGridLayout"></GridLayout>
                        <Label name="eventLabel" text="lang:d=事件类型：&amp;en=Events:"></Label>
                        <Text name="eventFilterText" _xmeta_id_="controlFilterText"
                             BORDER="true">
                            <GridData name="GridData" style="FILL_HORIZONTAL"></GridData>
                            <Event name="onModify">
                                <GroovyAction name="GroovyAction">
                                    <code><![CDATA[def text = eventFilterText.getText().toLowerCase();;

eventList.removeAll();
for(listener in listeners){
    def key = listener.getString("value");
    if(key.toLowerCase().indexOf(text) != -1){
        eventList.add(key);
    }
}]]></code>
                                </GroovyAction>
                            </Event>
                            <Event name="onKeyDown">
                                <KeyTravel name="KeyTravel" descriptors="xworker.swt.actions.EventActions/@KeyTravel"
                                     widget="var:eventList" selectionListener="xworker.swtshare.p2020.p12.p30.AddListener/@Composite/@Composite/@actions/@selectEvent"></KeyTravel>
                            </Event>
                        </Text>
                        <List name="eventList">
                            <GridData name="eventListGridData" style="FILL_BOTH"></GridData>
                            <DataStore attachToParent="false" dynamicLoadChilds="" sourceDataAddType="">
                                <dataObjects>
                                    <AttributeValueDataObject attributePath="xworker.swt.widgets.Widget/@Event/@name"
                                         paging="false" pageSize="">
                                        <attribute name="value" _xmeta_id_="5522" label="值"
                                             key="true"></attribute>
                                        <attribute name="label" _xmeta_id_="5523" label="标签"
                                             queryEditor=""></attribute>
                                    </AttributeValueDataObject>
                                </dataObjects>
                            </DataStore>
                            <Event name="onSelection" ref="actions:selectEvent"></Event>
                        </List>
                    </Composite>
                </SashForm>
                <Composite name="editComposite">
                    <Composite name="codeComposite">
                        <GridLayout name="codeCompositeGridLayout"></GridLayout>
                        <StyledText name="codeEditor" style="MULTI" H_SCROLL="true" V_SCROLL="true">
                            <Colorer name="Colorer" codeName="groovy" codeType="groovy"></Colorer>
                            <CodeAssistor name="codeAssistor" initCache="false" actionContext=""></CodeAssistor>
                            <GridData name="codeEditorGridData" descriptors="xworker.swt.layout.LayoutDatas/@GridData"
                                 style="FILL_BOTH"></GridData>
                        </StyledText>
                        <Composite name="buttonComposite" _xmeta_id_="7709">
                            <GridData name="buttonCompositeGridData" _xmeta_id_="7710"
                                 style="FILL_HORIZONTAL" horizontalAlignment="END"></GridData>
                            <RowLayout name="buttonCompositeRowLayout" _xmeta_id_="7711"></RowLayout>
                            <Button name="saveButton" _xmeta_id_="7712" text="lang:d=保存(&amp;amp;S)&amp;en=Save(&amp;amp;S)">
                                <RowData name="RowData" _xmeta_id_="7713" width="80"></RowData>
                                <Listeners _xmeta_id_="7714">
                                    <Listener name="saveButtonSelection" _xmeta_id_="7715"
                                         ref="actions:save"></Listener>
                                </Listeners>
                            </Button>
                            <Button name="removeButton" _xmeta_id_="7716" text="lang:d=移除(&amp;amp;R)&amp;en=Remove(&amp;amp;R)">
                                <RowData name="RowData" _xmeta_id_="7717" width="80"></RowData>
                                <Listeners _xmeta_id_="7718">
                                    <Listener name="removeButtonSelection" _xmeta_id_="7719"
                                         ref="actions:remove"></Listener>
                                </Listeners>
                            </Button>
                        </Composite>
                    </Composite>
                    <Composite name="thingEditorComposite">
                        <GridLayout name="thingEditorCompositeGridLayout"></GridLayout>
                        <ThingEditor name="thingEditor">
                            <GridData name="thingEditorGridData" style="FILL_BOTH"></GridData>
                        </ThingEditor>
                        <Composite name="buttonComposite" _xmeta_id_="7709">
                            <GridData name="buttonCompositeGridData" _xmeta_id_="7710"
                                 style="FILL_HORIZONTAL" horizontalAlignment="END"></GridData>
                            <RowLayout name="buttonCompositeRowLayout" _xmeta_id_="7711"></RowLayout>
                            <Button name="saveButton" _xmeta_id_="7712" text="lang:d=保存(&amp;amp;S)&amp;en=Save(&amp;amp;S)">
                                <RowData name="RowData" _xmeta_id_="7713" width="80"></RowData>
                                <Listeners _xmeta_id_="7714">
                                    <Listener name="saveButtonSelection" _xmeta_id_="7715"
                                         ref="actions:save"></Listener>
                                </Listeners>
                            </Button>
                            <Button name="removeButton" _xmeta_id_="7716" text="lang:d=移除(&amp;amp;R)&amp;en=Remove(&amp;amp;R)">
                                <RowData name="RowData" _xmeta_id_="7717" width="80"></RowData>
                                <Listeners _xmeta_id_="7718">
                                    <Listener name="removeButtonSelection" _xmeta_id_="7719"
                                         ref="actions:remove"></Listener>
                                </Listeners>
                            </Button>
                        </Composite>
                    </Composite>
                    <Composite name="newEventComposite">
                        <GridLayout name="newEventGridLayout"></GridLayout>
                        <ThingForm name="newEventForm" descriptorThing="xworker.swt.widgets.Widget/@Event"
                             column="1">
                            <GridData name="newEventFormGridData" style="FILL_BOTH"></GridData>
                        </ThingForm>
                        <Composite name="buttonComposite" _xmeta_id_="1971">
                            <GridData name="buttonCompositeGridData" _xmeta_id_="1972"
                                 style="FILL_HORIZONTAL" horizontalAlignment="END"></GridData>
                            <RowLayout name="buttonCompositeRowLayout" _xmeta_id_="1973"></RowLayout>
                            <Button name="createActionContainerEventButton" _xmeta_id_="createEventButton"
                                 text="lang:d=使用动作容器&amp;en=Use ActionContainer">
                                <Listeners>
                                    <Listener name="createEventSelection">
                                        <SelectActionContainerDialog name="selectActionContainerDialog" _xmeta_id_="SelectActionContainerDialog" descriptors="xworker.swt.actions.DialogActions/@SelectActionContainerDialog"
                                             title="lang:d=选择动作容器&amp;en=Select ActionContainer"
                                             shell="ognl:buttonComposite.getShell()">
                                            <actions>
                                                <GroovyAction name="ok">
                                                    <code><![CDATA[import org.xmeta.Thing;
import xworker.swt.design.Designer;

def eventName = eventList.getSelection()[0];

//控件事物
def controlThing = thingGuide.getEditThing();
//获取事件事物
def eventThing = actions.doAction("getEventThing", actionContext, "eventName", eventName);
def event = eventThing;
if(eventThing == null){
    //声明事件并添加
    event = actions.doAction("createEvent", actionContext, "eventName", eventName);
    def values = newEventForm.doAction("getValues", actionContext);
    event.put("description", values.description);
    event.metadata.setId(eventName);
    event.ref = actionContainerName + ":" + actionName;
    
    controlThing.save();    
}else{    
    //这是只声明了事件，但没有添加相应动作的情形
    //eventThing.addChild(eventAction);
    
    controlThing.save();
}

//编辑事件
actions.doAction("editEvent", actionContext, "eventThing", event);
//添加到已实现，从未实现的事件列表中删除
implementedList.add(eventName);
implementedList.setSelection([eventName] as String[]);
eventList.remove(eventName);]]></code>
                                                </GroovyAction>
                                                <GroovyAction name="getActionContext">
                                                    <code><![CDATA[import org.xmeta.ActionContext;

//原事件编辑器是设计器，ActionContainer是已经创建好的
def ac = new ActionContext();
def thing = thingGuide.getEditThing();
create(thing.getRoot(), ac);
return ac;

def create(thing, ac){
    if(thing.getThingName() == "ActionContainer"){
        thing.doAction("create", ac);
    }else{
        for(child in thing.getChilds()){
             create(child, ac);
        }
    }
}]]></code>
                                                </GroovyAction>
                                            </actions>
                                        </SelectActionContainerDialog>
                                    </Listener>
                                </Listeners>
                            </Button>
                            <Button name="createGroovyEventButton" _xmeta_id_="createEventButton1"
                                 text="lang:d=使用Groovy&amp;en=Using Groovy">
                                <Listeners>
                                    <Listener name="createEventSelection">
                                        <GroovyAction name="GroovyAction">
                                            <code><![CDATA[import org.xmeta.Thing;
import xworker.swt.design.Designer;

def eventName = eventList.getSelection()[0];
//控件事物
def controlThing = thingGuide.getEditThing();
//获取事件事物
def eventThing = actions.doAction("getEventThing", actionContext, "eventName", eventName);
if(eventThing == null){
    //声明事件并添加
    def event = actions.doAction("createEvent", actionContext, "eventName", eventName);
    def values = newEventForm.doAction("getValues", actionContext);
    event.put("description", values.description);
    event.metadata.setId(eventName);
    event.metadata.setId(eventName);
    def eventAction = new Thing("xworker.lang.actions.GroovyAction");
    event.addChild(eventAction);
    
    controlThing.save();
    
    eventThing = event;  
}else{    
    //这是只声明了事件，但没有添加相应动作的情形
    eventThing.addChild(eventAction);
    
    controlThing.save();
}

//编辑事件
actions.doAction("editEvent", actionContext, "eventThing", eventThing);
//添加到已实现，从未实现的事件列表中删除
implementedList.add(eventName);
implementedList.setSelection([eventName] as String[]);
eventList.remove(eventName);]]></code>
                                        </GroovyAction>
                                    </Listener>
                                </Listeners>
                            </Button>
                            <Button name="createEventButton" _xmeta_id_="createEventButton2"
                                 text="lang:d=自定义事件&amp;en=Create Event Listener">
                                <Listeners>
                                    <Listener name="createEventSelection">
                                        <GroovyAction name="GroovyAction">
                                            <code><![CDATA[import org.xmeta.Thing;
import xworker.swt.design.Designer;

def eventName = eventList.getSelection()[0];

//控件事物
def controlThing = thingGuide.getEditThing();
//获取事件事物
def eventThing = actions.doAction("getEventThing", actionContext, "eventName", eventName);
if(eventThing == null){
    //声明事件并添加
    def event = actions.doAction("createEvent", actionContext, "eventName", eventName);
    def values = newEventForm.doAction("getValues", actionContext);
    event.put("description", values.description);
    event.metadata.setId(eventName);
    event.metadata.setId(eventName);
    
    eventThing = event; 
    
    controlThing.save();
}else{    
    //这是只声明了事件，但没有添加相应动作的情形
    //eventThing.addChild(eventAction);
    
    controlThing.save();
}

//编辑事件
actions.doAction("editEvent", actionContext, "eventThing", eventThing);
//添加到已实现，从未实现的事件列表中删除
implementedList.add(eventName);
implementedList.setSelection([eventName] as String[]);
eventList.remove(eventName);]]></code>
                                        </GroovyAction>
                                    </Listener>
                                </Listeners>
                            </Button>
                        </Composite>
                    </Composite>
                    <Composite name="infoComposite">
                        <GridLayout name="infoCompositeGridLayout"></GridLayout>
                        <ThingDescripitonBrowser name="infoBrowser">
                            <description><![CDATA[<h1>事件编辑器</h1>

<p>&nbsp;&nbsp;&nbsp; 编辑当前选择的控件的事件。选择一个<strong>事件类型</strong>可以创建事件监听，选择<strong>已实现的事件</strong>可以修改它。</p>

<h2>动作容器</h2>

<p>&nbsp;&nbsp;&nbsp; 动作容器相当于方法和函数的容器，动作容器中的方法可以被多个地方调用，公共的方法可以定义在动作容器中。</p>

<h2>GroovyAction</h2>

<p>&nbsp;&nbsp;&nbsp; 使用脚本语言建议使用Groovy脚本。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>]]></description>
                            <en_description><![CDATA[<h1>Event Editor</h1>

<p>&nbsp;&nbsp;&nbsp; Edit event listener of current selected control.</p>

<h2>GroovyAction</h2>

<p>&nbsp;&nbsp;&nbsp; Groovy scripts is often used in event listener.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>]]></en_description>
                            <GridData name="infoBrowserGridData" style="FILL_BOTH"></GridData>
                        </ThingDescripitonBrowser>
                    </Composite>
                    <StackLayout name="editStackLayout" topControl="infoComposite"></StackLayout>
                </Composite>
            </SashForm>
            <ActionContainer name="actions">
                <GroovyAction name="setSwtContext">
                    <code><![CDATA[import xworker.swt.xwidgets.SelectContent;
import xworker.swt.design.Designer;

import org.eclipse.swt.widgets.Widget;

//事件监听列表
def dataObject = world.getThing("xworker.swtshare.p2020.p12.p30.AddListener/@Composite/@Composite/@sashForm/@eventSashForm/@eventComposite/@eventList/@DataStore/@dataObjects/@AttributeValueDataObject");
def listeners = dataObject.doAction("query", actionContext);
_g.put("listeners", listeners);]]></code>
                </GroovyAction>
                <GroovyAction name="selectEvent">
                    <code><![CDATA[//判断有没有选择控件和事件
def eventName = null;
def selections = null;
if(event.widget == implementedList){
    selections = implementedList.getSelection();
}else if(event.widget == eventList){
    selections = eventList.getSelection();
}
if(selections != null && selections.length > 0){
    eventName = selections[0];
}
if(eventName == null){
    editStackLayout.topControl = infoComposite;
    editComposite.layout();
    return;
}

//随时保存
actions.doAction("save", actionContext);

//获取事件事物
def eventThing = actions.doAction("getEventThing", actionContext, "eventName", eventName);

if(eventThing == null){
    //没有设置事件，或事件没有动作
    def values = ["name":eventName];
    newEventForm.doAction("setPartialValues", actionContext, "values", values);
    
    editStackLayout.topControl = newEventComposite;
    editComposite.layout();
}else{
    //编辑事件
    actions.doAction("editEvent", actionContext, "eventThing", eventThing);
}]]></code>
                </GroovyAction>
                <GroovyAction name="getEventThing">
                    <code><![CDATA[import xworker.swt.design.Designer;

def thing = thingGuide.getEditThing();

for(listeners in thing.getChilds("listeners")){
    for(listener in listeners.getChilds()){
        def type = listener.getString("type");
        //println type + " = " + eventName;
        if("on" + type == eventName){
            return listener;
        }
    }
}

for(event in thing.getChilds("Event")){
    if(eventName == event.getString("name")){
        return event;
    }
}

return null;]]></code>
                    <ins>
                        <param name="eventName"></param>
                    </ins>
                </GroovyAction>
                <GroovyAction name="getControlThing">
                    <code><![CDATA[//判断有没有选择控件和事件
if(controlList.getSelection() == null || ontrolList.getSelection().length == 0){
    return null;
}

//获取事物
def controlName = controlList.getSelection()[0];
def control = swtContext.get(controlName);
return world.getThing(control.getData(Designer.DATA_THING));]]></code>
                </GroovyAction>
                <GroovyAction name="editEvent">
                    <code><![CDATA[if(eventThing.getChilds().size() == 1 && "GroovyAction" == eventThing.getChilds().get(0).getThingName()){
    //Groovy用代码编辑
    def code = eventThing.getChilds().get(0).getString("code");
    if(code != null){
        codeEditor.setText(code);        
    }else{
        codeEditor.setText("");
    }
    
    editStackLayout.topControl = codeComposite;
    editComposite.layout();
}else{
    //其它用事物编辑器编辑
    thingEditor.editorActions.doAction("setThing", ["thing": eventThing]);
    editStackLayout.topControl = thingEditorComposite;
    editComposite.layout();
}

//保存到全局变量上下文
_g.put("eventActionThing", eventThing);]]></code>
                    <ins>
                        <param name="eventThing"></param>
                    </ins>
                </GroovyAction>
                <GroovyAction name="save">
                    <code><![CDATA[if(actionContext.get("eventActionThing") == null){
    return;
}

if(editStackLayout.topControl == codeComposite){
    //保存Groovy代码
    eventActionThing.getChilds().get(0).put("code", codeEditor.getText());
    eventActionThing.save();    
}else if(editStackLayout.topControl == thingEditorComposite){
    //保存事物模型
    thingEditor.editorActions.doAction("save");
}]]></code>
                </GroovyAction>
                <GroovyAction name="setControl">
                    <code><![CDATA[//保存控件到全局变量上下文
actionContext.g().put("currentControl", control);

//显示已经有的事件列表
implementedList.removeAll();
eventList.removeAll();

def dataObject = world.getThing("xworker.swtshare.p2020.p12.p30.AddListener/@Composite/@Composite/@sashForm/@eventSashForm/@eventComposite/@eventList/@DataStore/@dataObjects/@AttributeValueDataObject");
def listeners = dataObject.doAction("query", actionContext);

for(listener in listeners){
    def eventName = listener.getString("value");
    if(actions.doAction("getEventThing", actionContext, "eventName", eventName) != null){
        implementedList.add(eventName);
    }else{
        eventList.add(eventName);
    }
}

editStackLayout.topControl = infoComposite;
editComposite.layout();

stackLayout.topControl = eventMainComposite;
mainComposite.layout();]]></code>
                    <ins>
                        <param name="control"></param>
                    </ins>
                </GroovyAction>
                <GroovyAction name="handleNewControl">
                    <code><![CDATA[import xworker.swt.design.DesignToolDialog;
import xworker.swt.design.Designer;

if(mainComposite.isDisposed()){
    return false;
}

if(newControl == parentContext.control){
    return true;
}else{    
    DesignToolDialog.setNewControl(parentContext, newControl);
    //初始化事件监听列表
    actions.doAction("setSwtContext", actionContext, "swtContext", parentContext.controlContext);

    //正在编辑的控件
    actions.doAction("setControl", actionContext, "control", newControl);
    return true;    
}]]></code>
                    <ActionDefined>
                        <MessageBox name="nosaveTip" descriptors="xworker.swt.actions.MessageBoxActions/@MessageBox"
                             shell="ognl:mainComposite.getShell()" icon="ICON_WARNING"
                             buttons="YES | NO | CANCEL" title="lang:d=保存模型&amp;en=Save Model"
                             message="lang:d=模型还未保存，要保存并应用模型吗？&amp;en=Model has not saved, are you want to save and apply the model?"></MessageBox>
                    </ActionDefined>
                </GroovyAction>
                <GroovyAction name="menuOperation">
                    <code><![CDATA[import xworker.swt.design.DesignTools;
if(event.widget == actionContext.get("designMenuItem")){
    def thing = world.getThing("xworker.swt.design.DesignToolBase/@insert");
    thing.doAction("run", actionContext, "contentToContent", true);
}else if(event.widget == actionContext.get("moveMenuItem")){
    def thing = world.getThing("xworker.swt.design.DesignToolBase/@move");
    thing.doAction("run", actionContext, "contentToContent", true);
}else if(event.widget == actionContext.get("eventMenuItem")){
    def thing = world.getThing("xworker.swt.design.DesignToolBase/@event");
    thing.doAction("run", actionContext, "contentToContent", true);
}else if(event.widget == actionContext.get("layoutMenuItem")){
    def thing = world.getThing("xworker.swt.design.DesignToolBase/@layout");
    thing.doAction("run", actionContext, "contentToContent", true);
}else if(event.widget == actionContext.get("menuMenuItem")){
    def thing = world.getThing("xworker.swt.design.DesignToolBase/@menu");
    thing.doAction("run", actionContext, "contentToContent", true);
}else if(event.widget == actionContext.get("modelMenuItem")){
    def thing = world.getThing("xworker.swt.design.DesignToolBase/@editMdoel");
    thing.doAction("run", actionContext, "contentToContent", true);
}]]></code>
                    <ActionDefined>
                        <MessageBox name="confirm" descriptors="xworker.swt.actions.MessageBoxActions/@MessageBox"
                             shell="ognl:mainComposite.getShell()" icon="ICON_QUESTION"
                             buttons="YES | NO | CANCEL" title="lang:d=模型已修改&amp;en=Model Has Changed"
                             message="lang:d=模型已修改，要保存并应用模型吗?&amp;en=Model has changed, do you want to save and apply the model?"></MessageBox>
                    </ActionDefined>
                </GroovyAction>
                <GroovyAction name="createEvent">
                    <code><![CDATA[import org.xmeta.Thing;

def thing = thingGuide.getEditThing();

def listeners = thing.getThing("listeners@0");
if(listeners == null){
    listeners = new Thing("xworker.swt.events.Listeners/@listeners");
    thing.addChild(listeners);
}

def event = new Thing("xworker.swt.events.Listeners/@listeners/@Listener");
event.set("name", thing.getMetadata().getName() + eventName);
event.set("type", eventName.substring(2, eventName.length()));
listeners.addChild(event);

return event;]]></code>
                    <ins>
                        <param name="eventName"></param>
                    </ins>
                </GroovyAction>
                <GroovyAction name="initListeners">
                    <code><![CDATA[implementedList.removeAll();
eventList.removeAll();

def dataObject = world.getThing("xworker.swtshare.p2020.p12.p30.AddListener/@Composite/@Composite/@sashForm/@eventSashForm/@eventComposite/@eventList/@DataStore/@dataObjects/@AttributeValueDataObject");
def listeners = dataObject.doAction("query", actionContext);

for(listener in listeners){
    def eventName = listener.getString("value");
    if(actions.doAction("getEventThing", actionContext, "eventName", eventName) != null){
        implementedList.add(eventName);
    }else{
        eventList.add(eventName);
    }
}]]></code>
                </GroovyAction>
                <MessageBox name="remove" _xmeta_id_="remove1" descriptors="xworker.swt.actions.MessageBoxActions/@MessageBox"
                     shell="ognl:buttonComposite.getShell()" icon="ICON_QUESTION" title="lang:d=移除事件&amp;en=Remove Event"
                     message="lang:d=确定要移除事件吗？&amp;en=Are you sure you want to remove the event?">
                    <actions>
                        <GroovyAction name="ok">
                            <code><![CDATA[import xworker.swt.util.SwtUtils;
import xworker.swt.events.SwtListener;
import org.xmeta.util.UtilString;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.MessageBox;

if(actionContext.get("eventActionThing") == null){
    return;
}

//事件事物
def eventThing = eventActionThing;

//保存事物
def parent = eventThing.getParent();
parent.removeChild(eventThing);
parent.save();

actions.doAction("initListeners", actionContext);
actionContext.put("eventActionThing", null);

//回到创建界面
actions.doAction("selectEvent");]]></code>
                        </GroovyAction>
                    </actions>
                </MessageBox>
            </ActionContainer>
            <Event name="onDispose" ref="xworker.swtshare.p2020.p12.p30.AddListener/@Composite/@Composite/@actions/@save"></Event>
            <Code name="init" _xmeta_id_="iit">
                <code><![CDATA[actions.doAction("initListeners", actionContext);
editStackLayout.topControl = infoComposite;
editComposite.layout();]]></code>
            </Code>
        </Composite>
    </Composite>
</ThingGuide>