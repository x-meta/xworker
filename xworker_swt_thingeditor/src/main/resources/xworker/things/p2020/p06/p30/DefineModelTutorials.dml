<?xml version='1.0' encoding='utf-8'?>

<ShellGuide name="DefineModelTutorials" descriptors="xworker.swt.guide.ShellGuide" label="定义模型"
     en_label="Define Model" en_group="-20000|Dynamic Model.100|Define Model" th_registThing="child|xworker.lang.util.indexs.ShellGuideIndex"
     group="-20000|动态模型.100|定义模型">&#xd;
    <actions>&#xd;
        <getIDEShell name="getMaskComposite" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIDEShell"/>&#xd;
        <getIdeActionContext name="getActionContext" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIdeActionContainer1"/>&#xd;
    </actions>&#xd;
    <Guide name="Guide" label="简介" en_label="Introduction">&#xd;
        <description><![CDATA[<h2>定义模型</h2>

<p>&nbsp;&nbsp;&nbsp; 本教程将演示如何定义一个模型。</p>

<h3>定义模型的方法</h3>

<p>&nbsp;&nbsp;&nbsp; 动态模型是一个<strong>面向对象</strong>的编程方法，定义一个模型就是<strong>定义模型的类</strong>，用来描述一个模型的属性、行为和子节点等。</p>

<p>&nbsp;&nbsp;&nbsp; 在动态模型里对象、类、行为等都是用模型来表示的，所以模型的<strong>类也是模型</strong>。</p>

<h2>&nbsp;</h2>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define the model</h2>

<p>&nbsp;&nbsp;&nbsp; This tutorial will demonstrate how to define a model. </p>

<h3>How to define the model</h3>

<p>&nbsp;&nbsp;&nbsp; A dynamic model is a <strong>object-oriented</strong> programming method. To define a model is to <strong>define the class of the model</strong>, which is used to describe the attributes of a model, Behavior and child nodes, etc. </p>

<p>&nbsp;&nbsp;&nbsp; In the dynamic model, objects, classes, behaviors, etc. are all represented by models, so the <strong>classes of the model are also models</strong>. </p>

<h2>&nbsp;</h2>]]></en_description>&#xd;
    </Guide>&#xd;
    <ThingEditorGuideInitor descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="创建Person" en_label="Create Person">&#xd;
        <actions>&#xd;
            <GroovyAction name="getThing">&#xd;
                <code><![CDATA[import org.xmeta.Thing;

def thing = new Thing("xworker.lang.MetaDescriptor3");
thing.set("name", "Person");
guide.setData("person", thing);

return thing;]]></code>&#xd;
            </GroovyAction>&#xd;
        </actions>&#xd;
    </ThingEditorGuideInitor>&#xd;
    <FormAttribute name="person" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@FormAttribute"
         label="Person" attribute="xworker.lang.MetaDescriptor3/@descriptors" className="Text"
         disablePreButton="true">&#xd;
        <description><![CDATA[<h2>Person</h2>

<p>&nbsp;&nbsp;&nbsp; 在本教程里我们将定义一个类Person，然后用它来创建具体的对象实例ZhangSan。</p>

<h3>xworker.lang.MetaDescriptor3</h3>

<p>&nbsp;&nbsp;&nbsp; 要定义一个类，常用模型xworker.lang.MetaDescriptor3，xworker.lang.MetaDescriptor3用于创建类模型。</p>

<p>&nbsp;&nbsp;&nbsp; 现在教程已经创建了一个Person模型。</p>

<h3>内存中的模型</h3>

<p>&nbsp;&nbsp;&nbsp; 在本教程里，Person和ZhangSan模型都是通过代码创建的，保存到内存中的的模型。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Person</h2>

<p>&nbsp;&nbsp;&nbsp; In this tutorial we will define a class Person, and then use it to create a concrete object instance ZhangSan. </p>

<h3>xworker.lang.MetaDescriptor3</h3>

<p>&nbsp;&nbsp;&nbsp; To define a class, the commonly used model xworker.lang.MetaDescriptor3, xworker.lang.MetaDescriptor3 is used to create the class model. </p>

<p>&nbsp;&nbsp;&nbsp; Now the tutorial has created a Person model. </p>

<h3>Model in memory</h3>

<p>&nbsp;&nbsp;&nbsp; In this tutorial, the Person and ZhangSan models are created by code and saved in memory. </p>]]></en_description>&#xd;
    </FormAttribute>&#xd;
    <FormAttribute name="name" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@FormAttribute"
         label="编辑名字" attribute="xworker.lang.MetaDescriptor3/@name" className="Text"
         disablePreButton="true" en_label="Edit name">&#xd;
        <description><![CDATA[<h2>名字</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 定义一个模型应该要设置名字。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>First name</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; To define a model, a name should be set. </p>]]></en_description>&#xd;
    </FormAttribute>&#xd;
    <ThingEditorGuideInitor _xmeta_id_="ThingEditorGuideInitor1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="创建Zhangsan" en_label="Create Zhangsan" th_nodeColor="RED">&#xd;
        <actions>&#xd;
            <GroovyAction name="getThing">&#xd;
                <code><![CDATA[import org.xmeta.Thing;

def thing = new Thing(person.getMetadata().getPath());
thing.set("name", "ZhangSan");
guide.setData("zhangsan", thing);

return thing;]]></code>&#xd;
            </GroovyAction>&#xd;
        </actions>&#xd;
    </ThingEditorGuideInitor>&#xd;
    <ThingForm name="ThingForm" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor1"
         label="ZhangSan" disablePreButton="true">&#xd;
        <description><![CDATA[<h2>ZhangSan</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在动态模型里对象是动态的，可以随时修改对象的类和行为等，也可以随时修改类模型，类模型修改后对应的对象实例也会随时变化。</p>

<p>&nbsp;&nbsp;&nbsp; 因此我们可以在Person还未完全定义好的情况下就用它来创建对象实例，当前本教程已经使用Person创建了对象实例ZhangSan。由于Person还未定义属性，可以看到ZhangSan的属性是空的。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>ZhangSan</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;In the dynamic model, the object is dynamic, and the class and behavior of the object can be modified at any time, and the class model can also be modified at any time. After the class model is modified, the corresponding object instance will also change at any time. </p>

<p>&nbsp;&nbsp;&nbsp; So we can use it to create an object instance when Person is not fully defined. Currently, this tutorial has used Person to create an object instance ZhangSan. Since Person has not yet defined attributes, you can see that the attributes of ZhangSan are empty. </p>]]></en_description>&#xd;
    </ThingForm>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor2" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="切换到Person-添加属性" thing="var:person" en_label="Switch to Person-Add attribute"
         th_nodeColor="RED"/>&#xd;
    <AddChildButton name="AddChildButton" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildButton"
         label="添加子节点" clickThenNext="true" disablePreButton="true" disableNextButton="true"
         en_label="Add child node">&#xd;
        <description><![CDATA[<h2>定义Person的属性</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 现在我们切换到Person模型来定义Person的属性，请点击<strong>添加子节点</strong>按钮进入添加子节点界面。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define the attributes of Person</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Now we switch to the Person model to define the attributes of Person, please click the <strong>Add child node</strong> button to enter the add child node interface. </p>]]></en_description>&#xd;
    </AddChildButton>&#xd;
    <AddChildDescriptors name="AddChildDescriptors" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildDescriptors"
         label="选择属性" descriptor="xworker.lang.MetaDescriptor3/@attribute" disablePreButton="true"
         disableNextButton="true" en_label="Select attribute">&#xd;
        <description><![CDATA[<h2>定义属性</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 请选择属性节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define attributes</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Please select an attribute node. </p>]]></en_description>&#xd;
    </AddChildDescriptors>&#xd;
    <AddChildFormAttribute name="AddChildFormAttribute" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildForm1"
         label="设置名称" attribute="xworker.lang.MetaDescriptor3/@attribute/@name" className="Text"
         disablePreButton="true" text="name" en_label="Set name">&#xd;
        <description><![CDATA[<h2>设置名称</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;设置属性的名称。</p>

<p>&nbsp;</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Setting name</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Set the name of the attribute. </p>

<p>&nbsp;</p>]]></en_description>&#xd;
    </AddChildFormAttribute>&#xd;
    <AddChildAddButton name="AddChildAddButton" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildAddButton"
         label="添加属性子节点" thingName="attribute" attributeName="name" disablePreButton="true"
         disableNextButton="true" en_label="Add attribute child node">&#xd;
        <description><![CDATA[<h2>添加name子节点</h2>

<p>&nbsp;&nbsp;&nbsp; 请点击添加按钮增加name属性子节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Add name child node</h2>

<p>&nbsp;&nbsp;&nbsp; Please click the Add button to add the name attribute sub-node. </p>]]></en_description>&#xd;
    </AddChildAddButton>&#xd;
    <InnerOutline name="InnerOutline" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@InnerOutline"
         label="选择name属性" selectThing="ognl:thing.getThing(&quot;attribute@0&quot;)" action="selectThing"
         disablePreButton="true" en_label="Select the name attribute">&#xd;
        <description><![CDATA[<h2>name属性</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;现在可以看到已经为Person模型添加了name属性子节点，这也就为类Person定义了name属性。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;点击<strong>下一步</strong>按钮转到模型ZhangSan，我们会发现ZhangSan此时也有了name属性。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>name attribute</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Now you can see that the name attribute child node has been added to the Person model, which also defines the name attribute for the class Person. </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Click the <strong>Next</strong> button to go to the model ZhangSan, we will find that ZhangSan also has a name attribute at this time. </p>]]></en_description>&#xd;
    </InnerOutline>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor3" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="转到张三" thing="var:zhangsan" en_label="Go to Zhang San"/>&#xd;
    <ThingForm _xmeta_id_="ThingForm1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor1"
         label="zhangsanName属性" disablePreButton="true" en_label="zhangsanName attribute">&#xd;
        <description><![CDATA[<h2>张三的name属性</h2>

<p>&nbsp;&nbsp;&nbsp; 这时我们可以看到ZhangSan已经有了name属性了。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Zhang San’s name attribute</h2>

<p>&nbsp;&nbsp;&nbsp; At this time, we can see that ZhangSan already has a name attribute. </p>]]></en_description>&#xd;
        <actions>&#xd;
            <GroovyAction name="afterInited" code="thingEditor.doAction(&quot;openThing&quot;, actionContext, &quot;thing&quot;, zhangsan);"/>&#xd;
        </actions>&#xd;
    </ThingForm>&#xd;
    <ThingEditorGuideInitor _xmeta_id_="ThingEditorGuideInitor21" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="切换到Person" thing="var:person" en_label="Switch to Person">&#xd;
        <actions descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor/@actions1">&#xd;
            <GroovyAction name="afterInited">&#xd;
                <code><![CDATA[import org.xmeta.Thing;

person.addChild(addAttribute("age", "", []));
person.addChild(addAttribute("sex", "select", ["男", "女"]));
person.addChild(addAttribute("birthDay", "datePick", []));
person.addChild(addAttribute("memo", "html", []));

def thingEditor = guide.getData("thingEditor");
thingEditor.doAction("refreshRoot", actionContext);

def addAttribute(name, inputtype, values){
    def attr = new Thing("xworker.lang.MetaDescriptor3/@attribute");
    attr.set("name", name);
    attr.set("inputtype", inputtype);
    for(value in values){ 
        def v = new Thing("xworker.lang.MetaDescriptor3/@attribute/@value");
        v.set("name", value);
        v.set("value", value);
        attr.addChild(v);
    }
    return attr;
}]]></code>&#xd;
            </GroovyAction>&#xd;
        </actions>&#xd;
    </ThingEditorGuideInitor>&#xd;
    <ThingEditor descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor"
         label="更多属性" disablePreButton="true" en_label="More attributes">&#xd;
        <description><![CDATA[<h2>更多属性</h2>

<p>&nbsp;&nbsp;&nbsp; 用同样的方法，我们可以为Person定义更多的属性。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>More attributes</h2>

<p>&nbsp;&nbsp;&nbsp; In the same way, we can define more attributes for Person. </p>]]></en_description>&#xd;
        <actions>&#xd;
            <GroovyAction name="afterInited">&#xd;
                <code><![CDATA[thingEditor.doAction("showFormEditor", actionContext);
thingEditor.doAction("openThing", actionContext, "thing", thing);]]></code>&#xd;
            </GroovyAction>&#xd;
        </actions>&#xd;
    </ThingEditor>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor31" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="转到张三" thing="var:zhangsan" en_label="Go to Zhangsan"/>&#xd;
    <ThingForm _xmeta_id_="ThingForm11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor1"
         label="zhangsanName属性" disablePreButton="true" en_label="The attribute of zhangsan's name">&#xd;
        <description><![CDATA[<h2>张三的name属性</h2>

<p>&nbsp;&nbsp;&nbsp; 可以看到张三现在已经有了更多的属性，并且有些属性也有自己的编辑方式，如果选择日期和下拉框等。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 关于属性的编辑方法可以参看更多其它教程，点击下一步按钮我们为Person定义行为。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Zhang San’s name attribute</h2>

<p>&nbsp;&nbsp;&nbsp; You can see that Zhang San now has more attributes, and some attributes also have their own editing methods, if you select the date and drop-down box, etc. </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; For the editing method of attributes, please refer to more other tutorials. Click the Next button to define the behavior for Person. </p>]]></en_description>&#xd;
        <actions>&#xd;
            <GroovyAction name="afterInited" code="thingEditor.doAction(&quot;openThing&quot;, actionContext, &quot;thing&quot;, zhangsan);"/>&#xd;
        </actions>&#xd;
    </ThingForm>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor22" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="切换到Person-添加行为" thing="var:person" en_label="Switch to Person-Add Behavior"
         th_nodeColor="RED"/>&#xd;
    <AddChildButton name="AddChildButton" _xmeta_id_="AddChildButton1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildButton"
         label="添加子节点" clickThenNext="true" disablePreButton="true" disableNextButton="true"
         en_label="Add child node">&#xd;
        <description><![CDATA[<h2>定义Person的行为</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 现在我们切换到Person模型来定义Person的行为，请点击<strong>添加子节点</strong>按钮进入添加子节点界面。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define the behavior of Person</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Now we switch to the Person model to define Person’s behavior, please click the <strong>Add child node</strong> button to enter the add child node interface. </p>]]></en_description>&#xd;
    </AddChildButton>&#xd;
    <AddChildDescriptors name="AddChildDescriptors" _xmeta_id_="AddChildDescriptors1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildDescriptors"
         label="选择动作" descriptor="xworker.lang.MetaDescriptor3/@actions" disablePreButton="true"
         disableNextButton="true" en_label="Select action">&#xd;
        <description><![CDATA[<h2>定义动作</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 请选择动作节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define actions</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Please select an action node. </p>]]></en_description>&#xd;
    </AddChildDescriptors>&#xd;
    <AddChildAddButton name="AddChildAddButton" _xmeta_id_="AddChildAddButton1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildAddButton"
         label="添加动作子节点" thingName="actions" attributeName="actions" disablePreButton="true"
         disableNextButton="true" en_label="Add action child node">&#xd;
        <description><![CDATA[<h2>添加动作子节点</h2>

<p>&nbsp;&nbsp;&nbsp; 请点击添加按钮增加动作子节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Add action child node</h2>

<p>&nbsp;&nbsp;&nbsp; Please click the Add button to add action sub-nodes. </p>]]></en_description>&#xd;
    </AddChildAddButton>&#xd;
    <InnerOutline name="InnerOutline" _xmeta_id_="InnerOutline1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@InnerOutline"
         label="选择动作" selectThing="ognl:thing.getThing(&quot;actions@0&quot;)" action="selectThing"
         disablePreButton="true" disableNextButton="true" en_label="Select Action">&#xd;
        <description><![CDATA[<h2>actions节点</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;actions节点用于定义模型的行为，它的子节点是具体的行为。注意，只有第一个actions子节点才是动作行为的定义节点，如有多个actions子节点，其它不是行为定义节点。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;点击<strong>下一步</strong>按钮转让我们添加一个sayHello方法。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>actions node</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;The actions node is used to define the behavior of the model, and its child nodes are specific behaviors. Note that only the first actions child node is the action definition node. If there are multiple actions child nodes, the others are not action definition nodes. </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Click the <strong>Next</strong> button to transfer us to add a sayHello method. </p>]]></en_description>&#xd;
    </InnerOutline>&#xd;
    <AddChildButton name="AddChildButton" _xmeta_id_="AddChildButton11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildButton"
         label="添加子节点" clickThenNext="true" disablePreButton="true" disableNextButton="true"
         en_label="Add child node">&#xd;
        <description><![CDATA[<h2>定义Person的行为</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 现在我们切换到Person模型来定义Person的行为，请点击<strong>添加子节点</strong>按钮进入添加子节点界面。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define the behavior of Person</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Now we switch to the Person model to define Person’s behavior, please click the <strong>Add child node</strong> button to enter the add child node interface. </p>]]></en_description>&#xd;
    </AddChildButton>&#xd;
    <AddChildDescriptors name="AddChildDescriptors" _xmeta_id_="AddChildDescriptors11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildDescriptors"
         label="选择Groovy" descriptor="xworker.lang.actions.GroovyAction" disablePreButton="true"
         disableNextButton="true" en_label="Choose Groovy">&#xd;
        <description><![CDATA[<h2>选择一个动作模型</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在动态模型里动作是可以运行的，相当于函数和方法，我们可以使用动作类模型来定义模型的行为。</p>

<p>&nbsp;&nbsp;&nbsp; 在XWorker里有很多动作类的模型，在这里我们使用GroovyAction模型，<strong>请在分组_actions.code下选择GroovyAction</strong>。</p>

<h3>GroovyAction</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; GroovyAction是Groovy脚本模型，可以用来编写Groovy脚本。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Select an action model</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;In the dynamic model, actions can be run, which are equivalent to functions and methods. We can use action models to define the behavior of the model. </p>

<p>&nbsp;&nbsp;&nbsp; There are many action models in XWorker. Here we use the GroovyAction model. <strong>Please select GroovyAction under the group_actions.code</strong>. </p>

<h3>GroovyAction</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; GroovyAction is a Groovy scripting model, which can be used to write Groovy scripts. </p>]]></en_description>&#xd;
    </AddChildDescriptors>&#xd;
    <AddChildFormAttribute name="AddChildFormAttribute" _xmeta_id_="AddChildFormAttribute2" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildForm1"
         label="设置名称" attribute="xworker.lang.actions.GroovyAction/@name1" className="Text"
         disablePreButton="true" text="sayHello" en_label="Set name">&#xd;
        <description><![CDATA[<h2>设置动作的名字</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;动作的名字也是模型行为的名字，在这里我们设置为sayHello。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Set the name of the action</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;The name of the action is also the name of the model action, here we set it to sayHello. </p>]]></en_description>&#xd;
    </AddChildFormAttribute>&#xd;
    <AddChildFormAttribute name="AddChildFormAttribute" _xmeta_id_="AddChildFormAttribute1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildForm1"
         label="设置代码" attribute="xworker.lang.actions.GroovyAction/@code1" className="StyledText"
         disablePreButton="true" text="println self.get(&quot;name&quot;) + &quot; say hello world!&quot;;"
         en_label="Set code">&#xd;
        <description><![CDATA[<h2>编写Groovy代码</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;可以在Groovy模型里直接编写Groovy代码。</p>

<p>&nbsp;&nbsp;&nbsp; 在这里self变量是方法的调用者本身， 即如果执行的ZhangSan这个模型的sayHello方法，那么self变量就是ZhangSan模型自己。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Write Groovy code</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;You can write Groovy code directly in the Groovy model. </p>

<p>&nbsp;&nbsp;&nbsp; Here the self variable is the caller of the method itself, that is, if the sayHello method of the ZhangSan model is executed, then the self variable is the ZhangSan model itself. </p>]]></en_description>&#xd;
    </AddChildFormAttribute>&#xd;
    <AddChildAddButton name="AddChildAddButton" _xmeta_id_="AddChildAddButton2" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildAddButton"
         label="添加sayHello" thingName="GroovyAction" attributeName="sayHello" disablePreButton="true"
         disableNextButton="true" en_label="Add sayHello">&#xd;
        <description><![CDATA[<h2>添加行为sayHello</h2>

<p>&nbsp;&nbsp;&nbsp; 请点击添加按钮增加sayHello动作子节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Add the behavior sayHello</h2>

<p>&nbsp;&nbsp;&nbsp; Please click the Add button to add the sayHello action child node. </p>]]></en_description>&#xd;
    </AddChildAddButton>&#xd;
    <ThingEditor _xmeta_id_="ThingEditor1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor"
         label="显示Person" disablePreButton="true" en_label="Show Person">&#xd;
        <description><![CDATA[<h2>完成方法定义</h2>

<p>&nbsp;&nbsp;&nbsp; 现在我们为Person定义了一个sayHello方法。</p>

<p>&nbsp;&nbsp;&nbsp; 点击下一步按钮我们切换到ZhangSan模型，使用ZhangSan模型来执行sayHello方法。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Complete the method definition</h2>

<p>&nbsp;&nbsp;&nbsp; Now we define a sayHello method for Person. </p>

<p>&nbsp;&nbsp;&nbsp; Click the Next button to switch to the ZhangSan model, and use the ZhangSan model to execute the sayHello method. </p>]]></en_description>&#xd;
        <actions descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ActionsCombo/@actions1">&#xd;
            <GroovyAction name="afterInited" code="thingEditor.doAction(&quot;openThing&quot;, actionContext, &quot;thing&quot;, thing);"/>&#xd;
        </actions>&#xd;
    </ThingEditor>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor32" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="转到张三" thing="var:zhangsan" en_label="Go to Zhangsan"/>&#xd;
    <ActionsCombo descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ActionsCombo"
         label="执行sayHello" disablePreButton="true" en_label="Execute sayHello">&#xd;
        <description><![CDATA[<h2>执行sayHello方法</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;请在动作下拉列表中选择sayHello，然后点击右边的<input alt="" src="icons/xworker/run24_24.gif" style="width: 16px; height: 16px;" type="image" />下拉菜单，任何一个方式都可以执行。</p>

<p>&nbsp;&nbsp;&nbsp; 如果执行正常，那么在控制台中应该可以看到打印出来的是&rdquo;ZhangSan say hello world!&ldquo;。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Execute the sayHello method</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Please select sayHello in the action drop-down list, and then click on the right <input alt="" src="icons/xworker/run24_24.gif" style="width: 16px; height: 16px;" type="image" /> drop-down menu, any method can be executed. </p>

<p>&nbsp;&nbsp;&nbsp; If the execution is normal, you should be able to see the printed out in the console is &rdquo;ZhangSan say hello world!&ldquo;. </p>]]></en_description>&#xd;
        <actions>&#xd;
            <GroovyAction name="afterInited" code="thingEditor.doAction(&quot;openThing&quot;, actionContext, &quot;thing&quot;, thing);"/>&#xd;
        </actions>&#xd;
    </ActionsCombo>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor221" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="切换到Person-添加子模型" thing="var:person" en_label="Switch to Person-Add submodel"
         th_nodeColor="RED"/>&#xd;
    <AddChildButton name="AddChildButton" _xmeta_id_="AddChildButton12" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildButton"
         label="添加子节点" clickThenNext="true" disablePreButton="true" disableNextButton="true"
         en_label="Add child node">&#xd;
        <description><![CDATA[<h2>定义子模型</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在动态模型里，每一个模型节点都是独立的对象，因此子模型也是独立的对象，定义Person的子模型的方法和定义Person是一致的。</p>

<p>&nbsp;&nbsp;&nbsp; 假设Person可以有Child，下面我们来定义Child子模型。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define submodels</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;In the dynamic model, each model node is an independent object, so the sub-model is also an independent object. The method of defining the sub-model of Person is the same as that of defining Person. </p>

<p>&nbsp;&nbsp;&nbsp; Assuming that Person can have Child, let's define Child child model below. </p>]]></en_description>&#xd;
    </AddChildButton>&#xd;
    <AddChildDescriptors name="AddChildDescriptors" _xmeta_id_="AddChildDescriptors12" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildDescriptors"
         label="选择事物" descriptor="xworker.lang.MetaDescriptor3/@thing" disablePreButton="true"
         disableNextButton="true" en_label="Choose things">&#xd;
        <description><![CDATA[<h2>定义事物</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 请选择事物节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define things</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Please select a thing node. </p>]]></en_description>&#xd;
    </AddChildDescriptors>&#xd;
    <AddChildFormAttribute name="AddChildFormAttribute" _xmeta_id_="AddChildFormAttribute21" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildForm1"
         label="设置名称" attribute="xworker.lang.MetaDescriptor3/@name" className="Text"
         disablePreButton="true" text="Child" en_label="Set name">&#xd;
        <description><![CDATA[<h2>设置子模型的名字</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在这里我们设置子模型的名字是Child。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Set the name of the submodel</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Here we set the name of the child model to Child. </p>]]></en_description>&#xd;
    </AddChildFormAttribute>&#xd;
    <AddChildFormAttribute name="AddChildFormAttribute" _xmeta_id_="AddChildFormAttribute11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildForm1"
         label="Set up inheritance" attribute="xworker.lang.MetaDescriptor3/@extends"
         className="Text" disablePreButton="true" text="ognl:person.getMetadata().getPath()">&#xd;
        <description><![CDATA[<h2>设置继承</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;由于Child也是Person（比如ZhangSan的子XiaoMing也是人），所以可以让Child继承Person，这样Child就有了Person的属性和行为。</p>

<p>&nbsp;&nbsp;&nbsp; 在这里由于教程创建的Person和ZhangSan是保存到内存中的，所以它们的路径是以_transient开头的。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Set inheritance</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Since Child is also a Person (for example, ZhangSan's child XiaoMing is also a person), so Child can inherit Person, so that Child has the attributes and behaviors of Person. </p>

<p>&nbsp;&nbsp;&nbsp; Here, since the Person and ZhangSan created in the tutorial are saved in memory, their path starts with _transient. </p>]]></en_description>&#xd;
    </AddChildFormAttribute>&#xd;
    <AddChildAddButton name="AddChildAddButton" _xmeta_id_="AddChildAddButton11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildAddButton"
         label="添加Child子节点" thingName="thing" attributeName="Child" disablePreButton="true"
         disableNextButton="true" en_label="Add child node">&#xd;
        <description><![CDATA[<h2>添加Child节点</h2>

<p>&nbsp;&nbsp;&nbsp; 请点击添加按钮添加Child子节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Add Child node</h2>

<p>&nbsp;&nbsp;&nbsp; Please click the Add button to add Child child nodes. </p>]]></en_description>&#xd;
    </AddChildAddButton>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor321" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="转到张三" thing="var:zhangsan" en_label="Go to Zhangsan"/>&#xd;
    <AddChildButton _xmeta_id_="AddChildButton112" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildButton"
         label="添加ZhangSan子节点" clickThenNext="true" disablePreButton="true" disableNextButton="true"
         en_label="Add ZhangSan child node">&#xd;
        <description><![CDATA[<h2>添加XiaoMing</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 当Person定义了Child子模型后，ZhangSan就可以添加Child了，这里我们演示添加ZhangSan的子XiaoMing。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 请点击<strong>添加子节点</strong>按钮进入下一步。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Add XiaoMing</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; After the Person defines the Child submodel, ZhangSan can add Child. Here we demonstrate adding the child XiaoMing of ZhangSan. </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Please click the <strong>Add child node</strong> button to proceed to the next step. </p>]]></en_description>&#xd;
        <actions descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ActionsCombo/@actions1">&#xd;
            <GroovyAction name="afterInited" code="thingEditor.doAction(&quot;openThing&quot;, actionContext, &quot;thing&quot;, thing);"/>&#xd;
        </actions>&#xd;
    </AddChildButton>&#xd;
    <AddChildDescriptors name="AddChildDescriptors" _xmeta_id_="AddChildDescriptors111" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildDescriptors"
         label="选择Child" descriptor="ognl:person.getThing(&quot;thing@0&quot;)" disablePreButton="true"
         disableNextButton="true" en_label="Choose Child">&#xd;
        <description><![CDATA[<h2>选择Child模型</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Child模型是Person定义的，请选择Child模型。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Select Child model</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Child model is defined by Person, please select Child model. </p>]]></en_description>&#xd;
    </AddChildDescriptors>&#xd;
    <AddChildFormAttribute name="AddChildFormAttribute" _xmeta_id_="AddChildFormAttribute22" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildForm1"
         label="设置名称" attribute="ognl:person.getThing(&quot;attribute@name&quot;)" className="Text"
         disablePreButton="true" text="XiaoMing" en_label="Set name">&#xd;
        <description><![CDATA[<h2>设置Child的名字</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在这里我们设置Child的名字为XiaoMing，同时我们也可以发现Child继承了Person的全部属性。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Set the name of Child</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Here we set the name of Child to XiaoMing, and we can also find that Child inherits all the attributes of Person. </p>]]></en_description>&#xd;
    </AddChildFormAttribute>&#xd;
    <AddChildAddButton name="AddChildAddButton" _xmeta_id_="AddChildAddButton111" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@AddChildAddButton"
         label="添加XaioMing子节点" thingName="Child" attributeName="XiaoMing" disablePreButton="true"
         disableNextButton="true" en_label="Add XaioMing child node">&#xd;
        <description><![CDATA[<h2>添加XiaoMing</h2>

<p>&nbsp;&nbsp;&nbsp; 请点击添加按钮添加XiaoMing子节点。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Add XiaoMing</h2>

<p>&nbsp;&nbsp;&nbsp; Please click the Add button to add XiaoMing sub-nodes. </p>]]></en_description>&#xd;
    </AddChildAddButton>&#xd;
    <ThingEditor name="ThingEditor" _xmeta_id_="ThingEditor2" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor"
         label="结束" disablePreButton="true" en_label="End">&#xd;
        <description><![CDATA[<h2>结束</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 到这里本教程就结束了，简单总结如下：</p>

<ul>
	<li><strong>面向对象</strong><br />
	动态模型是面向对象的，定义一个模型就是定义对象的类，类模型用于定义<strong>属性</strong>、<strong>行为</strong>和<strong>子模型</strong>等。<br />
	&nbsp;</li>
	<li><strong>都是模型</strong><br />
	对象、类和行为等等都是模型，编辑不同类型的模型的方法都是一样。<br />
	&nbsp;</li>
</ul>

<p>&nbsp;</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>End</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; This is the end of this tutorial. A brief summary is as follows:</p>

<ul>
<li><strong>Object Orientation</strong><br />
The dynamic model is object-oriented. To define a model is to define the class of the object. The class model is used to define <strong>attributes</strong>, <strong>behavior</strong>, and <strong>sub-models</strong>. <br />
&nbsp;</li>
<li><strong>All are models</strong><br />
Objects, classes, behaviors, etc. are all models, and the methods for editing different types of models are the same. <br />
&nbsp;</li>
</ul>

<p>&nbsp;</p>]]></en_description>&#xd;
    </ThingEditor>&#xd;
</ShellGuide>