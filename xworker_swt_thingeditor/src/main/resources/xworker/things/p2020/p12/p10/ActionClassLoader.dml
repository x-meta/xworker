<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="ActionClassLoader" descriptors="xworker.swt.xworker.ThingRegistThing" label="类加载器"
     type="thingDesc" group="dynamicModel.-990|Actions" icon="icons/html.png" th_sortWeight="900"
     simpleBrowser="true" en_label="ClassLoader" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>类加载器</h1>

<h2>1.动态模型中各种类加载器和继承关系</h2>

<p>&nbsp;&nbsp;&nbsp; 系统类加载器&nbsp;&lt;- World类加载器 &lt;- ThingManager类加载器 &lt;- Category类加载器 &lt;- 动作类加载器。</p>

<ul>
	<li><strong>系统类加载器</strong><br />
	Java系统启动时的类加载器。<br />
	&nbsp;</li>
	<li><strong>World类加载器</strong><br />
	继承于系统类加载器，类路径包含了World目录下<strong>lib</strong>和<strong>os</strong>下的类库。<br />
	&nbsp;</li>
	<li><strong>ThingManager类加载器</strong><br />
	继承于World类加载器，如果ThingManager是一个文件类型的，且包含things目录，那么可以包含同目录下的<strong>lib</strong>和<strong>os</strong>下的类库。<br />
	&nbsp;</li>
	<li><strong>Category类加载器</strong><br />
	默认使用ThingManager类加载器，用户可以设置Category类加载器，通过设置Category类加载器可以让该Category及子Category加载额外的Java库。<br />
	Category类加载器可以自行指定父类加载器，默认的父类加载器是Category类加载器模型所在的ThingManager类加载器。<br />
	&nbsp;</li>
	<li><strong>动作类加载器</strong><br />
	如果一个动作模型需要编译或加载类，那么会使用到动作类加载器。动作类加载器是针对单个动作模型的，并且在变更后也会重新生成新的类加载器。<br />
	如果在模型中编写Java或Groovy等代码，会用到类加载器，这些代码也应该是独立的，不要相互调用。</li>
</ul>

<h2>2.类加载器的基本知识</h2>

<h3>2.1.不同的类加载器加载类是不同的</h3>

<p>&nbsp;&nbsp;&nbsp; 比如类org.xmeta.Thing在同一个JVM中如果分别通过两个类加载器加载的，那么是两个独立的类。</p>

<p>&nbsp;&nbsp;&nbsp; 比如一个方法是void handle(Thing thing)，传入的是org.xmeta.Thing对象。如果两个类加载器分别加载了类org.xmeta.Thing，第一个类加载器生成的Thing的实例对象，传入到第二个类加载器中加载的代码里执行handle方法则会报类型错误。</p>

<h3>2.2.双亲委派模式</h3>

<p>&nbsp;&nbsp;&nbsp; Java的类加载采用所谓的双亲委派模式，简单来说就是类优先使用父类加载器加载，如果父类加载器没有加载成功，才会使用子类加载器加载。</p>

<p>&nbsp;&nbsp;&nbsp; 因此如果想要同时使用某个API的不同版本，即API的类名都是相同的，那么可以把不同版本的类库分别放到不同的ThingManager或Category下。此时需要注意它们生成的对象的类型是不同的，不能相互转化。但如果在Groovy这样的脚本如果不引用类而直接使用对象那么是可以混用的。</p>

<h3>2.3.类加载器的作用范围</h3>

<p>&nbsp;&nbsp;&nbsp; 如同上面类加载器的名字，比如ThingManager类加载器只应用于当前ThingManager下的模型，Category类加载器只应用于已设置的Category下的模型。</p>

<p>&nbsp;&nbsp;&nbsp; 虽然类加载器有作用范围，但是对应的模型是可以用在任何地方的。比如ThingManager A下的模型可以在ThingManager B下的模型调用，但ThingManager B下的模型里不能直接使用ThingMangager A加载的类。</p>

<h2>3.Category类加载器</h2>

<p>&nbsp;&nbsp;&nbsp; Category类加载器可以动态创建类加载器，一个Category类加载器也可以应用于多个Category或应用到其它Category类加载器上。因此需要动态加载类库的可以通过Category类加载器来实现。</p>

<p>&nbsp;&nbsp;&nbsp; Category类加载器的模型是<strong>xworker.lang.CategoryClassLoader</strong>模型来设置，可以设置目录、jar文件或通过Maven的依赖等设置。&nbsp;Category类加载器的实例可以注册到xworker.lang.CategroyClassLoaderIndex下。</p>
]]></description>
</QuickFunction>