<?xml version='1.0' encoding='utf-8'?>

<ShellGuide name="DebugTutorials" descriptors="xworker.swt.guide.ShellGuide" label="调试" en_label="Debug"
     en_group="-20000|Dynamic Model" th_createIndex="true" th_registThing="child|xworker.lang.util.indexs.ShellGuideIndex"
     group="-20000|动态模型" th_sortWeight="1100">&#xd;
    <actions>&#xd;
        <getIDEShell name="getMaskComposite" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIDEShell"/>&#xd;
        <getIdeActionContext name="getActionContext" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIdeActionContainer1"/>&#xd;
    </actions>&#xd;
    <Guide label="打开调试器" description="&lt;p>打开调试器。&lt;/p>" en_label="Open the debugger" en_description="&lt;p>Open the debugger. &lt;/p>">&#xd;
        <actions>&#xd;
            <ValueFactory name="finished" type="boolean" value="true"/>&#xd;
            <ValueFactory name="getDelay" type="long" value="0"/>&#xd;
            <GroovyAction name="init">&#xd;
                <code><![CDATA[import xworker.util.XWorkerUtils;

def compositeThing = world.getThing("xworker.ide.worldexplorer.swt.actions.DebugInfoEditor/@mainComposite");
XWorkerUtils.ideOpenComposite(compositeThing)]]></code>&#xd;
            </GroovyAction>&#xd;
        </actions>&#xd;
    </Guide>&#xd;
    <Guide name="Guide" _xmeta_id_="Guide1" label="简介" en_label="Introduction">&#xd;
        <description><![CDATA[<h2>调试</h2>

<p>&nbsp;&nbsp;&nbsp; 本教程将讲述如何调试模型。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Debug</h2>

<p>&nbsp;&nbsp;&nbsp; This tutorial will describe how to debug the model. </p>]]></en_description>&#xd;
    </Guide>&#xd;
    <Guide name="java" label="Java调试" en_label="Java debugging">&#xd;
        <description><![CDATA[<h2>使用Java调试</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker是一个Javau应用，如需要详细的调试那么推荐使用Java的调试。可以在Eclipse等IDE中以debug的方式启动模型应用，然后在IDE中调试。</p>

<h3>Groovy等脚本语言的调试</h3>

<p>&nbsp;&nbsp;&nbsp; Groovy等脚本执行时会保存到&lt;xworker_home&gt;/work/actionSources目录下，可以把它作为Java项目的源。这样可以在Eclipse等IDE中打开脚本，设置断点等。</p>

<h3>如何在Java中启动模型程序</h3>

<p>&nbsp;&nbsp;&nbsp; 可以到XWorker的主页<a href="javascript:invoke('url:https://www.xworker.org/do?sc=xworker.app.orgweb.web.Index&amp;id=1692')">https://www.xworker.org/do?sc=xworker.app.orgweb.web.Index&amp;id=1692</a>查看相关文档和教程。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Use Java to debug</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker is a Javau application. If you need detailed debugging, it is recommended to use Java debugging. You can start the model application in the debug mode in an IDE such as Eclipse, and then debug it in the IDE. </p>

<h3>Debugging of scripting languages such as Groovy</h3>

<p>&nbsp;&nbsp;&nbsp; When Groovy and other scripts are executed, they will be saved to the &lt;xworker_home&gt;/work/actionSources directory, which can be used as the source of the Java project. In this way, scripts can be opened in IDEs such as Eclipse, and breakpoints can be set. </p>

<h3>How to start the model program in Java</h3>

<p>&nbsp;&nbsp;&nbsp; You can go to XWorker's homepage <a href="javascript:invoke('url:https://www.xworker.org/do?sc=xworker.app.orgweb.web.Index&amp; id=1692')">https://www.xworker.org/do?sc=xworker.app.orgweb.web.Index&amp;id=1692</a> to view related documents and tutorials. </p>]]></en_description>&#xd;
    </Guide>&#xd;
    <Guide name="log" label="使用日志" en_label="Usage log">&#xd;
        <description><![CDATA[<h2>Executor</h2>

<p>&nbsp;&nbsp;&nbsp; 如果要输出日志，建议使用XWorker的Executor。</p>

<p>&nbsp;&nbsp;&nbsp; Executor可以实现应用的隔离。由于动态模型常用于实时编程，且所有应用都属于同一个系统，这样日志会混在一起。使用Executor可以解决该问题，可以让模型在指定的执行器中执行，这样在执行器中只看到该模型的日志和请求。</p>

<pre class="brush:java;">
import xworker.lang.executor.Executor

static final String TAG = XXX.class.getName();

Executor.info(TAG, &quot;This is a log&quot;):
</pre>

<p>&nbsp;&nbsp;&nbsp; Executor的日志方法采用slf4j的规则。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Executor</h2>

<p>&nbsp;&nbsp;&nbsp; If you want to output logs, it is recommended to use XWorker's Executor. </p>

<p>&nbsp;&nbsp;&nbsp; Executor can realize application isolation. Since the dynamic model is often used for real-time programming, and all applications belong to the same system, the logs will be mixed together. Using Executor can solve this problem, and the model can be executed in the specified executor, so that only the logs and requests of the model can be seen in the executor. </p>

<pre class="brush:java;">
import xworker.lang.executor.Executor

static final String TAG = XXX.class.getName();

Executor.info(TAG, &quot;This is a log&quot;):
</pre>

<p>&nbsp;&nbsp;&nbsp; Executor's log method adopts the rules of slf4j. </p>]]></en_description>&#xd;
    </Guide>&#xd;
    <Guide name="openAction" label="打开动作" en_label="Open action">&#xd;
        <description><![CDATA[<h2>打开动作模型</h2>

<p>&nbsp;&nbsp;&nbsp; 在日志里，尤其是错误堆栈里，可以找到动作的模型路径或类名，拷贝模型路径或类名之后，在XWorker的打开模型对话框里可以打开相关动作。</p>

<pre class="brush:plain;">
	at org.xmeta.Thing.doAction(Thing.java:707)
	at org.xmeta.Thing$doAction$16.call(Unknown Source)
	at <strong>xworker.ide.db.dbindex.actions.ThingIndexUpdater.p1635071115.doUpdate</strong>.run(doUpdate.groovy:40)
	at xworker.actions.GroovyAction.run(GroovyAction.java:196)
	at sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)</pre>

<p>&nbsp;&nbsp;&nbsp; 如上面的错误堆栈中，动作的类名是<strong>xworker.ide.db.dbindex.actions.ThingIndexUpdater.p1635071115.doUpdate。</strong></p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Open the action model</h2>

<p>&nbsp;&nbsp;&nbsp; In the log, especially in the error stack, you can find the model path or class name of the action. After copying the model path or class name, you can open the related action in the Open Model dialog box of XWorker. </p>

<pre class="brush:plain;">
at org.xmeta.Thing.doAction(Thing.java:707)
at org.xmeta.Thing$doAction$16.call(Unknown Source)
at <strong>xworker.ide.db.dbindex.actions.ThingIndexUpdater.p1635071115.doUpdate</strong>.run(doUpdate.groovy:40)
at xworker.actions.GroovyAction.run(GroovyAction.java:196)
at sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)</pre>

<p>&nbsp;&nbsp;&nbsp; As in the error stack above, the class name of the action is <strong>xworker.ide.db.dbindex.actions.ThingIndexUpdater.p1635071115.doUpdate. </strong></p>]]></en_description>&#xd;
    </Guide>&#xd;
    <Guide name="debuger" label="模型调试器" activeControlThing="xworker.ide.worldexplorer.swt.actions.DebugInfoEditor/@mainComposite"
         en_label="Model debugger">&#xd;
        <description><![CDATA[<h2>模型调试器</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker也编写一个模型调试工具，可以设置模型的执行断点、查看动作的性能以及录制各线程中动作的执行情况等等。</p>

<p>&nbsp;&nbsp;&nbsp; 关于模型调试器的文档可以参看XWorker的主页<a href="javascript:invoke('url:https://www.xworker.org/do?sc=xworker.app.orgweb.web.Index&amp;id=1507')">https://www.xworker.org/do?sc=xworker.app.orgweb.web.Index&amp;id=1507</a>。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Model debugger</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker also writes a model debugging tool, which can set the execution breakpoint of the model, view the performance of the action, and record the execution of the action in each thread, etc. </p>

<p>&nbsp;&nbsp;&nbsp; For the documentation of the model debugger, please refer to the XWorker homepage<a href="javascript:invoke('url:https://www.xworker.org/do?sc=xworker.app. orgweb.web.Index&amp;id=1507')">https://www.xworker.org/do?sc=xworker.app.orgweb.web.Index&amp;id=1507</a>. </p>]]></en_description>&#xd;
        <actions>&#xd;
            <RefAction name="getActiveControlParent" refActionPath="xworker.things.p2020.p07.p09.DebugTutorials/@debuger/@actions/@getMaskComposite"/>&#xd;
        </actions>&#xd;
    </Guide>&#xd;
    <Guide name="summary" label="总结" en_label="Summary">&#xd;
        <description><![CDATA[<p><strong>&nbsp;总结</strong></p>

<ul>
	<li>XWorker是一个Java应用，可以在Eclipse等IDE用调试。</li>
	<li>建议使用Executor来输出日志。</li>
	<li>在日志中，可以根据动作的类名直接打开对应的模型。</li>
	<li>可以使用模型调试器。</li>
</ul>

<p>&nbsp;&nbsp;</p>]]></description>&#xd;
        <en_description><![CDATA[<p><strong>&nbsp;Summary</strong></p>

<ul>
<li>XWorker is a Java application that can be debugged in IDEs such as Eclipse. </li>
<li>It is recommended to use Executor to output logs. </li>
<li>In the log, you can directly open the corresponding model according to the class name of the action. </li>
<li>You can use the model debugger. </li>
</ul>

<p>&nbsp;&nbsp;</p>]]></en_description>&#xd;
    </Guide>&#xd;
</ShellGuide>