<?xml version='1.0' encoding='utf-8'?>

<ShellGuide name="CodeAssist" descriptors="xworker.swt.guide.ShellGuide,xworker.swt.Widgets/@ShellGuide"
     label="代码辅助" en_label="Code Assist" en_group="-20000|Dynamic Model.1000|Action"
     th_registThing="child|xworker.lang.util.indexs.ShellGuideIndex" group="-20000|动态模型.1000|动作"
     th_sortWeight="800">&#xd;
    <Shell name="shell" _xmeta_id_="Shell" text="lang:d=代码辅助&amp;en=Code Assist">&#xd;
        <FillLayout name="FillLayout"/>&#xd;
        <ThingEditor name="thingEditor" useRootThing="true" saveActionContainer="true"/>&#xd;
    </Shell>&#xd;
    <Guide name="codeAssistBase" _xmeta_id_="Guide" label="代码辅助基础" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite/@mainSashForm/@editPartComposite"
         en_label="Code Assist Fundamentals">&#xd;
        <description><![CDATA[<h2>代码辅助</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker提供了简单的代码辅助功能，对文本框和文本区有效，主要功能如下。</p>

<ul>
	<li><strong>弹出变量的属性和方法选择框</strong><br />
	比如在当前示例的标签或代码的输入框，输入<strong>shell.</strong>，等待一下就会弹出shell变量的属性和方法的选择框。<br />
	&nbsp;</li>
	<li><strong>插入import xxx;代码</strong><br />
	在输入框或文本区中按Alt+p，那么会弹出导入类的窗口。注：第一次弹出会比较忙，因为会扫描所有的类。<br />
	&nbsp;</li>
	<li><strong>词选择列表</strong><br />
	在输入框或文本区中按Alt+h，那么会弹出可选词列表的窗口。<br />
	&nbsp;</li>
	<li><strong>设置变量的类型</strong><br />
	在输入框或文本区一个词的后面按Alt+t，会弹出设置该词的变量类型的窗口。成功设置后，在该词后输入&ldquo;.&rdquo;那么可以弹出属性和方法的选择框。</li>
</ul>

<h3>示例</h3>

<p>&nbsp;&nbsp;&nbsp; 可以在当前示例中的名称、标签和代码输入框中按以上的快捷键测试。<br />
&nbsp;&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Code assist</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker provides a simple code assist function, which is effective for text boxes and text areas. The main functions are as follows. </p>

<ul>
<li><strong>The variable attribute and method selection box pops up</strong><br />
For example, in the input box of the label or code of the current example, enter <strong>shell.</strong>, and after a while, a selection box for the properties and methods of the shell variable will pop up. <br />
&nbsp;</li>
<li><strong>Insert import xxx;code</strong><br />
Press Alt+p in the input box or text area, then the import class window will pop up. Note: The first pop-up will be busy, because all classes will be scanned. <br />
&nbsp;</li>
<li><strong>Word selection list</strong><br />
Press Alt+h in the input box or text area, then a window with a list of selectable words will pop up. <br />
&nbsp;</li>
<li><strong>Set the type of variable</strong><br />
Press Alt+t after a word in the input box or text area, and a window for setting the variable type of the word will pop up. After the setting is successful, enter "." after the word, and then you can pop up a selection box for properties and methods. </li>
</ul>

<h3>Example</h3>

<p>&nbsp;&nbsp;&nbsp; You can test by pressing the above shortcut keys in the name, label and code input boxes in the current example. <br />
&nbsp;&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>]]></en_description>&#xd;
        <actions>&#xd;
            <GroovyAction name="init">&#xd;
                <code><![CDATA[def thing = world.getThing("xworker.things.p2020.p04.p16.CodeAssistExample1/@init");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>&#xd;
            </GroovyAction>&#xd;
        </actions>&#xd;
    </Guide>&#xd;
    <Guide name="theory" label="设置变量" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite/@mainSashForm/@innerOutline"
         en_label="Set variable">&#xd;
        <description><![CDATA[<h2>定义变量</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在动态模型里，变量一般是有模型提供的，因此可以在相关模型上定义变量。</p>

<p>&nbsp;&nbsp;&nbsp; 比如在当前示例中，SWT的Shell模型定义了一个名字为模型名的，类型为org.eclipse.swt.widgets.Shell的变量。这样在代码辅助里就可以查看到该变量，也可以弹出属性和方法的选择框。</p>

<h3>VariablesDescs</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; VariablesDescs节点定义在MetaThing中，可以添加多个变量，也可以设置变量的作用范围等。VariablesDescs中的变量定义目前仅为代码辅助所使用。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; VariablesDescs的使用方法参看VariablesDesc及其子节点的文档。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Define variables</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;In dynamic models, variables are generally provided by the model, so variables can be defined on related models. </p>

<p>&nbsp;&nbsp;&nbsp; For example, in the current example, the Shell model of SWT defines a variable named org.eclipse.swt.widgets.Shell with the name of the model. In this way, the variable can be viewed in the code assist, and the selection box for properties and methods can also be popped up. </p>

<h3>VariablesDescs</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; The VariablesDescs node is defined in MetaThing, and multiple variables can be added, and the scope of the variable can also be set. The variable definitions in VariablesDescs are currently only used by code assistance. </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; For the use of VariablesDescs, please refer to the documentation of VariablesDesc and its child nodes. </p>]]></en_description>&#xd;
        <actions>&#xd;
            <GroovyAction name="init">&#xd;
                <code><![CDATA[def thing = world.getThing("xworker.swt.widgets.Shell/@VariablesDescs/@shell");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>&#xd;
            </GroovyAction>&#xd;
        </actions>&#xd;
    </Guide>&#xd;
    <Guide name="summary" label="总结" en_label="Summary">&#xd;
        <description><![CDATA[<p><strong>总结</strong></p>

<ul>
	<li>XWorker提供了简单的代码辅助功能。</li>
	<li>变量及其类型是由模型定义的。&nbsp;</li>
</ul>

<p>&nbsp;</p>]]></description>&#xd;
        <en_description><![CDATA[<p><strong>Summary</strong></p>

<ul>
<li>XWorker provides a simple code assist function. </li>
<li>Variables and their types are defined by the model. &nbsp;</li>
</ul>

<p>&nbsp;</p>]]></en_description>&#xd;
    </Guide>&#xd;
</ShellGuide>