<?xml version='1.0' encoding='utf-8'?>

<ShellGuide name="CreateAction" descriptors="xworker.swt.guide.ShellGuide" label="创建动作" en_label="Create Action"
     en_group="-20000|Dynamic Model.1000|Action" th_createIndex="true" th_registThing="child|xworker.lang.util.indexs.ShellGuideIndex"
     group="-20000|动态模型.1000|动作" th_sortWeight="500">&#xd;
    <actions>&#xd;
        <getIDEShell name="getMaskComposite" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIDEShell"/>&#xd;
        <getIdeActionContext name="getActionContext" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIdeActionContainer1"/>&#xd;
    </actions>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="打开ExplorerActions" thing="xworker.ide.worldexplorer.actions.ExplorerActions"
         en_label="Open ExplorerActions"/>&#xd;
    <FormAttribute name="FormAttribute" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@FormAttribute"
         label="创建动作" descriptor="xworker.lang.MetaDescriptor3" attribute="xworker.lang.MetaDescriptor3/@descriptors"
         className="Text" disablePreButton="true" en_label="Create action">&#xd;
        <description><![CDATA[<h2>创建动作</h2>

<p>&nbsp;&nbsp;&nbsp; 本教程以XWorker的ExplorerActions模型为例讲述如编写动作模型。</p>

<h3>xworker.lang.MetaDescriptor3</h3>

<p>&nbsp;&nbsp;&nbsp; 如ExplorerActions模型所示，动作模型一般使用xworker.lang.MetaDescriptor3来创建。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Create action</h2>

<p>&nbsp;&nbsp;&nbsp; This tutorial uses the ExplorerActions model of XWorker as an example to describe how to write an action model. </p>

<h3>xworker.lang.MetaDescriptor3</h3>

<p>&nbsp;&nbsp;&nbsp; As shown in the ExplorerActions model, the action model is generally created using xworker.lang.MetaDescriptor3. </p>]]></en_description>&#xd;
    </FormAttribute>&#xd;
    <FormAttribute name="FormAttribute" _xmeta_id_="FormAttribute1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@FormAttribute"
         label="注册" descriptor="xworker.lang.MetaThing" attribute="xworker.lang.MetaThing/@th_registThing"
         className="Label" disablePreButton="true" en_label="Register">&#xd;
        <description><![CDATA[<h2>注册</h2>

<p>&nbsp;&nbsp;&nbsp; 动作模型可以child的方式注册到xworker.lang.actions.Actions下，注册后其它模型也可以使用该动作了。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Register</h2>

<p>&nbsp;&nbsp;&nbsp; Action models can be registered under xworker.lang.actions.Actions in child mode, and other models can also use this action after registration. </p>]]></en_description>&#xd;
    </FormAttribute>&#xd;
    <FormAttribute name="FormAttribute" _xmeta_id_="FormAttribute11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@FormAttribute"
         label="注册我的子节点" descriptor="xworker.lang.MetaThing" attribute="xworker.lang.MetaThing/@registMyChilds"
         className="Label" disablePreButton="true" en_label="Register my child node">&#xd;
        <description><![CDATA[<h2>注册我的子节点</h2>

<p>&nbsp;&nbsp;&nbsp; Explorer动作有一组，因此选择注册我的子节点，即ExplorerActions不是动作模型，它的子节点才是。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Register my child node</h2>

<p>&nbsp;&nbsp;&nbsp; There is a set of Explorer actions, so I chose to register my child nodes, that is, ExplorerActions is not an action model, but its child nodes are. </p>]]></en_description>&#xd;
    </FormAttribute>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         thing="xworker.ide.worldexplorer.actions.ExplorerActions/@CreateThing"/>&#xd;
    <FormAttribute name="FormAttribute" _xmeta_id_="FormAttribute12" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@FormAttribute"
         label="selfAction" attribute="xworker.lang.MetaDescriptor3/@extends" className="Label"
         disablePreButton="true">&#xd;
        <description><![CDATA[<h2>对象类模型</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 新建的动作模型大多是对象类的动作模型，对象类的动作模型需要继承xworker.lang.actions.SelfAction。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Object class model</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; The newly created action models are mostly object-based action models, and the object-based action models need to inherit xworker.lang.actions.SelfAction. </p>]]></en_description>&#xd;
    </FormAttribute>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         thing="xworker.ide.worldexplorer.actions.ExplorerActions/@CreateThing/@actions/@run"/>&#xd;
    <InnerOutline name="InnerOutline" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@InnerOutline"
         label="run方法" disablePreButton="true" en_label="run method">&#xd;
        <description><![CDATA[<h2>run方法</h2>

<p>&nbsp;&nbsp;&nbsp; 动作模型需要实现run方法。</p>

<p>&nbsp;&nbsp;&nbsp; 可以用各种动作模型来实现，如果一个动作比较复杂或者对性能有要求，一般建议使用JavaAction来实现。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>run method</h2>

<p>&nbsp;&nbsp;&nbsp; The action model needs to implement the run method. </p>

<p>&nbsp;&nbsp;&nbsp; It can be implemented with various action models. If an action is more complicated or requires performance, it is generally recommended to use JavaAction to implement it. </p>]]></en_description>&#xd;
    </InnerOutline>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor12" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         thing="xworker.ide.worldexplorer.actions.ExplorerActions/@CreateThing/@actions/@getShell"/>&#xd;
    <InnerOutline name="InnerOutline" _xmeta_id_="InnerOutline1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@InnerOutline"
         label="attributeAndAction" disablePreButton="true">&#xd;
        <description><![CDATA[<h2>属性和动作</h2>

<p>&nbsp;&nbsp;&nbsp; 对象类的动作模型的属性通常是用来作为参数的，一般情况下建议创建相应的get方法，通过对应的get方法来获取参数的值。</p>

<p>&nbsp;&nbsp;&nbsp; 比如当前选中的getShell方法对应的属性是shell。</p>

<h3>定义对应方法的作用</h3>

<p>&nbsp;&nbsp;&nbsp; 由于模型是像XML这样的数据，所以属性的值通常是字符串，而动作需要的参数可能是其它类型，也有可能是获取变量上下文中的变量等，这样只有属性的情况下设置参数的难度就比较高，也不自由。</p>

<p>&nbsp;&nbsp;&nbsp; 为了解决通过属性设置参数的问题，我们可以定义相对应的get方法，其中这些get方法可以使用动作分组_actions.thingaction下的动作，这些动作能够从属性上取值，根据值返回对应类型的Java对象，还可以使用各种表达式。</p>

<p>&nbsp;&nbsp;&nbsp; 有了get方法后，我们也可以通过重写相应的get方法来返回参数，这样就完全解决了参数设置的问题。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Attributes and actions</h2>

<p>&nbsp;&nbsp;&nbsp; The properties of the action model of the object class are usually used as parameters. Generally, it is recommended to create the corresponding get method, and obtain the value of the parameter through the corresponding get method. </p>

<p>&nbsp;&nbsp;&nbsp; For example, the attribute corresponding to the currently selected getShell method is shell. </p>

<h3>Define the role of the corresponding method</h3>

<p>&nbsp;&nbsp;&nbsp; Since the model is data like XML, the value of the attribute is usually a string, and the parameters required by the action may be other types, or it may be the variable in the variable context, etc., so that only In the case of attributes, the difficulty of setting parameters is relatively high, and it is not free. </p>

<p>&nbsp;&nbsp;&nbsp; In order to solve the problem of setting parameters through attributes, we can define the corresponding get methods, where these get methods can use the actions under the action group _actions.thingaction, which can be taken from the attributes Value, returns the Java object of the corresponding type according to the value, and various expressions can also be used. </p>

<p>&nbsp;&nbsp;&nbsp; With the get method, we can also rewrite the corresponding get method to return parameters, which completely solves the problem of parameter setting. </p>]]></en_description>&#xd;
    </InnerOutline>&#xd;
</ShellGuide>