<?xml version="1.0" encoding="utf-8"?>

<ShellGuide name="UsingAction" descriptors="xworker.swt.Widgets/@ShellGuide" label="使用动作"
     en_label="Action Commons" en_group="-20000|Dynamic Model.1000|Action" th_registThing="child|xworker.lang.util.indexs.ShellGuideIndex"
     group="-20000|动态模型.1000|动作" th_sortWeight="700">
    <Shell name="shell" _xmeta_id_="Shell" text="lang:d=使用动作&amp;en=Using Action" H_SCROLL="true">
        <FillLayout name="FillLayout"></FillLayout>
        <ThingEditor name="thingEditor" saveActionContainer="true"></ThingEditor>
    </Shell>
    <Guide name="introduce" label="简介">
        <description><![CDATA[<h2>使用动作</h2>

<p>&nbsp;&nbsp;&nbsp; 本教程将要介绍使用动作中的常用知识。</p>
]]></description>
    </Guide>
    <Guide name="groovyAction" label="GroovyAction" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite">
        <description><![CDATA[<p><strong>GroovyAction</strong></p>

<p>&nbsp;&nbsp;&nbsp; GroovyAction是XWorker中最常用的脚本类模型，如需要写脚本建议使用GroovyAction。</p>
]]></description>
        <actions>
            <GroovyAction name="init">
                <code><![CDATA[def thing = world.getThing("xworker.things.p2020.p04.p15.ActionCommonsExamples/@GroovyAction");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>
            </GroovyAction>
        </actions>
    </Guide>
    <Guide name="variables" _xmeta_id_="groovyAction1" label="定义变量" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite">
        <description><![CDATA[<p><strong>定义变量</strong></p>

<p>&nbsp;&nbsp;&nbsp; 可以使用动作来定义变量。</p>

<p>&nbsp;&nbsp;&nbsp; 方法是在动作下添加Variables子节点，Variables下的子节点会先执行，并把执行的结果作为变量保存到变量上下文中，这些变量的作用范围是当前动作及其子节点。</p>
]]></description>
        <actions>
            <GroovyAction name="init">
                <code><![CDATA[def thing = world.getThing("xworker.things.p2020.p04.p15.ActionCommonsExamples/@variables");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>
            </GroovyAction>
        </actions>
    </Guide>
    <Guide name="defineAction" label="定义动作" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite">
        <description><![CDATA[<p><strong>定义动作</strong></p>

<p>&nbsp;&nbsp;&nbsp; 有的时候需要在Groovy脚本中引用其它动作模型，可以通过动作定义来实现，方法是添加ActionDefined子节点。</p>

<p>&nbsp;&nbsp;&nbsp; 比如当前示例中，在ActionDefined下添加了md5动作，此时在Groovy脚本中可以通过下面的代码使用该动作。</p>

<pre class="brush:groovy;">
println md5(actionContext, &quot;message&quot;, &quot;hello world&quot;);</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></description>
        <actions>
            <GroovyAction name="init">
                <code><![CDATA[def thing = world.getThing("xworker.things.p2020.p04.p15.ActionCommonsExamples/@defineActions");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>
            </GroovyAction>
        </actions>
    </Guide>
    <Guide name="ActionListener" _xmeta_id_="defineAction1" label="动作监听器" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite">
        <description><![CDATA[<p><strong>动作监听器</strong></p>

<p>&nbsp;&nbsp;&nbsp; 动作监听器可以监听动作的执行，动作监听器有init、success和exception三个方法，分别在动作的执行前、执行成功和异常时执行。</p>

<p>&nbsp;&nbsp;&nbsp; 动作监听器常用于资源管理，动作监控和调试等等，可以实现面向切面的编程。</p>

<p>&nbsp;&nbsp;&nbsp; 在当前的示例中，使用了DataSouceActionContext，DataSouceActionContext负责获取数据库的jdbc连接和释放，在动作中可以直接使用con（java.sql.Connection)对象，而无需关心何时释放它。</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
]]></description>
        <actions>
            <GroovyAction name="init">
                <code><![CDATA[def thing = world.getThing("xworker.things.p2020.p04.p15.ActionCommonsExamples/@actionListener");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>
            </GroovyAction>
        </actions>
    </Guide>
    <Guide name="switch" label="动作Switch" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite">
        <description><![CDATA[<p><strong>动作Switch</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果在动作编辑表单的Return标签页，设置了Switch返回值=true，那么动作执行后会把返回值转化成String，执行对应的子节点。</p>

<p>&nbsp;&nbsp;&nbsp; 比如当前的示例中，Groovy脚本随机返回字符串case0或case1，会执行对应的子节点。</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
]]></description>
        <actions>
            <GroovyAction name="init">
                <code><![CDATA[def thing = world.getThing("xworker.things.p2020.p04.p15.ActionCommonsExamples/@switch");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>
            </GroovyAction>
        </actions>
    </Guide>
    <Guide name="saveReturn" _xmeta_id_="switch1" label="保存返回值" activeControlThing="xworker.ide.worldexplorer.swt.dataExplorerParts.ThingEditor/@rightComposite/@contentComposite">
        <description><![CDATA[<p><strong>保存返回值</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果在动作编辑表单的Return标签页，设置了保存返回值=true，并设置了保存的返回值变量名称，那么会把动作的返回值保存到当前的局部变量范围中。</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
]]></description>
        <actions>
            <GroovyAction name="init">
                <code><![CDATA[def thing = world.getThing("xworker.things.p2020.p04.p15.ActionCommonsExamples/@saveReturn");
thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>
            </GroovyAction>
        </actions>
    </Guide>
    <Guide name="performance" label="性能">
        <description><![CDATA[<p><strong>性能</strong></p>

<p>&nbsp;&nbsp;&nbsp; 动态模型的优点是把各种API包装成模型，通过模型可以方便快速的使用它们，缺点是动态模型是解释执行的，因此性能要比直接写Java代码低。</p>

<p><strong>性能测试</strong></p>

<pre class="brush:java;">
public static int inc(int x){
    return x + 1;
}

public static void test(){
    int count = 10000000;
    long start = System.currentTimeMillis();
    int value = 1;
    for(int i=0; i&lt;count; i++){
        value = inc(value);
    }
    System.out.println(&quot;java method execute time : &quot; + (System.currentTimeMillis() - start) + &quot;, count=&quot; + count  + &quot;, value=&quot; + value);
}</pre>

<p>&nbsp;&nbsp;&nbsp; 如上面的代码，测试是执行1千万次inc(int x)，而inc的代码是对x加1操作。</p>

<p>&nbsp;&nbsp;&nbsp; <strong>测试结果如下：</strong></p>

<table border="1" cellpadding="1" cellspacing="1" style="width: 500px;">
	<tbody>
		<tr>
			<td>java</td>
			<td>10毫秒</td>
			<td>执行test()方法。</td>
		</tr>
		<tr>
			<td>java method invoke</td>
			<td>60毫秒</td>
			<td>先获取inc的Method对象，通过Method.invoke()方法。</td>
		</tr>
		<tr>
			<td>JavaAction</td>
			<td>4150毫秒</td>
			<td>使用JavaAction模型调用Java代码。</td>
		</tr>
		<tr>
			<td>GroovyAction</td>
			<td>14013毫秒</td>
			<td>使用GroovyAction模型执行Groovy脚本。</td>
		</tr>
	</tbody>
</table>

<p><strong>性能建议</strong></p>

<ul>
	<li>对性能要求比较高的算法或者复杂模块建议使用Java编写，通过JavaAction调用这些API。&nbsp;&nbsp;</li>
	<li>大多数情况下可以直接使用GroovyAction，大多数情况下GroovyAction的性能也是足够的。</li>
</ul>

<p>&nbsp; &nbsp;</p>
]]></description>
    </Guide>
    <Guide name="summary" label="总结">
        <description><![CDATA[<p><strong>总结</strong></p>

<p>&nbsp;&nbsp;&nbsp; 在动态模型中，动作相当于方法和函数。以下常用是动作常用的功能。</p>

<ul>
	<li><strong>GroovyAction</strong><br />
	XWorker中最常用的脚本模型。&nbsp;</li>
	<li><strong>定义变量</strong><br />
	使用动作定义变量。</li>
	<li><strong>定义动作</strong><br />
	在动作中引用其它动作的方法。</li>
	<li><strong>动作监听器</strong><br />
	可以实现面向切面的编程，常用于资源管理、动作监控和调试等。</li>
	<li><strong>动作Switch</strong><br />
	可以把动作当作swtich...case来使用。</li>
	<li><strong>保存返回值</strong><br />
	可以把动作的执行结果保存到变量上下文中。</li>
</ul>

<p>&nbsp;</p>
]]></description>
    </Guide>
</ShellGuide>