<?xml version='1.0' encoding='utf-8'?>

<ShellGuide name="ActionTypes" descriptors="xworker.swt.guide.ShellGuide" label="动作分类" en_label="Action Types"
     en_group="-20000|Dynamic Model.1000|Action" th_createIndex="true" th_registThing="child|xworker.lang.util.indexs.ShellGuideIndex"
     group="-20000|动态模型.1000|动作" th_sortWeight="100">&#xd;
    <actions>&#xd;
        <getIDEShell name="getMaskComposite" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIDEShell"/>&#xd;
        <getIdeActionContext name="getActionContext" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIdeActionContainer1"/>&#xd;
    </actions>&#xd;
    <Guide name="Guide" label="动作分类" en_label="Action classification">&#xd;
        <description><![CDATA[<h2>动作分类</h2>

<p>&nbsp;&nbsp;&nbsp; 动作模型可以分为下面三类。</p>

<ul>
	<li><strong>原生动作</strong><br />
	原生动作是指该动作模型由引擎直接解释执行。&nbsp;&nbsp;<br />
	&nbsp;</li>
	<li><strong>语言类动作</strong><br />
	语言类动作是指可以在模型里编写代码的动作模型。如Groovy、Jython、Lua等等动作模型。<br />
	&nbsp;</li>
	<li><strong>对象类动作</strong><br />
	对象类动作模型本身也是对象，有自己的属性和方法等。在XWorker中对象类动作数量最多。</li>
</ul>

<p>&nbsp;&nbsp;</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Action classification</h2>

<p>&nbsp;&nbsp;&nbsp; Action models can be divided into the following three categories. </p>

<ul>
<li><strong>Native actions</strong><br />
Native action means that the action model is directly interpreted and executed by the engine. &nbsp;&nbsp;<br />
&nbsp;</li>
<li><strong>Language actions</strong><br />
Language actions are action models that can be coded in the model. Such as Groovy, Jython, Lua, etc. action models. <br />
&nbsp;</li>
<li><strong>Object actions</strong><br />
The object-like action model itself is also an object, with its own attributes and methods. The number of object actions is the largest in XWorker. </li>
</ul>

<p>&nbsp;&nbsp;</p>]]></en_description>&#xd;
    </Guide>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="打开Java动作" thing="xworker.example.thing.actions.JavaActionDemo" en_label="Open Java Action"/>&#xd;
    <ThingEditor name="ThingEditor" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor"
         label="JavaAction" disablePreButton="true">&#xd;
        <description><![CDATA[<h2>JavaAction</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker所使用的动态模型引擎是使用Java实现的，JavaAction是引擎支持的唯一原生动作。</p>

<p>&nbsp;&nbsp;&nbsp; 当前教程已经打开了一个JavaAction模型。</p>

<h3>主要功能</h3>

<ul>
	<li><strong>执行Java静态方法</strong><br />
	JavaAction的功能主要是执行Java方法，一般是执行Java的静态方法，参数一般固定为ActionContext。<br />
	&nbsp;</li>
	<li><strong>执行非静态Java方法</strong><br />
	JavaAction也可以执行非静态的Java方法，具体方法参看JavaAction的文档。<br />
	&nbsp;</li>
	<li><strong>编写Java代码（一般不建议）</strong><br />
	可以在JavaAction中直接编写Java代码，模型引擎会自动编译和执行它。</li>
</ul>]]></description>&#xd;
        <en_description><![CDATA[<h2>JavaAction</h2>

<p>&nbsp;&nbsp;&nbsp; The dynamic model engine used by XWorker is implemented in Java, and JavaAction is the only native action supported by the engine. </p>

<p>&nbsp;&nbsp;&nbsp; The current tutorial has opened a JavaAction model. </p>

<h3>Main functions</h3>

<ul>
<li><strong>Execute Java static method</strong><br />
The function of JavaAction is mainly to execute Java methods, generally static methods of Java, and the parameters are generally fixed to ActionContext. <br />
&nbsp;</li>
<li><strong>Execute non-static Java methods</strong><br />
JavaAction can also execute non-static Java methods. Refer to the JavaAction documentation for specific methods. <br />
&nbsp;</li>
<li><strong>Write Java code (generally not recommended)</strong><br />
You can write Java code directly in JavaAction, and the model engine will automatically compile and execute it. </li>
</ul>]]></en_description>&#xd;
    </ThingEditor>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="打开Groovy" thing="xworker.example.thing.actions.GroovyActionDemo" en_label="Open Groovy"/>&#xd;
    <ThingEditor name="ThingEditor" _xmeta_id_="ThingEditor1" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor"
         label="Groovy" disablePreButton="true">&#xd;
        <description><![CDATA[<h2>语言类动作</h2>

<p>&nbsp;&nbsp;&nbsp; 教程已经自动打开了一个GroovyAction模型，GroovyAction是语言类动作，可以在模型里直接编写Groovy代码。</p>

<p>&nbsp;&nbsp;&nbsp; XWorker还支持其它语言，如BeanShell、Lua、Jythong、JavaScript和Scala等，不过一般<strong>建议使用GroovyAction</strong>。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Language actions</h2>

<p>&nbsp;&nbsp;&nbsp; The tutorial has automatically opened a GroovyAction model. GroovyAction is a language-based action. You can write Groovy code directly in the model. </p>

<p>&nbsp;&nbsp;&nbsp; XWorker also supports other languages, such as BeanShell, Lua, Jythong, JavaScript and Scala, etc. However, it is generally recommended to use GroovyAction</strong>. </p>]]></en_description>&#xd;
    </ThingEditor>&#xd;
    <ThingEditorGuideInitor name="ThingEditorGuideInitor" _xmeta_id_="ThingEditorGuideInitor11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditorGuide"
         label="打开Jar" thing="xworker.example.util.deploy.ExportExecutableJarWithSpringLoader"
         en_label="Open Jar"/>&#xd;
    <ThingEditor name="ThingEditor" _xmeta_id_="ThingEditor11" descriptors="xworker.swt.guide.shellguidenodes.ThingEditorNodes/@ThingEditor"
         label="对象类动作" disablePreButton="true" en_label="Object action">&#xd;
        <description><![CDATA[<h2>对象类动作</h2>

<p>&nbsp;&nbsp;&nbsp; 教程已经自动打开了一个Jar打包的模型，它是一个对象类的动作。</p>

<p>&nbsp;&nbsp;&nbsp; 动作类模型的特点是它本身是作为对象的，它的属性一般用于设置参数，并且属性一般有对应的get方法，可以通过重写相关方法来自定义参数。</p>]]></description>&#xd;
        <en_description><![CDATA[<h2>Object actions</h2>

<p>&nbsp;&nbsp;&nbsp; The tutorial has automatically opened a Jar packaged model, which is an object-like action. </p>

<p>&nbsp;&nbsp;&nbsp; The characteristic of the action model is that it is itself an object, its attributes are generally used to set parameters, and attributes generally have corresponding get methods, which can be customized by rewriting related methods. </p>]]></en_description>&#xd;
    </ThingEditor>&#xd;
</ShellGuide>