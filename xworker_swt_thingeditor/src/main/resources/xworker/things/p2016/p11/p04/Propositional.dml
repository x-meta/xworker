%1478853966590
@
sname=Propositional
slabel=命题逻辑
stype=thingDesc
sgroup=-8000|功能模型.-800|人工智能.逻辑
sicon=icons/html.png
sth_sortWeight=-200
sstyledTextForInsert=parentContext.parentContext.codeText
Sdescription=
#$@text#$@
<h1>命题逻辑</h1>

<h2>1.概念</h2>

<p>&nbsp;&nbsp;&nbsp; 命题逻辑是一种简单的逻辑，它由原子命题和复合命题组成，其中复合命题由原子命题和逻辑运算符组成。</p>

<h3>1.1.原子命题</h3>

<p>&nbsp;&nbsp;&nbsp; 原子命题就是可以判断真假的东西，或可以表示为真假的东西。比如下雨、P、Q、R等，它们的值可以是真或假。</p>

<h3>1.2.规则</h3>

<p>&nbsp;&nbsp;&nbsp; 规则是原子命题之间的关系。比如下雨那么去图书馆。</p>

<p>&nbsp;&nbsp;&nbsp; 原子命题可以用操作符相连，从而形成规则，命题逻辑的操作符如下。</p>

<pre class="brush:plain;">
&amp;                      并且，如：下雨  &amp; 吃过饭，表示下雨了并且吃过饭了。
|                      或者，如：下雨 | 吃过饭，表示下雨了或者吃过饭了。
=&gt;                     蕴含，如：下雨 =&gt; 去图书馆，表示如果下雨那么就去图书馆。
&lt;=&gt;                    等价，如：下雨 &lt;=&gt; 去图书馆，表示如果下雨那么就去图书馆，如果去了图书馆那么就是下过雨的。
~                      否定，如：~ 下雨，表示不下雨。
()                     分组，如：（（下雨 &amp; 吃饭） | 休息），表示要么下雨并且吃饭，要么休息了。</pre>

<p>&nbsp;&nbsp;&nbsp; 命题逻辑的操作符的优先级是：~, &amp;, |, =&gt;, &lt;=&gt; // (2)。为了规则表达的清楚，避免因操作符的优先级而导致困难，建议多用括号。</p>

<h3>1.3.事实</h3>

<p>&nbsp;&nbsp;&nbsp; 就是原子命题的真假。比如是否下过雨，对原子命题赋值，即确定是否下过雨这个事实。</p>

<h3>1.4.知识库</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;规则和事实一起构成了知识库，在使用命题逻辑推理前都需要准备好知识库。</p>

<h3>1.5.模型</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;模型和知识库在某些方面是等价的，模型也可以看作是已经确定了事实的知识库，即有些院子命题已经有真假的判断了。</p>

<h2>2.命题逻辑用法</h2>

<h3>2.1.Ask（推理）</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;即推理一个语句的真假，比如知识库是下雨去图书馆，现在下雨了，那么就可以问(Ask)去图书馆吗？命题逻辑会返回真或假的值。</p>

<h3>2.2.FindModel(找满足条件的模型）</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;比如现在想要去图书馆，那么应该满足什么条件呢？可以用FindModel方法找到一个满足条件的模型。</p>

<p>&nbsp;&nbsp;&nbsp; 如果有很多规则和前提，那么可以满足模型的条件有很多，返回的结果是随机的，即随机找到一个可以满足的条件的模型。</p>

<h3>2.3.验证是否是可满足的</h3>

<p>&nbsp;&nbsp;&nbsp; 即验证一个语句是否可以为真。比如吃饭或不吃饭，它总是满足的，永为真，而吃饭并且不吃饭，它是不可满足的，总是为假。。</p>
#$@text#$@
sdescriptors=xworker.swt.xworker.ThingRegistThing
sinheritDescription=false
sth_createIndex=true
sth_registThing=command|xworker.command.Root
sth_registMyChilds=false
sth_registDisabled=false
sth_mark=false
