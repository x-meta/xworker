%1563851244062
@
sname=DataStoreListener
slabel=数据对象监听器
stype=thingDesc
sgroup=DataStore
sicon=icons/html.png
sstyledTextForInsert=parentContext.parentContext.codeText
suseTargetThingDoc=false
ssimpleBrowser=true
Sdescription=
#$@text#$@
<h1>数据仓库监听器</h1>

<h2>1.作用</h2>

<p>&nbsp;&nbsp;&nbsp; 是Thing，可以通过DataStore.doAction(&quot;addListener&quot;, actionContext, &quot;listener&quot;, listener)方法注册到数据仓库中，用于监听数据仓库的事件。</p>

<h2>2.相关事件</h2>

<ul>
	<li><strong>void onInsert(Thing store, int index, List&lt;DataObject&gt; records)</strong><br />
	数据仓库插入和数据对象。<br />
	&nbsp;</li>
	<li><strong>void onLoaded(Thing store, List&lt;DataObject&gt; records)</strong><br />
	数据仓库加载了数据对象。<br />
	&nbsp;</li>
	<li><strong>void onReconfig(Thing store)</strong><br />
	数据仓库重新配置了数据对象。<br />
	&nbsp;</li>
	<li><strong>void onRemove(Thing store, List&lt;DataObject&gt; records)</strong><br />
	数据仓库移除了数据对象。<br />
	&nbsp;</li>
	<li><strong>void onUpdate(Thing store, List&lt;DataObject&gt; records)</strong><br />
	数据仓库中的数据对象更新了。<br />
	&nbsp;</li>
	<li><strong>void beforeLoad(Thing store);</strong><br />
	数据仓库加载前的事件。</li>
</ul>

<h2>&nbsp;3.Java接口</h2>

<p>&nbsp;&nbsp;&nbsp; 可以通过Java接口来实现数据仓库的监听器，方法是实现&nbsp;xworker.app.view.swt.data.DataStoreListener接口，然后用数据仓库直接绑定该对象。</p>

<p>&nbsp;&nbsp;&nbsp; 可以通过xworker.app.view.swt.data.ThingDataStoreListener.attach(Thing store, DataStoreListener listener, ActionContext actionContext)方法主动绑定到数据仓库上。</p>

<p>&nbsp;</p>
#$@text#$@
sen_label=DataStoreListener
sdescriptors=xworker.swt.xworker.ThingRegistThing
sinheritDescription=false
sth_createIndex=true
sth_registThing=command|xworker.app.view.swt.data.DataStore
sth_registMyChilds=false
sth_registDisabled=false
sth_fileMonitor=false
sth_mark=false
