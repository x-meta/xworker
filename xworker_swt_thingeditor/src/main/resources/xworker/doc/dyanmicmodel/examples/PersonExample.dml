<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="PersonExample" descriptors="xworker.swt.xworker.ThingRegistThing" label="Person"
     type="thingDemo" path="xworker.doc.dyanmicmodel.examples.Zhangsan" group="dynamicModel.-10000|defineModel"
     icon="icons/application.png" th_sortWeight="-10000" simpleBrowser="true" th_createIndex="true"
     th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>Person示例</h1>

<p>&nbsp;&nbsp;&nbsp; Person示例是一个典型的定义模型的例子，即先定义类模型（Person)，然后使用类模型(Person)编写对象模型（Zhangsan）。</p>

<h2>1.演示说明</h2>

<p>&nbsp;&nbsp;&nbsp; 演示界面有三个标签页。</p>

<ul>
	<li><strong>对象</strong><br />
	展示和编辑的是对象模型，这里是模型Zhangsan。</li>
	<li><strong>主类</strong><br />
	展示和编辑的是类模型，这里是模型Person。</li>
	<li><strong>类和继承</strong><br />
	展示的是Zhangsan这个对象的类和继承等。</li>
</ul>

<h2>2.模型的基本元素</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 即定义一个模型时有哪些素是经常定义的，这些可以在<strong>主类</strong>标签页中查看。</p>

<h3>&nbsp;2.1.属性</h3>

<p>&nbsp;&nbsp;&nbsp; 一个模型可以有属性，其中属性可以设置编辑方式。在这里定义类name、age、sex和description等属性。</p>

<h3>2.2.子节点</h3>

<p>&nbsp;&nbsp;&nbsp; 即子模型。在本实例里Child子模型继承了父模型Person，因此Child也是一个Person，Child也有Person的属性和行为。</p>

<h3>2.3.行为</h3>

<p>&nbsp;&nbsp;&nbsp; 定义在actions下，定义了一个sayHello行为。由于Child继承了Person，因此Child也有actions行为。</p>

<h3>2.4.菜单</h3>

<p>&nbsp;&nbsp;&nbsp; 菜单一般用于编辑器，在编辑模型时可以展示出来。菜单定义见主类标签页中Person模型的sswtMenus子节点，在对象标签页中可以查看和运行参看，见编辑器工具栏上方的Personc菜单。</p>
]]></description>
</QuickFunction>