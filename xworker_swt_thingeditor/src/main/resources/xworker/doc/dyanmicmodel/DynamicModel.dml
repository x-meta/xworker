^1614823884349
@
sname
DynamicModel
slabel
动态模型
stype
thingDesc
sgroup
dynamicModel
sgroupDescriptor
true
sicon
icons/html.png
sth_sortWeight
-9000
sstyledTextForInsert
parentContext.parentContext.codeText
suseTargetThingDoc
false
ssimpleBrowser
true
Sdescription
#$@text#$@
<h1>动态模型</h1>

<p>&nbsp; &nbsp; &nbsp;本文介绍动态模型编程的基本概念和方法。</p>

<h2>1.基本概念</h2>

<h3>1.1.使用结构化的数据编程</h3>

<p>&nbsp; &nbsp; 动态模型使用结构化的数据来编程，这些结构化的数据可以用XML来表示，也可以简单的理解为可以使用XML来编程。</p>

<p>&nbsp; &nbsp; 如下面的XMl就是一个动态模型的程序。</p>

<pre class="brush:xml;">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;

&lt;Shell name=&quot;shell&quot; descriptors=&quot;xworker.swt.widgets.Shell&quot; text=&quot;TestShell&quot;&gt;
    &lt;FillLayout name=&quot;FillLayout&quot;&gt;&lt;/FillLayout&gt;
    &lt;Browser name=&quot;Browser&quot; url=&quot;https://www.xworker.org&quot;&gt;&lt;/Browser&gt;
    &lt;GroovyAction name=&quot;init&quot;  code=&quot;println &amp;quot;Hello World!&amp;quot;;&quot;&gt;&lt;/GroovyAction&gt;
&lt;/Shell&gt;</pre>

<h3>1.2.编程理念</h3>

<p>&nbsp; &nbsp; 动态模型使用结构化的数据编程。它的基本理念是当我们使用数据时，可以根据不同的场合和需要赋予它不同的角色，我们根据赋予数据的角色来理解和使用数据。</p>

<h3>1.3.数据的基本角色</h3>

<p>&nbsp; &nbsp; 动态模型赋予结构化数据的基本角色。</p>

<h4>1.3.1.模型和事物</h4>

<p>&nbsp; &nbsp; 模型和事物是一种抽象的角色，是数据的一种称呼，一般用于想要用数据表示一些东西但并不需要明确是什么东西的时候。</p>

<p>&nbsp; &nbsp; 在动态模型里数据可以使用XML来表示，动态模型认为每一个XML的节点都可以是独立的模型和事物，因此一个模型可以包含属性（XML节点中的属性）和子模型（XML的子节点）。</p>

<h4>1.3.2.动作</h4>

<p>&nbsp; &nbsp; 动态模型是一种编程方法，因此我们需要数据能够变成可执行的程序。在动态模型里假设每一个模型都可以转化为动作，而动作是可以执行的，类似方法和函数。</p>

<h4>1.3.3.对象</h4>

<p>&nbsp; &nbsp; 由于一个模型可以含有属性和子模型（1.3.1.的定义），而任何模型都可以执行（1.3.2的假设），因此可以把一个模型的某些子节点当成它的行为，从而可以把一个模型看作是对象。</p>

<h4>1.3.4.描述者</h4>

<p>&nbsp; &nbsp; 描述者是用于描述模型的模型，描述者也可以看作是模型的类，用于描述模型的结构和行为。在动态模型里，一个模型的描述者可以是任意模型，并且模型继承描述者的行为。</p>

<h4>1.3.5.继承</h4>

<p>&nbsp; &nbsp; 在动态模型里，一个模型可以继承除了自身之外的其它任意模型，从而继承被继承模型的行为。</p>

<h3>1.4.面向对象</h3>

<p>&nbsp; &nbsp; 在动态模型里，通过赋予数据的基本角色，动态模型实际上实现了面向对象的编程方法。这里就不详细解释了，具体可以在编程时体会。</p>

<h2>2.动态模型的实现</h2>

<p>&nbsp; &nbsp; 实现动态模型编程的核心是如何解释执行一个模型的方法。</p>

<ol>
	<li>在上面的1.3.1.中假设了任意模型都可以转化为动作来执行，具体方法是把模型作为对象，去执行对象的为run的方法。</li>
	<li>模型的run方法还是模型（见1.3.3，使用模型的子节点来定义模型的行为），因此执行run方法回到步骤1.</li>
	<li>以上是一个递归的方法，如要让递归能够终止，那么一些模型是由引擎直接执行的。</li>
</ol>

<p>&nbsp; &nbsp; 以上是如何执行一个模型的方法。比如XWorker的动态模型引擎是使用Java实现的，模型名为JavaAction的模型是由引擎直接执行的，即执行JavaAction并不需要执行它的run方法，而是由引擎直接解释执行。</p>

<pre class="brush:xml;">
&lt;JavaAction name=&quot;run&quot; useOuterJava=&quot;true&quot; outerClassName=&quot;test.HelloWorld&quot; methodName=&quot;run&quot;/&gt;</pre>

<p>&nbsp; &nbsp; 比如上面的模型（XML）执行时并不需要执行它的run方法，它是由引擎直接执行的，引擎会根据它的属性定义执行Java类test.HelloWorld的run()方法。</p>

<h2>3.引擎常用API</h2>

<p>&nbsp; &nbsp; 通过示例介绍引擎常用的API，也可以进一步了解动态模型中的概念。</p>

<h3>3.1.示例</h3>

<p>&nbsp; &nbsp; 可以参看<a href="do?sc=xworker.app.orgweb.web.Index&amp;id=1828">示例HelloWorld</a>。</p>

<h4>3.1.1.描述者模型</h4>

<p>&nbsp; &nbsp; &nbsp;描述者模型充当类的作用，用于定义模型的结构和行为。模型可以和Java代码放在一起，描述者模型的路径是/test/HelloWorldModel.dml。</p>

<pre class="brush:xml;">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
 
&lt;thing name=&quot;Println&quot;&gt;
    &lt;actions&gt;
        &lt;JavaAction name=&quot;run&quot; useOuterJava=&quot;true&quot; outerClassName=&quot;test.HelloWorld&quot; methodName=&quot;run&quot;/&gt;
    &lt;/actions&gt;
&lt;/thing&gt;</pre>

<ul>
	<li><strong>&lt;thing name=&quot;Println&quot;&gt;</strong><br />
	定义模型，相当于定义一个类。&nbsp;<br />
	&nbsp;&nbsp;</li>
	<li><strong>&lt;actions&gt;</strong><br />
	该节点用于定义行为，它下面的子节点是行为的定义。<br />
	&nbsp;</li>
	<li><strong>&lt;JavaAction name=&quot;run&quot; .../&gt;</strong><br />
	用于定义名为run的行为，这里用于调用Java类test.HelloWorld的run()方法。</li>
</ul>

<h4>3.1.2.对象模型</h4>

<p>&nbsp; &nbsp; 动态模型是面向对象的，最终的模型程序通常是类（描述者）的实例对象模型，也就是通常使用描述者创建的模型。示例中对象模型的路径是/test/HelloWorldExample.dml。</p>

<pre class="brush:xml;">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
 
&lt;Println descriptors=&quot;test.HelloWorldModel&quot; message=&quot;Hello World!&quot;/&gt;</pre>

<ul>
	<li><strong>descriptors</strong><br />
	描述者属性，用于指定模型使用那些模型作为它的描述者（类)。<br />
	上面的模型的描述者是test.HelloWorldModel，因此它也继承了模型test.HelloWorldModel定义的行为run。&nbsp; &nbsp;&nbsp;</li>
</ul>

<h4>3.1.3.Java代码</h4>

<p>&nbsp; &nbsp; XWorker的动态模型引擎是使用Java实现的，可以在Java代码中调用模型。它的路径是/test/HelloWorld.java。</p>

<pre class="brush:java;">
package test;
 
import org.xmeta.ActionContext;
import org.xmeta.Thing;
import org.xmeta.World;
 
public class HelloWorld {
    //HelloWorldModel.dml模型调用该方法，见模型&lt;JavaAction name=&quot;run&quot; useOuterJava=&quot;true&quot; outerClassName=&quot;test.HelloWorld&quot; methodName=&quot;run&quot;/&gt;
    public static void run(ActionContext actionContext){
        //模型实例，相当于Java的this变量的作用
        Thing self = actionContext.getObject(&quot;self&quot;);
 
        System.out.println(self.getString(&quot;message&quot;));
    }
 
    public static void main(String[] args){
        //获取动态模型引擎的实例并初始化
        World world = World.getInstance();
        world.init(&quot;.&quot;);
 
        //获取HelloWorldExample模型
        Thing helloWorldExample = world.getThing(&quot;test.HelloWorldExample&quot;);
        //执行HelloWorldExample的run方法
&nbsp;      //实际引擎根据模型&lt;JavaAction name=&quot;run&quot;.../&gt;执行HelloWorld.java的public static void run(ActionContext actionContext)方法。
        helloWorldExample.doAction(&quot;run&quot;, new ActionContext());
    }
}</pre>

<h3>3.2.引擎常用API</h3>

<h4>3.2.1.初始化引擎</h4>

<p>&nbsp; &nbsp; 可以通过World类来初始化模型引擎，其中path参数是模型应用的目录，一般是引擎的工作目录，目录下可以包含类库、模型库和生成的临时文件等。</p>

<pre class="brush:java;">
import org.xmeta.World;

//Java项目可以使用当前目录作为引擎的工作目录
World world = World.getInstance();
world.init(&quot;.&quot;);</pre>

<h4>3.2.2.获取模型</h4>

<p>&nbsp; &nbsp; 可以通过模型的路径来获取一个模型.模型的路径规则基本同Java类名的规则，只是模型的路径还可以包含子节点的路径。如test.HelloWorldModel是描述者模型的路径。</p>

<pre class="brush:java;">
import org.xmeta.Thing;

//获得描述者模型
Thing thing = world.getThing(&quot;test.HelloWorldModel&quot;);</pre>

<h4>3.2.3.作为结构化数据时相关的API</h4>

<pre class="brush:java;">
//获取属性的值
Object value = thing.get(&quot;name&quot;);

//设置属性的值
thing.set(&quot;name&quot;, &quot;Hello World&quot;);

//获取属性的值并转为相应的类型，支持常见类型的转换
//一般是getX(Stirng name)方法，其中X是对应的类型
int age = thing.getInt(&quot;age&quot;);  
//注：属性未必需要在模型（XML)中定义，但序列化存储时未定义的属性不会被保存到XML中

//获取模型的子节点
List&lt;Thing&gt; childs = thing.getChilds();</pre>

<h4>3.2.4.动作和行为</h4>

<p>&nbsp; &nbsp; 把模型转化为动作执行。</p>

<pre class="brush:as3;">
import org.xmeta.Thing;
import org.xmeta.Aciton;
import org.xmeta.ActionContext;

//获取HelloWorldExample模型
Thing helloWorldExample = world.getThing(&quot;test.HelloWorldExample&quot;);

//转化为动作
Action helloWorldAction = helloWorldExample .getAction();

//执行动作
//动作和对象的行为执行时需要动作上下文(ActionContext)，动作上下文用于管理变量和线程状态等
helloWorldAction.run(new ActionContext());</pre>

<p>&nbsp; &nbsp; 把模型作为对象，执行它的行为</p>

<pre class="brush:java;">
import org.xmeta.Thing; 
import org.xmeta.ActionContext;

//获取HelloWorldExample模型
Thing helloWorldExample = world.getThing(&quot;test.HelloWorldExample&quot;);
//执行HelloWorldExample的run方法
helloWorldExample.doAction(&quot;run&quot;, new ActionContext());
</pre>

<p>&nbsp; &nbsp; 传参数的方法，动作执行时也适用。</p>

<pre class="brush:java;">
//传参，方法1，参数名+参数值，可以设置多个，参数名和参数值成对出现
Object result = thing.doAction(&quot;xxx&quot;, new ActionContext(), &quot;p1&quot;, p1Value,  &quot;p2&quot;, p2Value...);

//传参，方法2，通过ActionContext设置参数
ActionContext actionContext = new ActionContext();
actionContext.peek().put(&quot;p1&quot;, p1Value);
actionContext.peek().put(&quot;p2&quot;, p2Value);
......
Object result = thing.doAction(&quot;xxx&quot;, actionContext);
</pre>

<p>&nbsp; &nbsp; 动作和行为的区别，执行动作时模型不会把自己作为self变量传入到动作上下文中，而作为对象执行时会。因此动作执行时没有self变量（或self变量不是它自己），而执行对象的行为时self变量是对象模型自身。</p>

<p>&nbsp; &nbsp; 如下面代码中self变量，在执行HelloWorldExample模型对象的run行为时，self变量时HelloWorldExample模型自身。</p>

<pre class="brush:java;">
    public static void run(ActionContext actionContext){
        //模型实例，相当于Java的this变量的作用
        Thing self = actionContext.getObject(&quot;self&quot;);
 
        System.out.println(self.getString(&quot;message&quot;));
    }</pre>

<h4>3.2.4.面向对象相关的方法</h4>

<pre class="brush:java;">
//获取首要描述者(类）
Thing descriptor = thing.getDescriptor();

//获取所有描述者（类）
List&lt;Thing&gt; descriptors = thing.getDescriptors();

//获取事物名，相当于Java的object.getClass().getSimpleName()
String thingName = thing.getThingName();

//获取继承列表
List&lt;Thing&gt; extends = thing.getExtends();

//获取动作行为列表
List&lt;Thing&gt; actions = thing.getActionThings();</pre>

<p>&nbsp;&nbsp;</p>
#$@text#$@
sen_label
Dynamic Model
sdescriptors
xworker.swt.xworker.ThingRegistThing
sinheritDescription
false
sth_createIndex
true
sth_registThing
child|xworker.example.ExamplesIndex
sth_registMyChilds
false
sth_registDisabled
false
sth_noThingRegistViewer
false
sth_fileMonitor
false
sth_mark
false
sth_registQueryOnlySelf
false
