^1624260405224
@
sname
ThreadStauts
slabel
线程状态
stype
thingDesc
sgroup
dynamicModel.-990|Actions.variables
sgroupDescriptor
false
sicon
icons/html.png
sth_sortWeight
50
sstyledTextForInsert
parentContext.parentContext.codeText
suseTargetThingDoc
false
ssimpleBrowser
true
Sdescription
#$@text#$@
<h1>线程状态</h1>

<h2>1.简介</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;线程状态用于语法类的模型，比如Break、Coninue、Return、Try/Catch等等。</p>

<p>&nbsp;&nbsp;&nbsp; 语法类模型通常不是单独生效的。比如Break和Continue一般是在循环里使用的，因此Break和Continue模型一般是循环模型的子节点，这些模型在循环模型被调用。</p>

<h2>2.While模型示例</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; While模型是循环，循环时执行子节点，如果子节点执行后变量上下文的线程状态设置为BREAK或CONTINUE等等时，则会做相应的处理。While模型的实现的示意代码如下。</p>

<pre class="brush:java;">
//判断是否满足while的条件
while(IfCreator.checkCondition(self, actionContext)){ 
        //执行子节点
	for (Thing child : childActions.getChilds()) {
		Action action = world.getAction(child);
		if (action != null) {
			result = action.run(actionContext, null, true);
		}

                //判断子节点的线程状态
		int sint = actionContext.getStatus();
		if (sint != ActionContext.RUNNING) {
			break;
		}
	}

	//判断循环的状态
	if (actionContext.getStatus() == ActionContext.BREAK) {
		actionContext.setStatus(ActionContext.RUNNING);
		break;
	} else if (actionContext.getStatus() == ActionContext.CONTINUE) {
		actionContext.setStatus(ActionContext.RUNNING);
		continue;
	} else if (actionContext.getStatus() != ActionContext.RUNNING) {
		break;
	}
}</pre>

<h2>3.Break模型实例</h2>

<p>&nbsp;&nbsp;&nbsp; Break模型用于设置线程的状态为BREAK。代码如下。</p>

<pre class="brush:java;">
public class BreakCreator {
	public static void run(ActionContext context){	    
        context.setStatus(ActionContext.BREAK);
    }	

}</pre>

<p>&nbsp;</p>
#$@text#$@
sen_label
Thread Stauts
sdescriptors
xworker.content.QuickContent
sinheritDescription
false
sth_createIndex
true
sth_registThing
child|xworker.example.ExamplesIndex
sth_registMyChilds
false
sth_registDisabled
false
sth_noThingRegistViewer
false
sth_fileMonitor
false
Sen_description
#$@text#$@
<h1>Thread status</h1>

<h2>1. Introduction</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Thread state is used in the model of grammar classes, such as Break, Coninue, Return, Try/Catch, etc. </p>

<p>&nbsp;&nbsp;&nbsp; Syntax models are usually not effective separately. For example, Break and Continue are generally used in a loop, so the Break and Continue models are generally child nodes of the loop model, and these models are called in the loop model. </p>

<h2>2.While model example</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; The While model is a loop. The child node is executed during the loop. If the thread state of the variable context is set to BREAK or CONTINUE after the child node is executed, the corresponding processing will be done. The schematic code for the realization of the While model is as follows. </p>

<pre class="brush:java;">
//Determine whether the conditions of while are met
while(IfCreator.checkCondition(self, actionContext)){
        //Execute child node
for (Thing child: childActions.getChilds()) {
Action action = world.getAction(child);
if (action != null) {
result = action.run(actionContext, null, true);
}

                //Determine the thread status of the child node
int sint = actionContext.getStatus();
if (sint != ActionContext.RUNNING) {
break;
}
}

//Judging the status of the loop
if (actionContext.getStatus() == ActionContext.BREAK) {
actionContext.setStatus(ActionContext.RUNNING);
break;
} else if (actionContext.getStatus() == ActionContext.CONTINUE) {
actionContext.setStatus(ActionContext.RUNNING);
continue;
} else if (actionContext.getStatus() != ActionContext.RUNNING) {
break;
}
}</pre>

<h2>3.Break model example</h2>

<p>&nbsp;&nbsp;&nbsp; The Break model is used to set the thread status to BREAK. code show as below. </p>

<pre class="brush:java;">
public class BreakCreator {
public static void run(ActionContext context){
        context.setStatus(ActionContext.BREAK);
    }

}</pre>

<p>&nbsp;</p>
#$@text#$@
sth_mark
false
sth_registQueryOnlySelf
false
