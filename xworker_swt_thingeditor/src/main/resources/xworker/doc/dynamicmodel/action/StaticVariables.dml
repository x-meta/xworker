^1627639205128
@
sname
StaticVariables
slabel
静态变量
stype
thingDesc
sgroup
dynamicModel.-990|Actions.variables
sgroupDescriptor
false
sicon
icons/html.png
sth_sortWeight
60
sstyledTextForInsert
parentContext.parentContext.codeText
suseTargetThingDoc
false
ssimpleBrowser
true
shideOutline
false
Sdescription
#$@text#$@
<h1>静态变量</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;动态模型没有静态变量的概念，如需要系统全局可见的静态变量，那么可以借助Java实现，或通过引擎的World和Thing对象。</p>

<h2>通过World</h2>

<p>&nbsp;&nbsp;&nbsp; 由于World只有一个实例且是静态的，所以保存到World上的变量可以起到静态变量的效果。</p>

<ul>
	<li><strong>void World.getIntance().setData(String key, Object value)</strong><br />
	设置一个变量。该变量不会被系统回收，因此要谨慎设置。<br />
	&nbsp;</li>
	<li><strong>Object World.getInstance().getData(String key)</strong><br />
	返回一个变量。如果没有设置过返回null。</li>
</ul>

<h2>通过Thing</h2>

<p>&nbsp;&nbsp;&nbsp; 通过模型的以下方法可以设置和获取变量。注以下方法都是成对出现的，在这里省去了对应get方法。如setXXXData(String key, Object value)，那么对应一个Object getXXXData(String key)方法。</p>

<ul>
	<li><strong>void thing.setData(String key, Object value)</strong><br />
	设置一个绑定到模型上的变量，当模型被回收时变量也会被系统回收。<br />
	&nbsp;&nbsp;</li>
	<li><strong>void thing.setCachedData(String key, Object value)</strong><br />
	设置一个绑定到模型上的变量，如果模型修改了，那么变量也失效了（返回null)。<br />
	&nbsp;</li>
	<li><strong>void thing.setThreadData(String key, Object value)</strong><br />
	设置一个绑定到模型上的且和线程绑定的变量。<br />
	&nbsp;</li>
	<li><strong>void thing.setStaticData(String key, Object value)</strong><br />
	设置一个放到World上的变量，其中键值是模型路径和key的组合。<br />
	&nbsp;</li>
	<li><strong>void thing.setStaticCachedData(String key, Object value)</strong><br />
	设置一个放到World上的变量，其中键值是模型路径和key的组合，并且当模型修改也失效了。<br />
	&nbsp;</li>
	<li><strong>void thing.setStaticThreadData(String key, Object value)</strong><br />
	设置一个放到World上且和线程绑定的变量，其中键值是模型路径和key的组合。<br />
	&nbsp;</li>
</ul>

<p>&nbsp;</p>
#$@text#$@
sen_label
Static & Temp Variables
sdescriptors
xworker.content.QuickContent
sinheritDescription
false
sth_createIndex
true
sth_registThing
child|xworker.example.ExamplesIndex
sth_registMyChilds
false
sth_registDisabled
false
sth_noThingRegistViewer
false
sth_fileMonitor
false
Sen_description
#$@text#$@
<h1>Static variables</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Dynamic models do not have the concept of static variables. If you need static variables that are globally visible in the system, you can use Java to implement them, or through the World and Thing objects of the engine. </p>

<h2>Pass World</h2>

<p>&nbsp;&nbsp;&nbsp; Since World has only one instance and is static, the variables saved to World can be used as static variables. </p>

<ul>
<li><strong>void World.getIntance().setData(String key, Object value)</strong><br />
Set a variable. This variable will not be recycled by the system, so it should be set carefully. <br />
&nbsp;</li>
<li><strong>Object World.getInstance().getData(String key)</strong><br />
Return a variable. If it has not been set, it returns null. </li>
</ul>

<h2>Through Thing</h2>

<p>&nbsp;&nbsp;&nbsp; Variables can be set and obtained through the following methods of the model. Note that the following methods all appear in pairs, and the corresponding get method is omitted here. For example, setXXXData(String key, Object value) corresponds to an Object getXXXData(String key) method. </p>

<ul>
<li><strong>void thing.setData(String key, Object value)</strong><br />
Set a variable bound to the model, and the variable will be recycled by the system when the model is recycled. <br />
&nbsp;&nbsp;</li>
<li><strong>void thing.setCachedData(String key, Object value)</strong><br />
Set a variable bound to the model. If the model is modified, the variable is invalid (returns null). <br />
&nbsp;</li>
<li><strong>void thing.setThreadData(String key, Object value)</strong><br />
Set a variable bound to the model and bound to the thread. <br />
&nbsp;</li>
<li><strong>void thing.setStaticData(String key, Object value)</strong><br />
Set a variable on the World, where the key value is a combination of the model path and key. <br />
&nbsp;</li>
<li><strong>void thing.setStaticCachedData(String key, Object value)</strong><br />
Set a variable on the World, where the key value is a combination of the model path and key, and when the model is modified, it also becomes invalid. <br />
&nbsp;</li>
<li><strong>void thing.setStaticThreadData(String key, Object value)</strong><br />
Set a variable that is placed on the World and bound to the thread, where the key value is a combination of the model path and the key. <br />
&nbsp;</li>
</ul>

<p>&nbsp;</p>
#$@text#$@
sth_mark
false
sth_registQueryOnlySelf
false
