^1627628043708
@
sname
GlobalVariables
slabel
全局变量
stype
thingDesc
sgroup
dynamicModel.-990|Actions.variables
sgroupDescriptor
false
sicon
icons/html.png
sth_sortWeight
10
sstyledTextForInsert
parentContext.parentContext.codeText
suseTargetThingDoc
false
ssimpleBrowser
true
shideOutline
false
Sdescription
#$@text#$@
<h1>全局变量</h1>

<p>&nbsp;&nbsp;&nbsp; 全局变量是指保存在动作上下文里最底层的栈层中的变量，由于最底层的栈层是所有线程共享的，且通常不会被弹出，因此只要动作上下文存在，这些变量就是存在的，因此把这些变量称为全局的。</p>

<h2>1.设置全局变量</h2>

<pre class="brush:groovy;">
import org.xmeta.ActionContext;

//创建动作上下文
ActionContext actionContext = new ActionContext();

//1.动作上下文刚创建时，put的变量时全局的。如果不能确保动作上下文刚创建的，
//即未执行过push()方法的，建议不要使用此方法设置变量
actionContext.put((String) key,(Objet) object);

//2.常规方法，可以通过g()函数返回最底层的栈层设置全局变量
actionContext.g().put((String) key, (Object ) object);
</pre>

<h2>2.使用全局变量</h2>

<pre class="brush:groovy;">
//如果要明确的使用全局变量，那么使用g()函数返回最底层的栈层
Object obj = actionContext.g().get((String) key);

//一般情况下，可以通过变量名直接获取，但也有可能获取的是局部变量或参数等
Object obj = actionContext.get((String) key);</pre>

<h2>&nbsp;&nbsp;&nbsp;</h2>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
sen_label
Global Variables
sdescriptors
xworker.content.QuickContent
sinheritDescription
false
sth_createIndex
true
sth_registThing
child|xworker.example.ExamplesIndex
sth_registMyChilds
false
sth_registDisabled
false
sth_noThingRegistViewer
false
sth_fileMonitor
false
Sen_description
#$@text#$@
<h1>Global variables</h1>

<p>&nbsp;&nbsp;&nbsp; Global variables refer to variables stored in the bottom stack layer in the action context. Since the bottom stack layer is shared by all threads and usually will not be popped up, so long as the action context Exist, these variables are there, so these variables are called global. </p>

<h2>1. Set global variables</h2>

<pre class="brush:groovy;">
import org.xmeta.ActionContext;

//Create action context
ActionContext actionContext = new ActionContext();

//1. When the action context is just created, the put variable is global. If you can’t ensure that the action context was just created,
//That is, if the push() method has not been executed, it is recommended not to use this method to set variables
actionContext.put((String) key,(Objet) object);

//2. Conventional method, you can set global variables by returning to the bottom layer of the stack through the g() function
actionContext.g().put((String) key, (Object) object);
</pre>

<h2>2. Use global variables</h2>

<pre class="brush:groovy;">
//If you want to explicitly use global variables, then use the g() function to return to the bottom stack
Object obj = actionContext.g().get((String) key);

//Under normal circumstances, it can be obtained directly by the variable name, but it is also possible to obtain local variables or parameters, etc.
Object obj = actionContext.get((String) key);</pre>

<h2>&nbsp;&nbsp;&nbsp;</h2>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
sth_mark
false
sth_registQueryOnlySelf
false
