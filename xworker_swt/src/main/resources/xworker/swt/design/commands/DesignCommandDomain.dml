<?xml version='1.0' encoding='utf-8'?>

<CommandDomain name="DesignCommandDomain" descriptors="xworker.lang.command.CommandDomain" label="SWT设计"
     en_label="SWT Designer">&#xd;
    <actions>&#xd;
        <GroovyAction name="getCommands">&#xd;
            <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.lang.executor.Executor;

def TAG = "xworker.swt.design.commands.DesignCommandDomain.p_1022320282.getCommands";
if(actionContext.get("control") == null || control.isDisposed()){
    Executor.warn(TAG, "Control is null or is disposed, no commands");
    return [];
}

def commands = [];
if(DesignTools.isAttribute(control)){
    //表单中的属性
    Executor.info(TAG, "Control is a attribute");
    addCommands(commands, "xworker.swt.design.commands.DesignCommandDomain/@controlCommands");    
}else if(DesignTools.hasLayout(control)){
    //一般容器，如Composite、Shell和Group等
    Executor.info(TAG, "Control is a composite");
    //容器
    addCommands(commands, "xworker.swt.design.commands.DesignCommandDomain/@commonContainer");    
    //控件公共
    addCommands(commands, "xworker.swt.design.commands.DesignCommandDomain/@controlCommands");    
    //一般命令
    addCommands(commands, "xworker.swt.design.commands.DesignCommandDomain/@commonCommands");
}else if(DesignTools.isComponent(control)){
    //组合控件
    Executor.info(TAG, "Control is a component");
    addCommands(commands, "xworker.swt.design.commands.DesignCommandDomain/@componentCommands");
}else{
    //一般控件
    Executor.info(TAG, "Control is a control");
    //控件公共
    addCommands(commands, "xworker.swt.design.commands.DesignCommandDomain/@controlCommands");    
    //一般命令
    addCommands(commands, "xworker.swt.design.commands.DesignCommandDomain/@commonCommands");
}

//添加公共的命令
commands.add(world.getThing("xworker.swt.design.commands.DesignCommandDomain/@CommonCommands/@actionContext"));
commands.add(world.getThing("xworker.swt.design.commands.DesignCommandDomain/@CommonCommands/@open"));
return commands;

def addCommands(commands, path){
    def thing = world.getThing(path);
    if(thing != null){
        commands.addAll(thing.getChilds("Command"));  
    }
}]]></code>&#xd;
        </GroovyAction>&#xd;
    </actions>&#xd;
    <PredefinedCommands name="controlCommands" label="控件公共">&#xd;
        <Command name="add listener" label="添加事件监听">&#xd;
            <description><![CDATA[<p>添加事件监听。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="getContents">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.swt.xwidgets.SelectContent;

def listenerNames = DesignTools.getUnregistedListeners(control);
def contents = [];
for(name in listenerNames){
    contents.add(new SelectContent(name));
}

return contents;]]></code>&#xd;
                </GroovyAction>&#xd;
                <GroovyAction name="onContent">&#xd;
                    <code><![CDATA[import org.eclipse.swt.SWT;
import xworker.swt.util.SwtUtils;
import xworker.swt.events.SwtListener;
import xworker.swt.design.Designer;
import org.xmeta.Thing;

def eventType = SwtUtils.getSWT(content);
if(eventType != SWT.NONE){
    def thing = Designer.getThing(control);
    
    def listener = new Thing("xworker.swt.widgets.Widget/@Event");
    listener.set("name", "on" + content);
    
    //默认使用Groovy
    def groovy = new Thing("xworker.lang.actions.Actions/@GroovyAction");
    listener.addChild(groovy);
    
    thing.addChild(listener);
    thing.save();
    
    def ac = Designer.getActionContext(control);
    listener.doAction("create", ac, "parent", control);
    
    command.setCommandThing(world.getThing("xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@editEventGroovy"));
    command.getParameter("thing").setResult(groovy);
    command.getParameter("ac").setResult(Designer.getActionContext(control));
        
    commandExecutor.checkStatus();
    return;
}

command.setResult(null);]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
        <Command name="remove listener" _xmeta_id_="add listener1" label="移除事件监听">&#xd;
            <description><![CDATA[<p>移除事件监听。只能移除当前控件模型定义的事件。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="getContents">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.swt.xwidgets.SelectContent;

def listenerNames = DesignTools.getRegistedListeners(control);
def contents = [];
for(name in listenerNames){
    contents.add(new SelectContent(name));
}

return contents;]]></code>&#xd;
                </GroovyAction>&#xd;
                <GroovyAction name="onContent">&#xd;
                    <code><![CDATA[import org.eclipse.swt.SWT;
import xworker.swt.util.SwtUtils;
import xworker.swt.events.SwtListener;
import xworker.swt.design.Designer;

def eventType = SwtUtils.getSWT(content);
if(eventType != SWT.NONE){
    def listeners = control.getListeners(eventType);
    for(listener in listeners){
        if(listener instanceof SwtListener){
            def thing = Designer.getThing(control);
            
            //控件移除事件
            control.removeListener(eventType, listener);
            //事物移除相关子节点
            def list = [];
            getParentThings(thing, listener.getThing(), list);
            if(list.get(list.size() - 1) == thing){
                //是控件的当前事物设置的事件
                list.get(0).removeChild(listener.getThing());
                thing.save();
            }
        }
    }
}
command.setResult(null);

//返回child的父节点的列表，如果父是thing那么终止
def getParentThings(thing, child, list){
    def parent = child.getParent();
    if(parent == thing){
        list.add(thing);
    }else if(parent != null){
        list.add(parent);
        getParentThings(thing, parent, list);
    }        
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
        <Command name="edit listener" _xmeta_id_="editEvent" label="编辑事件监听">&#xd;
            <description><![CDATA[<p>编辑事件监听。只能编辑当前控件模型定义的事件。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="getContents">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.swt.xwidgets.SelectContent;

def listenerNames = DesignTools.getRegistedListeners(control);
def contents = [];
for(name in listenerNames){
    contents.add(new SelectContent(name));
}

return contents;]]></code>&#xd;
                </GroovyAction>&#xd;
                <GroovyAction name="onContent">&#xd;
                    <code><![CDATA[import org.eclipse.swt.SWT;
import xworker.swt.util.SwtUtils;
import xworker.swt.events.SwtListener;
import xworker.swt.design.Designer;

def eventType = SwtUtils.getSWT(content);
if(eventType != SWT.NONE){
    def eventThing = null;
    def listeners = control.getListeners(eventType);
    for(listener in listeners){
        if(listener instanceof SwtListener){
            eventThing = listener.getThing();
            break;
        }
    }
    
    //println eventThing;
    if(eventThing != null){
        command.setCommandThing(world.getThing("xworker.swt.design.commands.DesignCommandDomain/@CommonCommands/@editThing"));
        command.getParameter("thing").setResult(eventThing);
        command.getParameter("ac").setResult(Designer.getActionContext(control));
        
        commandExecutor.checkStatus();
        return;
    }
}
command.setResult(null);

//返回child的父节点的列表，如果父是thing那么终止
def getParentThings(thing, child, list){
    def parent = child.getParent();
    if(parent == thing){
        list.add(thing);
    }else if(parent != null){
        list.add(parent);
        getParentThings(thing, parent, list);
    }        
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
        <Command name="edit listener groovy" _xmeta_id_="editEvent1" label="编辑事件监听Groovy">&#xd;
            <description><![CDATA[<p>编辑事件监听。只能编辑当前控件模型定义的事件。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="getContents">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.swt.xwidgets.SelectContent;

def listenerNames = DesignTools.getRegistedListeners(control);
def contents = [];
for(name in listenerNames){
    contents.add(new SelectContent(name));
}

return contents;]]></code>&#xd;
                </GroovyAction>&#xd;
                <GroovyAction name="onContent">&#xd;
                    <code><![CDATA[import org.eclipse.swt.SWT;
import xworker.swt.util.SwtUtils;
import xworker.swt.events.SwtListener;
import xworker.swt.design.Designer;
import org.xmeta.util.UtilString;

def eventType = SwtUtils.getSWT(content);
if(eventType != SWT.NONE){
    def eventThing = null;
    def listeners = control.getListeners(eventType);
    for(listener in listeners){
        if(listener instanceof SwtListener){
            eventThing = listener.getThing();
            break;
        }
    }
    
    def codeThing = null;
    if(eventThing != null && eventThing.getChilds().size() > 0){
        codeThing = eventThing.getChilds().get(0);
        if(!codeThing.isThingByName("Groovy")){
            codeThing == null;
        }
    }
    if(codeThing != null){
        command.setCommandThing(world.getThing("xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@editEventGroovy"));
        command.getParameter("thing").setResult(codeThing);
        command.getParameter("ac").setResult(Designer.getActionContext(control));
        
        commandExecutor.checkStatus();
        return;
    }else{
        def tip = UtilString.getString("lang:d=没有Groovy脚本。&en=No groovy script found.", actionContext);
    }
}
command.setResult(null);

//返回child的父节点的列表，如果父是thing那么终止
def getParentThings(thing, child, list){
    def parent = child.getParent();
    if(parent == thing){
        list.add(thing);
    }else if(parent != null){
        list.add(parent);
        getParentThings(thing, parent, list);
    }        
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
    </PredefinedCommands>&#xd;
    <PredefinedCommands name="ControlOtherCommands" label="控件预定义">&#xd;
        <CompositeCommand name="select" label="选择">&#xd;
            <description><![CDATA[<p>选择当前Shell下的控件。</p>
]]></description>&#xd;
            <Composite name="mainComposite">&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <Tree name="tree" FULL_SELECTION="false" HIDE_SELECTION="false" lineVisible="false"
                     multipleColumns="false" headerVisible="false" sortIndicator="false"
                     moveableColumns="false">&#xd;
                    <Listeners>&#xd;
                        <Listener name="Listener" type="DefaultSelection" ref="xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@select/@Buttons/@selectButton/@onSelection/@GroovyAction"/>&#xd;
                    </Listeners>&#xd;
                </Tree>&#xd;
                <Code name="init">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignShellActions;

println domainContext.control;
DesignShellActions.designTreeInit(actionContext, tree, domainContext.control,  true);

tree.setFocus();]]></code>&#xd;
                </Code>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <Button name="selectButton" text="lang:d=选择(&amp;amp;S)&amp;en=Select(&amp;amp;S)">&#xd;
                    <Event name="onSelection">&#xd;
                        <GroovyAction name="GroovyAction">&#xd;
                            <code><![CDATA[import xworker.swt.design.Designer;

//选择控件
def data = tree.getSelection()[0].getData();
command.setResult(data.control);

if(data.control.isVisible() == false){
    data.control.setVisible(true);
}

commandExecutor.checkStatus();]]></code>&#xd;
                        </GroovyAction>&#xd;
                    </Event>&#xd;
                </Button>&#xd;
            </Buttons>&#xd;
        </CompositeCommand>&#xd;
        <ContentSelector name="moveType" descriptors="xworker.lang.command.CommandDomain/@Command"
             contentList="above,below,inside"/>&#xd;
        <ContentSelector name="selectThingChilds" descriptors="xworker.lang.command.CommandDomain/@Command">&#xd;
            <actions descriptors="xworker.lang.command.CommandDomain/@Command1/@actions1">&#xd;
                <ThingChildsContent name="getContents" descriptors="xworker.swt.actions.ContentSelectorActions/@ThingChildsContent"
                     thing="ognl:controlThing.getDescriptor()" thingNames="thing"/>&#xd;
            </actions>&#xd;
        </ContentSelector>&#xd;
        <CompositeCommand name="editControlChildThing" _xmeta_id_="editLayoutData" label="编辑布局数据">&#xd;
            <Composite name="maimComposite" _xmeta_id_="Composite">&#xd;
                <ThingForm name="thingForm" column="1"/>&#xd;
                <Code name="init">&#xd;
                    <code><![CDATA[import xworker.swt.design.Designer;
import xworker.swt.design.DesignTools;
import org.xmeta.util.UtilString;  

def control = domainContext.control;
def thing = actionContext.get("thing");

thingForm.doAction("setThing", actionContext, "thing", thing);

actionContext.g().put("control", control);
actionContext.g().put("thing", thing);]]></code>&#xd;
                </Code>&#xd;
                <FillLayout name="FillLayout"/>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <Button name="okButton" text="lang:d=确定(&amp;amp;O)&amp;en=Ok(&amp;amp;O)">&#xd;
                    <Listeners>&#xd;
                        <Listener>&#xd;
                            <GroovyAction name="GroovyAction">&#xd;
                                <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.swt.design.Designer;
import org.eclipse.swt.widgets.Composite;

if(actionContext.get("thing") == null){
    commandExecutor.reset();
    return;
}

def values = thingForm.doAction("getValues", actionContext);
thing.getAttributes().putAll(values);
thing.save();

def ac = Designer.getActionContext(control);
thing.doAction("create", ac, "parent", control);

if(control.getParent() != null){
    control.getParent().layout();
}else if(control instanceof Composite){
    control.layout();
}

command.setResult(null);
commandExecutor.checkStatus();]]></code>&#xd;
                            </GroovyAction>&#xd;
                        </Listener>&#xd;
                    </Listeners>&#xd;
                </Button>&#xd;
            </Buttons>&#xd;
            <Parameter name="thing"/>&#xd;
        </CompositeCommand>&#xd;
        <ContentSelector name="layouts" descriptors="xworker.lang.command.CommandDomain/@Command"
             contentList="FillLayout,GridLayout,RowLayout,StackLayout,FormLayout"/>&#xd;
        <CompositeCommand name="editEventGroovy">&#xd;
            <Parameter name="thing"/>&#xd;
            <Parameter name="ac"/>&#xd;
            <Composite name="mainComposite">&#xd;
                <CodeEditor name="codeEditor" codeName="groovy" codeType="groovy" assistActionContext="var:ac"/>&#xd;
                <Code name="init">&#xd;
                    <code><![CDATA[def code = thing.getString("code");
if(code != null){
    codeEditor.setText(code);
}

actionContext.g().put("thing", thing);]]></code>&#xd;
                </Code>&#xd;
                <FillLayout name="FillLayout"/>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <Button name="okButton" text="lang:d=确定(&amp;amp;O)&amp;en=Ok(&amp;amp;O)">&#xd;
                    <Event name="onSelection">&#xd;
                        <GroovyAction name="GroovyAction">&#xd;
                            <code><![CDATA[thing.set("code", codeEditor.getText());
thing.save();

command.setResult(null);
commandExecutor.checkStatus();]]></code>&#xd;
                        </GroovyAction>&#xd;
                    </Event>&#xd;
                </Button>&#xd;
                <Button name="saveButton" _xmeta_id_="okButton1" text="lang:d=保存(&amp;amp;S)&amp;en=Save(&amp;amp;S)">&#xd;
                    <Event name="onSelection">&#xd;
                        <GroovyAction name="GroovyAction">&#xd;
                            <code><![CDATA[thing.set("code", codeEditor.getText());
thing.save();]]></code>&#xd;
                        </GroovyAction>&#xd;
                    </Event>&#xd;
                </Button>&#xd;
            </Buttons>&#xd;
        </CompositeCommand>&#xd;
    </PredefinedCommands>&#xd;
    <PredefinedCommands name="attributeCommands" label="属性"/>&#xd;
    <PredefinedCommands name="componentCommands" label="组合控件"/>&#xd;
    <PredefinedCommands name="commonCommands" label="公共命令-非属性">&#xd;
        <Command name="move to" _xmeta_id_="move" label="移动到">&#xd;
            <description><![CDATA[<p>移动到目标控件的前面、后面或里面（如果目标控件是容器）。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="run">&#xd;
                    <code><![CDATA[import org.xmeta.util.UtilString;
import xworker.swt.design.DesignTools;
import xworker.swt.design.Designer;

if(target == null){
    commandExecutor.setTip(UtilString.getString("lang:d=不能移动，未设置目标控件。&en=Cannot move, target control is not set.", actionContext));
    return null;
}else if(target == control){
    commandExecutor.setTip(UtilString.getString("lang:d=不能移动，目标是自己。&en=Cannot move, target control is self.", actionContext));
    return null;
}else{
    def actionType = -1;
    switch(type){
        case "above":
            actionType = DesignTools.ABOVE;
            break;
        case "below":
            actionType = DesignTools.BELOW;
            break;
        case "inside":
            actionType = DesignTools.INSIDE;
            if(DesignTools.isContainer(target) == false){
                commandExecutor.setTip(UtilString.getString("lang:d=不能移动，目标不是容器。&en=Cannot move, target is not a composite.", actionContext));
                return null;
            }
            break;
    }
    
    if(actionType != -1){
        DesignTools.move(control, target, actionType, false, DesignTools.getActionContext(control));
    }
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
            <Parameter name="target" _xmeta_id_="parentControl" command="xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@select"/>&#xd;
            <Parameter name="type" command="xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@moveType"/>&#xd;
        </Command>&#xd;
        <Command name="copy to" _xmeta_id_="move1" label="拷贝到">&#xd;
            <description><![CDATA[<p>拷贝到目标控件的前面、后面或里面（如果目标控件是容器）。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="run">&#xd;
                    <code><![CDATA[import org.xmeta.util.UtilString;
import xworker.swt.design.DesignTools;
import xworker.swt.design.Designer;

if(target == null){
    commandExecutor.setTip(UtilString.getString("lang:d=不能移动，未设置目标控件。&en=Cannot move, target control is not set.", actionContext));
    return null;
}else{
    def actionType = -1;
    switch(type){
        case "above":
            actionType = DesignTools.ABOVE;
            break;
        case "below":
            actionType = DesignTools.BELOW;
            break;
        case "inside":
            actionType = DesignTools.INSIDE;
            break;
    }
    
    if(actionType != -1){
        DesignTools.move(control, target, actionType, true, DesignTools.getActionContext(control));
    }
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
            <Parameter name="target" _xmeta_id_="parentControl" command="xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@select"/>&#xd;
            <Parameter name="type" command="xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@moveType"/>&#xd;
        </Command>&#xd;
        <Command name="edit LayoutData" label="编辑布局数据">&#xd;
            <description><![CDATA[<p>编辑布局数据(GridData)。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="run">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import org.xmeta.util.UtilString;

def layoutDataThing = DesignTools.getLayoutDataThing(control);
if(layoutDataThing == null){
    def tip = UtilString.getString("lang:d=没有布局数据可以编辑。&en=There is no layout data to edit.", actionContext);
    commandExecutor.setTip(tip);
}else{
    //切换到编辑布局数据的命令
    command.setCommandThing(world.getThing("xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@editLayoutData"));
    //commandExecutor.setCurrentCommandThing(world.ggetThing("xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@editLayoutData"));
    def param = command.getParameter("thing");
    param.setResult(layoutDataThing);
    
    commandExecutor.checkStatus();
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
        <ContentSelector name="select" _xmeta_id_="select1" descriptors="xworker.lang.command.CommandDomain/@Command"
             label="选择">&#xd;
            <description><![CDATA[<p>选择当前Shell下的控件。</p>
]]></description>&#xd;
            <actions descriptors="xworker.lang.command.CommandDomain/@Command1/@actions1">&#xd;
                <GroovyAction name="getContents">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.swt.xwidgets.SelectContent;

def items = DesignTools.getControlItems(control);
def contents = [];

for(item in items){
    addContent(item, "", contents);
}

//println contents;
return contents;

def addContent(item, ident, contents){
    def label = ident + item.getLabel() + " (" + item.getControl().getClass().getSimpleName() + ")";
    def content = new SelectContent(label, label, item.getControl());
    contents.add(content);
    
    for(childItem in item.getChilds()){
        addContent(childItem, ident + "  ", contents);
    }
}]]></code>&#xd;
                    <VariablesDescs descriptors="xworker.lang.MetaThing/@VariablesDesc">&#xd;
                        <Variable name="item" varName="item" scope="2" className="xworker.swt.design.DesignShellActions$Item"/>&#xd;
                    </VariablesDescs>&#xd;
                </GroovyAction>&#xd;
                <GroovyAction name="onContent">&#xd;
                    <code><![CDATA[import xworker.swt.design.Designer;

if(content != null){
    command.setResult(null);
    Designer.setCurrentDesignControl(content);    
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </ContentSelector>&#xd;
        <CompositeCommand name="edit model" _xmeta_id_="edit control model" label="编辑模型">&#xd;
            <description><![CDATA[<p>编辑当前选中的控件对应的模型。</p>
]]></description>&#xd;
            <Composite name="mainComposite">&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <ThingEditor name="thingEditor" saveActionContainer="true"/>&#xd;
                <Code name="code">&#xd;
                    <code><![CDATA[import xworker.swt.design.Designer;

def control = domainContext.control;
actionContext.g().put("control", control);

def thing = Designer.getThing(control);

thingEditor.doAction("setThing", actionContext, "thing", thing);]]></code>&#xd;
                </Code>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <Button name="okButton" text="lang:d=确定(&amp;amp;O)&amp;en=Ok(&amp;amp;O)">&#xd;
                    <Event name="onSelection">&#xd;
                        <GroovyAction name="GroovyAction">&#xd;
                            <code><![CDATA[import xworker.swt.design.DesignTools;

thingEditor.doAction("save", actionContext);

DesignTools.update(control);

command.setResult(null);
commandExecutor.checkStatus();]]></code>&#xd;
                        </GroovyAction>&#xd;
                    </Event>&#xd;
                </Button>&#xd;
                <Button name="saveButton" _xmeta_id_="apllayButton" text="lang:d=保存(&amp;amp;S)&amp;en=Save(&amp;amp;S)">&#xd;
                    <Event name="onSelection">&#xd;
                        <GroovyAction name="GroovyAction">&#xd;
                            <code><![CDATA[import xworker.swt.design.DesignTools;

thingEditor.doAction("save", actionContext);]]></code>&#xd;
                        </GroovyAction>&#xd;
                    </Event>&#xd;
                </Button>&#xd;
            </Buttons>&#xd;
        </CompositeCommand>&#xd;
        <CompositeCommand name="add child" _xmeta_id_="add" label="添加子节点">&#xd;
            <description><![CDATA[<p>为当前控件对应的模型添加子节点。</p>
]]></description>&#xd;
            <Parameter name="descriptor" _xmeta_id_="Parameter" command="xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@selectThingChilds"/>&#xd;
            <Composite>&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <ThingForm name="thingForm" column="1"/>&#xd;
                <Code name="init">&#xd;
                    <code><![CDATA[import org.xmeta.Thing;
import org.xmeta.util.UtilString;

if(descriptor != null){
    def thing = new Thing(descriptor.getMetadata().getPath());
    thingForm.doAction("setThing", actionContext, "thing", thing);
}else{
    def text = "lang:d=未选择子节点的类型。&en=The type of the child node is not selected.";
    text = StringUtils.getString(text, actionContext);
    commandExecutor.setTip(text);
    
    command.setResult(null);
    commandExecutor.checkStatus();
}]]></code>&#xd;
                </Code>&#xd;
            </Composite>&#xd;
            <Buttons>&#xd;
                <Button name="addButton" text="lang:d=添加(&amp;amp;A)&amp;en=Add(&amp;amp;A)">&#xd;
                    <Event name="onSelection">&#xd;
                        <GroovyAction name="GroovyAction">&#xd;
                            <code><![CDATA[import xworker.swt.design.DesignTools;
import xworker.swt.design.Designer;
import org.xmeta.Thing;

def thing = new Thing(descriptor.getMetadata().getPath());
def values = thingForm.doAction("getValues", actionContext);
thing.getAttributes().putAll(values);
def controlThing = Designer.getThing(domainContext.control);
def control = domainContext.control;
if(thing != null){
    controlThing.addChild(thing);
    controlThing.save();
    
    def ac = Designer.getActionContext(control);
    def bindings = ac.push();
    bindings.put("parent", control);
    try{
        thing.doAction("create", ac);
    }finally{
        ac.pop();
    }
    
}

if(DesignTools.isContainer(control)){
    control.layout();
}
command.setResult(null);
commandExecutor.checkStatus();]]></code>&#xd;
                        </GroovyAction>&#xd;
                    </Event>&#xd;
                </Button>&#xd;
            </Buttons>&#xd;
        </CompositeCommand>&#xd;
        <CompositeCommand name="document" label="文档">&#xd;
            <description><![CDATA[<p>显示当前控件对应的模型的文档。</p>
]]></description>&#xd;
            <Composite name="mainComposite">&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <Browser name="browser">&#xd;
                    <UtilBrowser name="UtilBrowser"/>&#xd;
                </Browser>&#xd;
                <Code name="init">&#xd;
                    <code><![CDATA[import xworker.swt.design.Designer;
import xworker.util.XWorkerUtils;

def thing = Designer.getThing(domainContext.control);
def desc = thing.getDescriptor();
def url = XWorkerUtils.getThingDescUrl(desc);
browser.setUrl(url);]]></code>&#xd;
                </Code>&#xd;
            </Composite>&#xd;
        </CompositeCommand>&#xd;
        <Command name="delete" label="删除">&#xd;
            <description><![CDATA[<p>删除当前选中的控件。</p>
]]></description>&#xd;
            <Parameter name="confirm" command="xworker.lang.command.instances.CommonCommands/@YesNo"/>&#xd;
            <actions>&#xd;
                <GroovyAction name="run">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
if(confirm == "yes"){
    DesignTools.remove(control);
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
    </PredefinedCommands>&#xd;
    <PredefinedCommands name="CommonCommands" label="公共预定义">&#xd;
        <Command name="open in ide" _xmeta_id_="open" label="在IDE中打开">&#xd;
            <actions>&#xd;
                <GroovyAction name="run">&#xd;
                    <code><![CDATA[import xworker.swt.design.Designer;

def thing = Designer.getThing(control);

open(actionContext, "thing", thing);]]></code>&#xd;
                    <ActionDefined>&#xd;
                        <ideOpenThing name="open" descriptors="xworker.lang.actions.utils.XWorkerActions/@ideOpenThing"
                             thing="var:thing"/>&#xd;
                    </ActionDefined>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
        <CompositeCommand name="editThing">&#xd;
            <Parameter name="thing"/>&#xd;
            <Composite name="mainComposite" _xmeta_id_="mainCompoiste">&#xd;
                <FillLayout name="fillLayout"/>&#xd;
                <ThingEditor name="thingEditor" thingPath="var:thing" title="false" variablesActionContext="var:ac"/>&#xd;
            </Composite>&#xd;
            <Parameter name="ac"/>&#xd;
        </CompositeCommand>&#xd;
        <CompositeCommand name="actionContext" label="变量上下文">&#xd;
            <Composite name="mainComposite">&#xd;
                <FillLayout name="FillLayout"/>&#xd;
                <ActionContextViewer name="viewer">&#xd;
                    <actions>&#xd;
                        <GroovyAction name="getActionContext">&#xd;
                            <code><![CDATA[import xworker.swt.design.Designer;

def ac = Designer.getActionContext(domainContext.control);
return ac;]]></code>&#xd;
                        </GroovyAction>&#xd;
                    </actions>&#xd;
                </ActionContextViewer>&#xd;
            </Composite>&#xd;
        </CompositeCommand>&#xd;
    </PredefinedCommands>&#xd;
    <PredefinedCommands name="commonContainer" label="一般容器-Composite">&#xd;
        <Command name="edit Layout" label="编辑布局">&#xd;
            <description><![CDATA[<p>编辑容器的布局。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="run">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import org.xmeta.util.UtilString;

def layoutDataThing = DesignTools.getLayoutThing(control);
if(layoutDataThing == null){
    def tip = UtilString.getString("lang:d=没有布局可以编辑。&en=There is no layout to edit.", actionContext);
    commandExecutor.setTip(tip);
}else{
    //切换到编辑布局数据的命令
    command.setCommandThing(world.getThing("xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@editLayoutData"));
    //commandExecutor.setCurrentCommandThing(world.ggetThing("xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@editLayoutData"));
    def param = command.getParameter("thing");
    param.setResult(layoutDataThing);
    
    commandExecutor.checkStatus();
}]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
        </Command>&#xd;
        <Command name="change Layout" _xmeta_id_="edit Layout1" label="改变布局">&#xd;
            <description><![CDATA[<p>改变当前容器的布局。</p>
]]></description>&#xd;
            <actions>&#xd;
                <GroovyAction name="run">&#xd;
                    <code><![CDATA[import xworker.swt.design.DesignTools;
import org.xmeta.util.UtilString;

if(DesignTools.hasLayout(control) == false){
    def tip = UtilString.getString("lang:d=当前控件没有布局可以设置。&en=The current control has no layout to set.", actionContext);
    commandExecutor.setTip(tip);
    return;
}

DesignTools.changeLayout(control, layout);]]></code>&#xd;
                </GroovyAction>&#xd;
            </actions>&#xd;
            <Parameter name="layout" command="xworker.swt.design.commands.DesignCommandDomain/@ControlOtherCommands/@layouts"/>&#xd;
        </Command>&#xd;
    </PredefinedCommands>&#xd;
</CommandDomain>