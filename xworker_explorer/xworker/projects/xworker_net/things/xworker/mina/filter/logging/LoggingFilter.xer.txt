@xworker.mina.filter.logging.LoggingFilter
sname
LoggingFilter
slabel
LoggingFilter
sdescriptors
xworker.lang.MetaDescriptor3
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sdescription
<p>Logs all MINA protocol events. Each event can be tuned to use a different level based on the user's specific requirements. Methods are in place that allow the user to use either the get or set method for each event and pass in the <a title="enum in org.apache.mina.core.session" href="http://mina.apache.org/report/trunk/apidocs/org/apache/mina/core/session/IoEventType.html"><code>IoEventType</code></a> and the <a title="enum in org.apache.mina.filter.logging" href="http://mina.apache.org/report/trunk/apidocs/org/apache/mina/filter/logging/LogLevel.html"><code>LogLevel</code></a>. By default, all events are logged to the <a href="http://mina.apache.org/report/trunk/apidocs/org/apache/mina/filter/logging/LogLevel.html#INFO"><code>LogLevel.INFO</code></a> level except <a href="http://mina.apache.org/report/trunk/apidocs/org/apache/mina/core/filterchain/IoFilterAdapter.html#exceptionCaught(org.apache.mina.core.filterchain.IoFilter.NextFilter, org.apache.mina.core.session.IoSession, java.lang.Throwable)"><code>IoFilterAdapter.exceptionCaught(IoFilter.NextFilter, IoSession, Throwable)</code></a>, which is logged to <a href="http://mina.apache.org/report/trunk/apidocs/org/apache/mina/filter/logging/LogLevel.html#WARN"><code>LogLevel.WARN</code></a>.</p>
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@actions
sname
actions
sdescriptors
xworker.lang.MetaDescriptor3/@actions
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@actions/@create
sname
create
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.filter.logging.LogLevel;

def filter = new LoggingFilter();

def exceptionCaughtLogLevel = self.getString("exceptionCaughtLogLevel");
if(exceptionCaughtLogLevel != null && exceptionCaughtLogLevel != ""){
    switch(exceptionCaughtLogLevel){
        case "DEBUG":
            filter.setExceptionCaughtLogLevel(LogLevel.DEBUG);
            break;
        case "ERROR":
            filter.setExceptionCaughtLogLevel(LogLevel.ERROR);
            break;
        case "INFO":
            filter.setExceptionCaughtLogLevel(LogLevel.INFO);
            break;
        case "NONE":
            filter.setExceptionCaughtLogLevel(LogLevel.NONE);
            break;
        case "TRACE":
            filter.setExceptionCaughtLogLevel(LogLevel.TRACE);
            break;
        case "WARN":
            filter.setExceptionCaughtLogLevel(LogLevel.WARN);
            break;
    }
}

def messageReceivedLogLevel = self.getString("messageReceivedLogLevel");
if(messageReceivedLogLevel != null && messageReceivedLogLevel != ""){
    switch(messageReceivedLogLevel){
        case "DEBUG":
            filter.setMessageReceivedLogLevel(LogLevel.DEBUG);
            break;
        case "ERROR":
            filter.setMessageReceivedLogLevel(LogLevel.ERROR);
            break;
        case "INFO":
            filter.setMessageReceivedLogLevel(LogLevel.INFO);
            break;
        case "NONE":
            filter.setMessageReceivedLogLevel(LogLevel.NONE);
            break;
        case "TRACE":
            filter.setMessageReceivedLogLevel(LogLevel.TRACE);
            break;
        case "WARN":
            filter.setMessageReceivedLogLevel(LogLevel.WARN);
            break;
    }
}

def messageSentLogLevel = self.getString("messageSentLogLevel");
if(messageSentLogLevel != null && messageSentLogLevel != ""){
    switch(messageSentLogLevel){
        case "DEBUG":
            filter.setMessageSentLogLevel(LogLevel.DEBUG);
            break;
        case "ERROR":
            filter.setMessageSentLogLevel(LogLevel.ERROR);
            break;
        case "INFO":
            filter.setMessageSentLogLevel(LogLevel.INFO);
            break;
        case "NONE":
            filter.setMessageSentLogLevel(LogLevel.NONE);
            break;
        case "TRACE":
            filter.setMessageSentLogLevel(LogLevel.TRACE);
            break;
        case "WARN":
            filter.setMessageSentLogLevel(LogLevel.WARN);
            break;
    }
}

def sessionClosedLogLevel = self.getString("sessionClosedLogLevel");
if(sessionClosedLogLevel != null && sessionClosedLogLevel != ""){
    switch(sessionClosedLogLevel){
        case "DEBUG":
            filter.setSessionClosedLogLevel(LogLevel.DEBUG);
            break;
        case "ERROR":
            filter.setSessionClosedLogLevel(LogLevel.ERROR);
            break;
        case "INFO":
            filter.setSessionClosedLogLevel(LogLevel.INFO);
            break;
        case "NONE":
            filter.setSessionClosedLogLevel(LogLevel.NONE);
            break;
        case "TRACE":
            filter.setSessionClosedLogLevel(LogLevel.TRACE);
            break;
        case "WARN":
            filter.setSessionClosedLogLevel(LogLevel.WARN);
            break;
    }
}

def sessionCreatedLogLevel = self.getString("sessionCreatedLogLevel");
if(sessionCreatedLogLevel != null && sessionCreatedLogLevel != ""){
    switch(sessionCreatedLogLevel){
        case "DEBUG":
            filter.setSessionCreatedLogLevel(LogLevel.DEBUG);
            break;
        case "ERROR":
            filter.setSessionCreatedLogLevel(LogLevel.ERROR);
            break;
        case "INFO":
            filter.setSessionCreatedLogLevel(LogLevel.INFO);
            break;
        case "NONE":
            filter.setSessionCreatedLogLevel(LogLevel.NONE);
            break;
        case "TRACE":
            filter.setSessionCreatedLogLevel(LogLevel.TRACE);
            break;
        case "WARN":
            filter.setSessionCreatedLogLevel(LogLevel.WARN);
            break;
    }
}

def sessionIdleLogLevel = self.getString("sessionIdleLogLevel");
if(sessionIdleLogLevel != null && sessionIdleLogLevel != ""){
    switch(sessionIdleLogLevel){
        case "DEBUG":
            filter.setSessionIdleLogLevel(LogLevel.DEBUG);
            break;
        case "ERROR":
            filter.setSessionIdleLogLevel(LogLevel.ERROR);
            break;
        case "INFO":
            filter.setSessionIdleLogLevel(LogLevel.INFO);
            break;
        case "NONE":
            filter.setSessionIdleLogLevel(LogLevel.NONE);
            break;
        case "TRACE":
            filter.setSessionIdleLogLevel(LogLevel.TRACE);
            break;
        case "WARN":
            filter.setSessionIdleLogLevel(LogLevel.WARN);
            break;
    }
}

def sessionOpenedLogLevel = self.getString("sessionOpenedLogLevel");
if(sessionOpenedLogLevel != null && sessionOpenedLogLevel != ""){
    switch(exceptionCaughtLogLevel){
        case "DEBUG":
            filter.setSessionOpenedLogLevel(LogLevel.DEBUG);
            break;
        case "ERROR":
            filter.setSessionOpenedLogLevel(LogLevel.ERROR);
            break;
        case "INFO":
            filter.setSessionOpenedLogLevel(LogLevel.INFO);
            break;
        case "NONE":
            filter.setSessionOpenedLogLevel(LogLevel.NONE);
            break;
        case "TRACE":
            filter.setSessionOpenedLogLevel(LogLevel.TRACE);
            break;
        case "WARN":
            filter.setSessionOpenedLogLevel(LogLevel.WARN);
            break;
    }
}

actionContext.getScope(0).put(self.metadata.name, filter);
if(actionContext.get("parent") != null){
    parent.getFilterChain().addLast(self.metadata.name, filter);
}
return filter;
#$@text#$@
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@name
sname
name
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@label
sname
label
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@ExceptionCaughtLogLevel
sname
exceptionCaughtLogLevel
sinputtype
select
sreadOnly
false
sdefault
WARN
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@ExceptionCaughtLogLevel/@DEBUG
sname
DEBUG
slabel
DEBUG
svalue
DEBUG
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@ExceptionCaughtLogLevel/@ERROR
sname
ERROR
slabel
ERROR
svalue
ERROR
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@ExceptionCaughtLogLevel/@INFO
sname
INFO
slabel
INFO
svalue
INFO
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@ExceptionCaughtLogLevel/@NONE
sname
NONE
slabel
NONE
svalue
NONE
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@ExceptionCaughtLogLevel/@TRACE
sname
TRACE
slabel
TRACE
svalue
TRACE
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@ExceptionCaughtLogLevel/@WARN
sname
WARN
slabel
WARN
svalue
WARN
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@MessageReceivedLogLevel
sname
messageReceivedLogLevel
sinputtype
select
sreadOnly
false
sdefault
INFO
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@MessageSentLogLevel
sname
messageSentLogLevel
sinputtype
select
sreadOnly
false
sdefault
INFO
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@SessionClosedLogLevel
sname
sessionClosedLogLevel
sinputtype
select
sreadOnly
false
sdefault
INFO
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@sessionCreatedLogLevel
sname
sessionCreatedLogLevel
sinputtype
select
sreadOnly
false
sdefault
INFO
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@sessionIdleLogLevel
sname
sessionIdleLogLevel
sinputtype
select
sreadOnly
false
sdefault
INFO
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.mina.filter.logging.LoggingFilter/@sessionOpenedLogLevel
sname
sessionOpenedLogLevel
sinputtype
select
sreadOnly
false
sdefault
INFO
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
