@xworker.codec.collection.Coder
sname
Coder
slabel
Coder
sdescriptors
xworker.lang.MetaDescriptor3
sextends
xworker.codec.Coder,xworker.codec.Coders
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sdescription
<p>Coder本身作为一个子节点，即Coder包含Coder的情况。</p>
sth_createIndex
false
@xworker.codec.collection.Coder/@actions
sname
actions
sdescriptors
xworker.lang.MetaDescriptor3/@actions
sth_createIndex
false
@xworker.codec.collection.Coder/@actions/@encode
sname
encode
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
import org.apache.mina.core.buffer.IoBuffer;

import ognl.Ognl;

//创建buffer
def myBuffer = IoBuffer.allocate(self.getInt("capacity"), self.getBoolean("direct"));
myBuffer.setAutoExpand(self.getBoolean("autoExpand"));

//编码
try{
    def bindings = actionContext.push(null);
    bindings.put("buffer", myBuffer);
    bindings.put("rootData", data);
    
    for(child in self.getChilds()){
        try{
            if(child.propertyPath != null && child.propertyPath != ""){
                child.doAction("encode", actionContext, ["data": Ognl.getValue(child.propertyPath, data)]);
            }else{
                child.doAction("encode", actionContext, ["data":data]);
            }
        }catch(Exception e){
            log.error("Coder encode error, propertyPath=" + child.propertyPath + ",exception=" + e + ",thing=" + child.metadata.path);
            throw e;
        }
    }
}finally{
    actionContext.pop();
}

//校验和
if(self.checksum != null && self.checksum != "" && self.checksum != "none"){    
    def array = buffer.array();
    def length = buffer.position();
    int checksum = 0;
    for(int i=0; i<length; i++){
        checksum += array[i];
    }
    
    switch(self.checksum){
        case "byte":
            buffer.put((byte) (checksum & 0xFF));
            break;
        case "short":
            buffer.putShort((byte) (checksum & 0xFFFF));
            break;
        case "int":
            buffer.putInt(checksum);
            break;
    }
}
//输出
def length = myBuffer.position();
myBuffer.flip();
def bs = new byte[length];
myBuffer.get(bs);
myBuffer.free();

switch(self.sizeType){
    case "byte":
        if(self.getBoolean("sizeIncludeSizeType")){
            length = length + 1;
        }
        buffer.put((byte) (length & 0xFF));
        break;
    case "short":
        if(self.getBoolean("sizeIncludeSizeType")){
            length = length + 2;
        }
        buffer.putShort((short) (length & 0xFFFF));
        break;
    case "int":
        if(self.getBoolean("sizeIncludeSizeType")){
            length = length + 4;
        }
        buffer.putInt(length);
        break;
}
buffer.put(bs);
#$@text#$@
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sth_createIndex
false
@xworker.codec.collection.Coder/@actions/@decode
sname
decode
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
//解码时长度无意义，直接读出
switch(self.sizeType){
    case "byte":
        buffer.get();
        break;
    case "short":
        buffer.getShort();
        break;
    case "int":
        buffer.getInt();
        break;
}

for(child in self.childs){
    child.doAction("decode", actionContext);
}
#$@text#$@
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sth_createIndex
false
@xworker.codec.collection.Coder/@name
sname
name
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.codec.collection.Coder/@label
sname
label
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.codec.collection.Coder/@sizeType
sname
sizeType
sinputtype
select
sreadOnly
false
sdefault
short
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.codec.collection.Coder/@sizeType/@null
sname
none
slabel
none
svalue
none
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.codec.collection.Coder/@sizeType/@byte
sname
byte
slabel
byte
svalue
byte
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.codec.collection.Coder/@sizeType/@short
sname
short
slabel
short
svalue
short
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.codec.collection.Coder/@sizeType/@int
sname
int
slabel
int
svalue
int
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
sth_createIndex
false
@xworker.codec.collection.Coder/@sizeIncludeSizeType
sname
sizeIncludeSizeType
sinputtype
truefalse
sreadOnly
false
sdefault
false
sinheritDescription
false
sdescription
<p>长度中是否包含长度类型（sizeType）的长度，如果包含比如数据体长度为16，sizeType为short，那么总长度为16+2（shor）=18.</p>
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
