%1573782991030
@
sname=ActionExamples
slabel=ActionExamples
Sdescription=
#$@text#$@
<p>动作相关的示例注册到这里来。</p>

<p>&nbsp;</p>
#$@text#$@
sdescriptors=xworker.swt.xworker.ThingRegistThings
sinheritDescription=false
sth_createIndex=true
sth_registThing=child|xworker.example.ExamplesIndex
sth_registMyChilds=true
sth_registDisabled=false
sth_mark=false
  @/@IteratorFileLine
  sname=IteratorFileLine
  stype=thingDemo
  spath=xworker.example.action._actions.IteratorFileLine
  sgroup=action.definition
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>动作定义示例</h2>

<h3>使用Groovy实现</h3>

<p>&nbsp;&nbsp;&nbsp; 使用Groovy相比使用Java来说，代码会少很多。</p>

<h3>动作也是对象</h3>

<p>&nbsp;&nbsp;&nbsp; 动作模型也是对象，所以可以定义自己的行为，如getFile和doLine。作为对象的动作模型一般要继承xworker.lang.actions.SelfAction模型。</p>

<h3>获取参数的技巧</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 执行示例的动作需要传入一个文件参数，它是通过getFile方法实现的，可以从file属性获取文件，也可以从ognl、变量上下文中获取，用户也可以通过重写getFile方法实现自定义的获取文件的方法。</p>

<h3>回调</h3>

<p>&nbsp;&nbsp;&nbsp; 使用者可能需要处理文件的每一行，这里定义了doLine方法，用于可以重写doLine方法。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Example of action definition</h2>

<h3>Using groovy implementation</h3>

<p>&nbsp;&nbsp;&nbsp; Using groovy is a lot less code than using Java.</p>

<h3>Actions are also objects</h3>

<p>&nbsp;&nbsp;&nbsp; The action model is also an object, so you can define your own behaviors, such as getFile and doLine. The action model as an object generally inherits the xworker.lang.actions.SelfAction model.</p>

<h3>Techniques for obtaining parameters</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; To execute the example action, you need to pass in a file parameter, which is implemented by the getFile method. You can get the file from the file attribute, or from the context of ognl and variable. You can also achieve a user-defined method to get the file by rewriting the getFile method.</p>

<h3>Callback</h3>

<p>&nbsp;&nbsp;&nbsp; The consumer may need to process every line of the file, where the doLine method is defined to override the doLine method.</p>
#$@text#$@
  sth_mark=false
  sid=IteratorFileLine
  @/@IteratorFileLineJava
  sname=IteratorFileLineJava
  stype=thingDemo
  spath=xworker.example.action._actions.IteratorFileLineJava
  sgroup=action.definition
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>动作定义示例</h2>

<h3>使用Java实现</h3>

<p>&nbsp;&nbsp;&nbsp; 模型库和对性能要求比较高的场合，建议使用Java实现run方法。</p>

<h3>动作也是对象</h3>

<p>&nbsp;&nbsp;&nbsp; 动作模型也是对象，所以可以定义自己的行为，如getFile和doLine。作为对象的动作模型一般要继承xworker.lang.actions.SelfAction模型。</p>

<h3>获取参数的技巧</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 执行示例的动作需要传入一个文件参数，它是通过getFile方法实现的，可以从file属性获取文件，也可以从ognl、变量上下文中获取，用户也可以通过重写getFile方法实现自定义的获取文件的方法。</p>

<h3>回调</h3>

<p>&nbsp;&nbsp;&nbsp; 使用者可能需要处理文件的每一行，这里定义了doLine方法，用于可以重写doLine方法。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Example of action definition</h2>

<h3>Using java implementation</h3>

<p>&nbsp;&nbsp;&nbsp; It is recommended to use java to implement run method in model library and high performance situation.</p>

<h3>Actions are also objects</h3>

<p>&nbsp;&nbsp;&nbsp; The action model is also an object, so you can define your own behaviors, such as GetFile and doline. The action model as an object generally inherits the xworker.lang.actions.SelfAction model.</p>

<h3>Techniques for obtaining parameters</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; To execute the example action, you need to pass in a file parameter, which is implemented by the getFile method. You can get the file from the file attribute, or from the context of ognl and variable. You can also achieve a user-defined method to get the file by rewriting the getFile method.</p>

<h3>Callback</h3>

<p>&nbsp;&nbsp;&nbsp; The consumer may need to process every line of the file, where the doLine method is defined to override the doLine method.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=IteratorFileLineJava
  @/@BeginDemo
  sname=BeginDemo
  stype=thingDemo
  spath=xworker.example.thing.actions.BeginDemo
  sgroup=action.statement
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Begin</h2>

<p>&nbsp;&nbsp;&nbsp; Begin的作用类似与 {......}，永远编写{}内的代码。</p>

<p>&nbsp;&nbsp;&nbsp; 本示例用Groovy代码表示：</p>

<pre class="brush:groovy;">
{
    println(&quot;hello&quot;);

    println(&quot;hello world&quot;);
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Begin</h2>

<p>&nbsp;&nbsp;&nbsp; Begin works like {...}, always writing code within {}.</p>

<p>&nbsp;&nbsp;&nbsp; This example is represented in groovy Code:</p>

<pre class="brush:groovy;">
{
    println(&quot;hello&quot;);

    println(&quot;hello world&quot;);
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=BeginDemo
  @/@DoDemo
  sname=DoDemo
  stype=thingDemo
  spath=xworker.example.thing.actions.DoDemo
  sgroup=action.statement
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Do</h2>

<p>&nbsp;&nbsp;&nbsp; 本示例的代码用Groovy表示类似如下。</p>

<pre class="brush:groovy;">
int i = 0;
do{
   i++;
   println(i);

   if(i &gt; 8){
      break;
   }
}while(i &lt; 10);</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Do</h2>

<p>&nbsp;&nbsp;&nbsp; The code in this example is similar to the following in groovy.</p>

<pre class="brush:groovy;">
int i = 0;
do{
   i++;
   println(i);

   if(i &gt; 8){
      break;
   }
}while(i &lt; 10);</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=DoDemo
  @/@Groovy
  sname=Groovy
  stype=thingDemo
  spath=xworker.example.thing.actions.GroovyActionDemo
  sgroup=action.code
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Groovy</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Groovy动作是XWorker中最常用的脚本类动作。</p>

<p>&nbsp;&nbsp;&nbsp; Groovy脚本会先编译成类然后再加载运行。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 在Android下Groovy脚本不能使用，可以考虑使用BeanShell脚本。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Groovy</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Groovy actions are the most commonly used script actions in xworker.</p>

<p>&nbsp;&nbsp;&nbsp; Groovy scripts are compiled into classes before they are loaded and run.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; Groovy script cannot be used under Android. Consider using bean shell script.</p>
#$@text#$@
  sth_mark=false
  sid=Groovy
  @/@Java
  sname=Java
  stype=thingDemo
  spath=xworker.example.thing.actions.JavaActionDemo
  sgroup=action.code
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Java</h2>

<p>&nbsp;&nbsp;&nbsp; 使用Java动作可以调用Java代码。</p>

<p>&nbsp;&nbsp;&nbsp; Java动作是动态模型引擎原生支持的唯一动作类型，其它类型的动作都是直接或者间接的使用Java动作来实现的。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Java</h2>

<p>&nbsp;&nbsp;&nbsp; Java code can be called using java actions.</p>

<p>&nbsp;&nbsp;&nbsp; Java action is the only action type supported by dynamic model engine. Other types of actions are directly or indirectly implemented by Java action.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=Java
  @/@JavaScript
  sname=JavaScript
  stype=thingDemo
  spath=xworker.example.thing.actions.JdkScriptDemo
  sgroup=action.code
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>JdkScript</h2>

<p>&nbsp;&nbsp;&nbsp; 调用JDK内置的Script引擎。如要使用其它脚本语言，需要自行拷贝相关的类库到XWorker的lib目录下。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>JdkScript</h2>

<p>&nbsp;&nbsp;&nbsp; Call JDK&#39;s built-in script engine. If you want to use other scripting languages, you need to copy the relevant class library to the Lib directory of xworker.</p>
#$@text#$@
  sth_mark=false
  sid=JavaScript
  @/@Behavior
  sname=Behavior
  stype=thingDemo
  spath=xworker.example.thing.actions.ActionBase
  sgroup=action.object
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>对象的行为</h2>

<p>&nbsp;&nbsp;&nbsp; 动作模型可以用于实现对象的行为。</p>

<h3>self变量</h3>

<p>&nbsp;&nbsp;&nbsp; 当动作作为对象的行为时，对象模型本身会以self变量传入，self相当于Java的this变量。</p>

<p>&nbsp;&nbsp;&nbsp; 在当前示例里，直接执行helloJava和helloGroovy动作会报self变量不存在的异常。选择根节点ActionBase，然后再选择它的行为helloJava或helloGroovy则会执行正常。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Behavior of objects</h2>

<p>&nbsp;&nbsp;&nbsp; Action models can be used to implement the behavior of objects.</p>

<h3>Self variable</h3>

<p>&nbsp;&nbsp;&nbsp; When an action is the behavior of an object, the object model itself is passed in as a self variable, which is equivalent to Java&#39;s this variable.</p>

<p>&nbsp;&nbsp;&nbsp; In the current example, directly executing the hellojava and hellogogroovy actions will report an exception that the self variable does not exist. Select the root node actionbase, and then select its behavior hellojava or hellogogroovy to execute normally.</p>
#$@text#$@
  sth_mark=false
  sid=Behavior
  @/@Overwrite
  sname=Overwrite
  stype=thingDemo
  spath=xworker.example.thing.actions.InheritInstance
  sgroup=action.object
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>行为的重写</h2>

<p>&nbsp;&nbsp;&nbsp; 在动态模型里对象可以重写类的方法，方法是对象重新编写要重写的方法。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Rewriting of behavior</h2>

<p>&nbsp;&nbsp;&nbsp; In the dynamic model, an object needs to rewrite a method, which can be defined directly.</p>
#$@text#$@
  sth_mark=false
  sid=Overwrite
  @/@BeanShell
  sname=BeanShell
  stype=thingDemo
  spath=xworker.example.action._actions.code.BeanShellExample/@BeanShellExample
  sgroup=action.code
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>BeanShell</h2>

<p>&nbsp;&nbsp;&nbsp; BeanShell的性能比Groovy低，但好处是可以在Android下运行，因为无需编译成Class。</p>

<p><a href="http://www.beanshell.org/">http://www.beanshell.org</a></p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>BeanShell</h2>

<p>&nbsp;&nbsp;&nbsp; The performance of bean shell is lower than that of groovy, but the advantage is that it can be run under Android, because it does not need to be compiled into class.</p>

<p><a href="http://www.beanshell.org/">http://www.beanshell.org</a></p>
#$@text#$@
  sth_mark=false
  sid=BeanShell
  @/@Scals
  sname=Scala
  stype=thingDemo
  spath=xworker.example.action._actions.code.BeanShellExample/@ScalaExample
  sgroup=action.code
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>Scala</h2>

<p>&nbsp;&nbsp;&nbsp; 在XWorker里也可以使用Scala作为动作，需要自行安装Scala。</p>

<p>&nbsp;&nbsp;&nbsp; Scala在这里被当作Java来使用，并不是纯粹的脚本，是编译成类然后调用的。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Scala</h2>

<p>&nbsp;&nbsp;&nbsp; Scala can also be used as an action in xworker. You need to install Scala yourself.</p>

<p>&nbsp;&nbsp;&nbsp; Scala is used here as Java. It is not a pure script. It is compiled into classes and then called.</p>
#$@text#$@
  sth_mark=false
  sid=Scals
  @/@ActionContext
  sname=ActionContext
  stype=thingDemo
  spath=xworker.example.action.variables.VariableExamples/@ActionContext
  sgroup=action.variables
  sicon=icons/application.png
  sth_sortWeight=0
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>ActionContext</h2>

<p>&nbsp;&nbsp;&nbsp; ActionContext是动作的上下文，用于管理变量和动作的执行状态等。</p>

<h3>Map和Stack</h3>

<p>&nbsp;&nbsp;&nbsp; ActionContext是一个Map和Stack的结合体，Map用于保存变量，Stack用于实现参数传递以及变量范围等。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_mark=false
  sid=ActionContext
  @/@CreateVariables
  sname=CreateVariables
  stype=thingDemo
  spath=xworker.example.action.variables.VariableExamples/@CreateVariables
  sgroup=action.variables
  sicon=icons/application.png
  sth_sortWeight=5
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>创建变量</h2>

<p>&nbsp;&nbsp;&nbsp; 创建变量有很多种方法，本质上是创建Java的变量，然后保存到ActionContext中。</p>

<h3>在代码中创建变量</h3>

<p>&nbsp;&nbsp;&nbsp; 可以在Java或Groovy代码中创建变量，然后保存到ActionConext中。</p>

<h3>使用Variables节点</h3>

<p>&nbsp;&nbsp;&nbsp; 动作一般支持Variables节点，Variables节点下可以使用动作，动作的返回值作为变量的值。</p>

<p>&nbsp;&nbsp;&nbsp; Variables下定义的变量只在当前动作及其自己点下有效。</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_mark=false
  sid=CreateVariables
  @/@Varscope
  sname=Varables Scope
  stype=thingDemo
  spath=xworker.example.action.variables.VariableExamples/@Varscope
  sgroup=action.variables
  sicon=icons/application.png
  sth_sortWeight=10
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>变量范围</h2>

<h3>变量的生命周期</h3>

<p>&nbsp;&nbsp;&nbsp; ActionContext中的栈中的变量存在生命周期，在栈pop()后就不能访问到了。</p>

<p>&nbsp;&nbsp;&nbsp; 不同的线程使用不同的栈。</p>

<p>&nbsp;&nbsp;&nbsp; 指定每个动作都会先push（）一个栈，执行完毕后pop()它，是成对出现的。</p>

<h3>全局变量</h3>

<p>&nbsp;&nbsp;&nbsp; ActionContext的最底层的栈理论上是不会被弹出的，并且在不同的线程里也是共用的，所以常用来做全局变量。</p>

<p>&nbsp;&nbsp;&nbsp; 使用AcitonContext.g()或ActionContet.getScope(0)可以获取全局变量栈。</p>

<p>局部变量</p>

<p>&nbsp;&nbsp;&nbsp; 局部变量有动作自行控制，是动作执行时的当前最顶端的栈，一般只有动作自身和子节点可见。</p>

<h3>示例</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 示例中变量v1对Begin及其子节点可见，FileIterator产生的变量file只对子节点可见。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_mark=false
  sid=Varscope
  @/@Modify Variable
  sname=Modify Variable
  stype=thingDemo
  spath=xworker.example.action.variables.VariableExamples/@Modify Variable
  sgroup=action.variables
  sicon=icons/application.png
  sth_sortWeight=20
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>修改变量</h2>

<p>&nbsp;&nbsp;&nbsp; ActionContext是一个Map和Stack，需要显式的修改变量，即使用者需要清楚变量是局部变量还是全局变量，然后调用相应的栈层来修改它。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_mark=false
  sid=Modify Variable
  @/@Inner Actions
  sname=Inner Actions
  stype=thingDemo
  spath=xworker.example.action._actions.code.CodeExamples/@DefineActionExample
  sgroup=action.common
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>内部动作</h2>

<p>&nbsp;&nbsp;&nbsp; 动作的子节点ActionDefined声明内部动作，对当前动作及其子节点可见。</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Internal action</h2>

<p>&nbsp;&nbsp;&nbsp; The action&#39;s child node ActionDefined declares the internal action, which is visible to the current action and its child nodes.</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=Inner Actions
  @/@Code Assist
  sname=Code Assist
  stype=thingDemo
  spath=xworker.example.action._actions.code.CodeExamples/@CodeAssist
  sgroup=action.common
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>代码辅助</h2>

<p>&nbsp;&nbsp;&nbsp; XWorker提供了一个简单的代码辅助。</p>

<ul>
	<li><strong>Alt&nbsp;+ H</strong><br />
	弹出一个选择框，列出所有已知的变量，以及对当前文本的分词列表。<br />
	&nbsp;</li>
	<li><strong>Alt&nbsp;+ P</strong><br />
	弹出导入类的窗口。</li>
</ul>

<p>&nbsp;&nbsp; &nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Code Assistant</h2>

<p>&nbsp;&nbsp;&nbsp; Xworker provides a simple code assist.</p>

<ul>
	<li><strong>Alt&nbsp;+ H</strong><br />
	A selection box will pop up, listing all known variables as well as the word segmentation list for the current text.<br />
	&nbsp;</li>
	<li><strong>Alt&nbsp;+ P</strong>T<br />
	he window to import the class pops up.</li>
</ul>

<p>&nbsp;&nbsp; &nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=Code Assist
  @/@Execute Action
  sname=Execute Action
  stype=thingDemo
  spath=xworker.example.action.common.ActionCommonExamples/@ExecuteAction
  sgroup=action.common
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>执行动作</h2>

<p>&nbsp;&nbsp;&nbsp; 动作可以在代码里调用，动作对应的类是org.xmeta.Action。</p>

<h3>获取动作</h3>

<p>&nbsp;&nbsp;&nbsp; 方法1：Action action&nbsp;= World.getInstance().getAction(&quot;xxx&quot;);</p>

<p>&nbsp;&nbsp;&nbsp; 方法2：Action action = thing.getAction();</p>

<p>&nbsp;&nbsp;&nbsp; 其中xxx是动作模型的路径，thing是动作模型。</p>

<h3>执行动作</h3>

<p>&nbsp;&nbsp;&nbsp; 不带参数：action.run(ActionContext actionContext);</p>

<p>&nbsp;&nbsp;&nbsp; 带参数1：action.run(ActionContext actionContext, Map&lt;String, Object&gt; params);</p>

<p>&nbsp;&nbsp;&nbsp; 带参数2：action.run(ActionContext actionContext, Object ... params);</p>

<p>&nbsp;&nbsp;&nbsp; 其中带参数2参数名和参数值是成对出现的，如action.run(actionContext, &quot;name&quot;, name, &quot;value&quot;, value);</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Execute Action</h2>

<p>&nbsp;&nbsp;&nbsp; The action can be called in the code. The corresponding class of the action is org.xmeta.action.</p>

<h3>Get action</h3>

<p>&nbsp;&nbsp;&nbsp; Method 1：Action action&nbsp;= World.getInstance().getAction(&quot;xxx&quot;);</p>

<p>&nbsp;&nbsp;&nbsp; Method 2：Action action = thing.getAction();</p>

<p>&nbsp;&nbsp;&nbsp; Where XXX is the path of the action model and thing is the action model.</p>

<h3>Execute Action</h3>

<p>&nbsp;&nbsp;&nbsp; Without parameters：action.run(ActionContext actionContext);</p>

<p>&nbsp;&nbsp;&nbsp; With parameters 1：action.run(ActionContext actionContext, Map&lt;String, Object&gt; params);</p>

<p>&nbsp;&nbsp;&nbsp; With parameters 2：action.run(ActionContext actionContext, Object ... params);</p>

<p>&nbsp;&nbsp;&nbsp; The parameter name and parameter value with parameter 2 appear in pairs. Such as action.run(actionContext, &quot;name&quot;, name, &quot;value&quot;, value);</p>

<p>&nbsp;&nbsp;&nbsp;</p>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=Execute Action
  @/@CreateObject
  sname=CreateObject
  stype=thingDemo
  spath=xworker.example.action._actions.java.JavaActionsExamples/@CreateObjectExample
  sgroup=action.java
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>创建对象</h2>

<p>&nbsp;&nbsp;&nbsp; 指定Java类，实例化一个Java对象的例子。</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>Create Object</h2>

<p>&nbsp;&nbsp;&nbsp; Specify a Java class and instantiate&nbsp; a Java object.</p>
#$@text#$@
  sth_mark=false
  sid=CreateObject
  @/@With
  sname=With
  stype=thingDemo
  spath=xworker.example.action._actions.statement.WithExample/@With
  sgroup=action.statement
  sicon=icons/application.png
  sstyledTextForInsert=parentContext.parentContext.codeText
  suseTargetThingDoc=false
  ssimpleBrowser=false
  Sdescription=
#$@text#$@
<h2>With</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; With模型用在需要创建和释放资源的场合，用代码表示With模型大概如下。</p>

<pre class="brush:java;">
try{
     //Create resources

     //Do something
}finally{
     //Release resources
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sdescriptors=xworker.swt.xworker.ThingRegistThings/@ThingRegistThing
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  Sen_description=
#$@text#$@
<h2>With</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; The with model is used in situations where resources need to be created and released. The code representation of the with model is as follows.</p>

<pre class="brush:java;">
try{
     //Create resources

     //Do something
}finally{
     //Release resources
}</pre>

<p>&nbsp;</p>
#$@text#$@
  sth_mark=false
  sid=With
