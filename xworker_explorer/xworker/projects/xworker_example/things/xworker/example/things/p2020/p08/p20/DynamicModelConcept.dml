<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="DynamicModelConcept" descriptors="xworker.swt.xworker.ThingRegistThing"
     label="基本概念" type="thingDesc" group="dynamicModel" icon="icons/html.png" th_sortWeight="-20000"
     simpleBrowser="true" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>基本概念</h1>

<h2>1.基本概念</h2>

<h3>1.1.背景</h3>

<p>&nbsp;&nbsp;&nbsp; 如何用简单的方式描述一个不断变化的系统呢？</p>

<p>&nbsp;&nbsp;&nbsp; 动态模型的方法如下，一个系统(System)，里面有各种各样的东西（Thing），这些东西是可以变化和运动的（Action)。</p>

<h3>1.2.基本概念</h3>

<h4>1.2.1.事物（org.xmeta.Thing)</h4>

<p>&nbsp;&nbsp;&nbsp; 系统是由各种各样的东西组成的，这些东西就是事物（Thing)。</p>

<h4>1.2.2.世界（org.xmeta.World)</h4>

<p>&nbsp;&nbsp;&nbsp; 系统是各种事物的容器，而在一般概念里，世界是由各种事物组成的，因此系统(System)也称为世界（World)。</p>

<h4>1.2.3.动作（org.xmeta.Action)</h4>

<p>&nbsp;&nbsp;&nbsp; 由于事物是可以变化和运动的，因此存在动作（Action)，其中动作是由事物转化而来。</p>

<hr />
<h2>2.面向对象</h2>

<p>&nbsp;&nbsp;&nbsp; 动态模型的概念比较抽象，但可以用来实现面向对象的编程方法。</p>

<h3>2.1.事物的结构</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;首先我们用树形结构数据来表示事物，比如使用XML来表示各种东西。这样一个事物的结构就是由属性和子节点（子事物）组成的。</p>

<h3>2.2.任何事物都可以转化为动作</h3>

<p>&nbsp;&nbsp;&nbsp; 动态模型规定任何事物都可以转化为动作，动作是可以执行的。</p>

<h3>2.3.对象</h3>

<p>&nbsp;&nbsp;&nbsp; 有了2.1.和2.2，那么就可以把事物变成对象，即事物也是对象。</p>

<h4>2.3.1.对象的属性</h4>

<p>&nbsp;&nbsp;&nbsp; 可以用事物的属性和子节点来表示对象的属性。</p>

<h4>2.3.2.对象的行为</h4>

<p>&nbsp;&nbsp;&nbsp; 由于任何事物都可以转化为可执行的动作，而事物的结构是树形结构的，因此把一个事物某些子节点当作对象的行为。</p>

<h4>2.3.3.对象的类</h4>

<p>&nbsp;&nbsp;&nbsp; 可以用一个事物自己或其它事物当作它的类。</p>

<h4>2.3.4.对象的继承</h4>

<p>&nbsp;&nbsp;&nbsp; 可以引入继承的概念，在动态模型里，对象一般只继承行为。</p>

<hr />
<h2>3.万物皆对象</h2>

<p>&nbsp;&nbsp;&nbsp; 可以看到动态模型的概念有点抽象，但好在我们已经实现了动态模型引擎（X-Meta），也用它编写很多应用(XWorker)，证明了动态模型是可行的。</p>

<p>&nbsp;&nbsp;&nbsp; 最后，我们引用面向对象编程的经典理念&ldquo;万物皆对象&rdquo;来作为结束，大家可以发现动态模型其实就是一个把各种事物当作对象的方法。</p>
]]></description>
</QuickFunction>