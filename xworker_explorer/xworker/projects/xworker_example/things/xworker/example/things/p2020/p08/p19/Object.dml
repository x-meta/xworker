<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="Object" descriptors="xworker.swt.xworker.ThingRegistThing" label="对象" type="thingDesc"
     group="dynamicModel.object" groupDescriptor="true" icon="icons/html.png" th_sortWeight="100"
     simpleBrowser="true" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>对象</h1>

<p>&nbsp;&nbsp;&nbsp; 动态模型实现了面向对象的编程方法，面向对象是动态模型的主要编程方法之一。</p>

<h2>1.基本概念</h2>

<h3>1.1.对象</h3>

<p>&nbsp;&nbsp;&nbsp; 动态模型把每一个模型都当作对象，对象是有属性、子节点和行为组成的。</p>

<h3>1.2.类</h3>

<p>&nbsp;&nbsp;&nbsp; 动态模型认为一个模型可以以任何模型作为它的类，并且数量也不限制。如果模型A是模型B的类，那么模型B继承模型A的行为。在动态模型里类具有描述对象的能力，即如果模型A是模型B的类，那么模型A可以描述模型B有那些属性、子节点和行为等，其中模型A可以只描述模型B的部分属性、子节点和行为。</p>

<h3>1.3.继承</h3>

<p>&nbsp;&nbsp;&nbsp; 动态模型认为一个模型可以继承除自身外的其它任何模型，数量也没有限制。如果模型B继承了模型A，那么模型B继承模型A的行为。</p>

<h2>2.关于继承</h2>

<p>&nbsp;&nbsp;&nbsp; 在动态模型里如果模型B继承模型A，那么模型B只继承模型A的行为，而不继承属性和子节点。这一点看起来和Java等面向对象编程方法不同，这是因为动态模型的继承是对象之间的继承，不是类之间的继承。</p>

<p>&nbsp;&nbsp;&nbsp; 如果是类之间的继承，即如果模型B继承模型A，而模型B是模型C的类，那么模型B也继承模型A对模型C的描述。比如模型A是动物，模型B是人，人继承动物，而模型C是模型B的实例，那么模型C也有模型所描述的属性和行为。</p>

<p>&nbsp;&nbsp;&nbsp; 因此动态模型中的继承和Java等继承概念最终是一样的。</p>

<h2>3.编程方法</h2>

<p>&nbsp;&nbsp;&nbsp; 和其它面向对象编程方法一样，通常是先定义类，然后使用类来实例化对象，最后运行的是对象。</p>

<p>&nbsp;&nbsp;&nbsp; 以上过程在动态模型里就是：使用MetaThing创建类模型， 使用类模型编辑对象模型，最后运行对象模型。</p>

<p>&nbsp;&nbsp;&nbsp; 其中MetaThing是XWorker中的一种特殊模型，MetaThing专门用来编辑类模型。</p>

<h2>4.动态</h2>

<p>&nbsp;&nbsp;&nbsp; 动态模型中对象、类和继承是可以随时修改的，因此对象可以是动态的。</p>
]]></description>
</QuickFunction>