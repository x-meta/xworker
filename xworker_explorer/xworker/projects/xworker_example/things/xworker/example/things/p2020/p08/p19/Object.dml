<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="Object" descriptors="xworker.swt.xworker.ThingRegistThing" label="对象" type="thingDesc"
     group="dynamicModel.object" groupDescriptor="true" icon="icons/html.png" th_sortWeight="100"
     simpleBrowser="true" th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>对象</h1>

<h2>1.对象</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 在动态模型里每一个模型都被当成对象，对象是由属性、子节点和行为组成的。</p>

<h3>1.1.对象的属性</h3>

<p>&nbsp;&nbsp;&nbsp; 模型是像XML这样的树形结构的数据，对象的属性就是树节点中的属性。</p>

<pre class="brush:groovy;">
//获取一个模型
Thing thing = World.getInstance().getThing(xxx);

//获取属性的性，key是属性的名字
Object value = thing.get((String) key);

//通过getXXX获取属性的值，属性的值会强转成xxx类型
int value = thing.getInt((String) key);

//设置属性
thing.put((String) key, (Object) value);</pre>

<h3>1.2.对象的子节点</h3>

<pre class="brush:groovy;">
//获取一个模型
Thing thing = World.getInstance().getThing(xxx);

//获取模型的子节点
List&lt;Thing&gt; childs = thing.getChilds();

//添加子节点
thing.addChild(new Thing());</pre>

<h3>1.3.对象的行为</h3>

<pre class="brush:groovy;">
//执行模型的行为
Thing thing = World.getInstance().getThing(xxx);

//执行行为，name是行为的名字，传递参数的方法同动作
thing.doAction((String) name, actionContext);</pre>

<h4>1.3.1.对象行为的定义</h4>

<p>&nbsp;&nbsp;&nbsp; 在XWorker的动态模型引擎里规定一个模型的第一个类名为actions的子节点下的模型是它的行为定义。</p>

<pre class="brush:xml;">
&lt;Person&gt;
    &lt;actions&gt;
        &lt;GroovyAction name=&quot;sayHello&quot;/&gt;
    &lt;/actions&gt;
&lt;/Person&gt;</pre>

<p>&nbsp;&nbsp;&nbsp; 如上面示意的XML代码中，Person有一个名字为sayHello的行为。</p>

<h4>1.3.2.对象行为的继承</h4>

<p>&nbsp;&nbsp;&nbsp; 一个对象的行为可以继承自它的类，也可以继承自它所继承的其它对象。</p>

<p>&nbsp;&nbsp;&nbsp; 行为具有优先级。比如人是张三的类，人继承动物，如果三者都定义了sayHello方法，那么张三的sayHello方法生效。如果张三没有定义sayHello，那么人的sayHello方法生效。如果人也没有定义sayHello方法，那么动物所定义的sayHello方法生效。</p>

<p>&nbsp;&nbsp;&nbsp; 动态模型实现了面向对象的编程方法，面向对象是动态模型的主要编程方法之一。</p>
]]></description>
</QuickFunction>