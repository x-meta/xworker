^1459697268331
@
sname
CullTest
slabel
CullTest
sdescriptors
xworker.libgdx.Screen
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
@/@actions
sname
actions
sdescriptors
xworker.libgdx.Screen/@actions1
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_mark
false
sid
actions
@/@actions/@render
sname
render
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
import java.util.Random;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.VertexAttributes.Usage;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.graphics.g3d.Model;
import com.badlogic.gdx.graphics.g3d.ModelBatch;
import com.badlogic.gdx.graphics.g3d.ModelInstance;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
import com.badlogic.gdx.math.Vector3;

GL20 gl = Gdx.gl20;

		gl.glClearColor(0, 0, 0, 0);
		gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
		gl.glEnable(GL20.GL_DEPTH_TEST);

		cam.update();
		modelBatch.begin(cam);

		int visible = 0;
		for (int i = 0; i < instances.length; i++) {
			instances[i].transform.getTranslation(pos);
			if (cam.frustum.sphereInFrustum(pos, 1)) {
				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.WHITE);
				visible++;
			} else {
				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.RED);
			}
			modelBatch.render(instances[i]);
		}
		modelBatch.end();

		if (Gdx.input.isKeyPressed(Keys.A)) cam.rotate(20 * Gdx.graphics.getDeltaTime(), 0, 1, 0);
		if (Gdx.input.isKeyPressed(Keys.D)) cam.rotate(-20 * Gdx.graphics.getDeltaTime(), 0, 1, 0);

		gl.glDisable(GL20.GL_DEPTH_TEST);
		batch.begin();
		font.draw(batch, "visible: " + visible + "/100" + ", fps: " + Gdx.graphics.getFramesPerSecond(), 0, 20);
		batch.end();
#$@text#$@
sinterpretationType
Action
screateLocalVarScope
false
ssaveReturn
false
sdebugLog
false
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_mark
false
sid
render
@/@actions/@dispose
sname
dispose
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
batch.dispose();
		font.dispose();
		sphere.dispose();
#$@text#$@
sinterpretationType
Action
screateLocalVarScope
false
ssaveReturn
false
sdebugLog
false
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_mark
false
sid
dispose
@/@init
sname
init
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
import java.util.Random;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.VertexAttributes.Usage;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.graphics.g3d.Model;
import com.badlogic.gdx.graphics.g3d.ModelBatch;
import com.badlogic.gdx.graphics.g3d.ModelInstance;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
import com.badlogic.gdx.math.Vector3;

instances = new ModelInstance[100];
pos = new Vector3();

ModelBuilder builder = new ModelBuilder();
sphere = builder.createSphere(2f, 2f, 2f, 16, 16, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)),
	Usage.Position | Usage.Normal);
// cam = new PerspectiveCamera(45, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
cam = new OrthographicCamera((float) 45, (float) (45 * (Gdx.graphics.getWidth() / (float)Gdx.graphics.getHeight())));

cam.near = 1;
cam.far = 200;

Random rand = new Random();
for (int i = 0; i < instances.length; i++) {
	pos.set((float) (rand.nextFloat() * 100 - rand.nextFloat() * 100), (float) (rand.nextFloat() * 100 - rand.nextFloat() * 100),
		(float) (rand.nextFloat() * -100 - 3));
	instances[i] = new ModelInstance(sphere, pos);
}
modelBatch = new ModelBatch();

batch = new SpriteBatch();
font = new BitmapFont();

def g = actionContext.getScope(0);
g.put("instances", instances);
g.put("pos", pos);
g.put("sphere", sphere);
g.put("cam", cam);
g.put("modelBatch", modelBatch);
g.put("batch", batch);
g.put("font", font);
#$@text#$@
sinterpretationType
Action
screateLocalVarScope
false
ssaveReturn
false
sdebugLog
false
sdescriptors
xworker.libgdx.Screen/@Code
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_mark
false
sid
init
