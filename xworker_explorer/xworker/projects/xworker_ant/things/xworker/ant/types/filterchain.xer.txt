@xworker.ant.types.filterchain
sname
filterchain
slabel
filterchain
sdescriptors
xworker.lang.MetaDescriptor3
sextends
xworker.ant.antthing
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
Sdescription
#$@text#$@
<p><span style="widows: 2; text-transform: none; text-indent: 0px; display: inline !important; font: medium Simsun; white-space: normal; orphans: 2; float: none; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Consider the flexibility of Unix pipes. If you wanted, for example, to copy just those lines that contained the string blee from the first 10 lines of a text file 'foo' (</span><em style="line-height: normal; widows: 2; text-transform: none; font-variant: normal; text-indent: 0px; font-family: Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: rgb(0,0,0); font-size: medium; font-weight: normal; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">you wouldn't want to filter a binary file</em><span style="widows: 2; text-transform: none; text-indent: 0px; display: inline !important; font: medium Simsun; white-space: normal; orphans: 2; float: none; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">) to a file 'bar', you would do something like:</span></p>
<p style="widows: 2; text-transform: none; text-indent: 0px; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px"><code>cat foo|head -n10|grep blee &gt; bar</code></p>
<p style="widows: 2; text-transform: none; text-indent: 0px; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">Apache Ant was not flexible enough. There was no way for the<span class="Apple-converted-space">&nbsp;</span><code>&lt;copy&gt;</code><span class="Apple-converted-space">&nbsp;</span>task to do something similar. If you wanted the<span class="Apple-converted-space">&nbsp;</span><code>&lt;copy&gt;</code><span class="Apple-converted-space">&nbsp;</span>task to get the first 10 lines, you would have had to create special attributes:</p>
<p style="widows: 2; text-transform: none; text-indent: 0px; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px"><code>&lt;copy file=&quot;foo&quot; tofile=&quot;bar&quot; head=&quot;10&quot; contains=&quot;blee&quot;/&gt;</code></p>
<p style="widows: 2; text-transform: none; text-indent: 0px; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">The obvious problem thus surfaced: Ant tasks would not be able to accommodate such data transformation attributes as they would be endless. The task would also not know in which order these attributes were to be interpreted. That is, must the task execute the contains attribute first and then the head attribute or vice-versa? What Ant tasks needed was a mechanism to allow pluggable filter (data transformer) chains. Ant would provide a few filters for which there have been repeated requests. Users with special filtering needs would be able to easily write their own and plug them in.</p>
<p style="widows: 2; text-transform: none; text-indent: 0px; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">The solution was to refactor data transformation oriented tasks to support FilterChains. A FilterChain is a group of ordered FilterReaders. Users can define their own FilterReaders by just extending the java.io.FilterReader class. Such custom FilterReaders can be easily plugged in as nested elements of<span class="Apple-converted-space">&nbsp;</span><code>&lt;filterchain&gt;</code><span class="Apple-converted-space">&nbsp;</span>by using<span class="Apple-converted-space">&nbsp;</span><code>&lt;filterreader&gt;</code><span class="Apple-converted-space">&nbsp;</span>elements.</p>
<p><a href="http://ant.apache.org/manual/Types/filterchain.html">ant.apache.org/manual/Types/filterchain.html</a></p>
#$@text#$@
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader
sname
filterreader
sdescriptors
xworker.lang.MetaDescriptor3/@thing
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader/@classname
sname
classname
ssize
60
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader/@classpath
sname
classpath
sdescriptors
xworker.lang.MetaDescriptor3/@thing
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader/@classpath/@pathelement
sname
pathelement
sdescriptors
xworker.lang.MetaDescriptor3/@thing
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader/@classpath/@pathelement/@path
sname
path
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader/@param
sname
param
sdescriptors
xworker.lang.MetaDescriptor3/@thing
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader/@param/@name
sname
name
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.ant.types.filterchain/@filterreader/@param/@value
sname
value
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
