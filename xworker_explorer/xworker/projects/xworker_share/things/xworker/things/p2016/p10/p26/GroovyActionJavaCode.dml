%1477559358143
@
sname=GroovyActionJavaCode
slabel=GroovyActionJavaCode
sdescriptors=xworker.lang.MetaDescriptor3
smany=true
seditCols=2
sinitialization=false
smodifier=public
sinheritDescription=false
Sdescription=
#$@text#$@
<pre class="brush:java;">
/*******************************************************************************
* Copyright 2007-2013 See AUTHORS file.
 * 
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*   http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
package xworker.actions;

import groovy.lang.Binding;
import groovy.lang.Script;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.codehaus.groovy.control.CompilerConfiguration;
import org.codehaus.groovy.control.MultipleCompilationErrorsException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xmeta.Action;
import org.xmeta.ActionContext;
import org.xmeta.ActionException;
import org.xmeta.Bindings;
import org.xmeta.Thing;
import org.xmeta.World;
import org.xmeta.thingManagers.FileThingManager;
import org.xmeta.util.UtilAction;

public class GroovyAction {
	private static Logger log = LoggerFactory.getLogger(GroovyAction.class);	
	private static List&lt;String&gt; codeAssistorCachesList = new ArrayList&lt;String&gt;();
	
	public static void addCodeAssistorCache(Thing thing){
		String path = thing.getMetadata().getPath();
		if(!codeAssistorCachesList.contains(path)){
			codeAssistorCachesList.add(path);
		}
	}
	
	public static Object run(ActionContext context) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException{				
		//脚本的上下文		
		Bindings bindings = context.getScope(context.getScopesSize() - 2);
		
		World world = bindings.world;
		Action action = null;
		if(bindings.getCaller() instanceof Thing){
			Thing actionThing = (Thing) bindings.getCaller();
			action = actionThing.getAction();
			action.checkChanged();
		}else{
			action = (Action) bindings.getCaller();
		}
		
		if(action == null){
			log.error(&quot;er&quot;);
		}
		//log.info(&quot;run groovy action : &quot; + action.thing.getMetadata().getPath());
		
		if(action.actionClass == null || action.changed){
			//查看代码是否需要重新编译			
			boolean recompile = false;
			if(action.changed){
				recompile = true;
			}
			if(action.actionClass == null){
				File classFile = new File(action.classFileName);
				if(!classFile.exists()){
					recompile = true;
				}
			}
			
			if(recompile &amp;&amp; world.getMode() == World.MODE_PROGRAMING){
				//重新编译并装载脚本
				Thing actionThing = action.getThing();
				if(actionThing.getStringBlankAsNull(&quot;outterClassName&quot;) == null){
					String className = actionThing.getStringBlankAsNull(&quot;innerClassName&quot;);
	
					org.codehaus.groovy.tools.Compiler compiler;
					Properties prop = new Properties();
					prop.setProperty(&quot;groovy.target.directory&quot;, world.getPath()
							+ &quot;/actionClasses&quot;);
					prop.setProperty(&quot;groovy.classpath&quot;, action.getCompileClassPath());
					CompilerConfiguration config = new CompilerConfiguration(prop);
					config.setSourceEncoding(&quot;utf-8&quot;);
					//System.out.println(config.getClasspath());
					compiler = new org.codehaus.groovy.tools.Compiler(config);
					
					File codeFile = null;
					if(className != null){
						if(!(actionThing.getMetadata().getThingManager() instanceof FileThingManager)){
							throw new ActionException(&quot;Innter class only used in FileThingManager, actionThing=&quot; + actionThing.getMetadata().getPath());
						}
						
						FileThingManager manager = (FileThingManager) actionThing.getMetadata().getThingManager();
						codeFile = new File(manager.getFilePath(), className.replace(&#39;.&#39;, &#39;/&#39;) + &quot;.groovy&quot;);
					}else{
						//更新代码
						codeFile = new File(action.fileName + &quot;.groovy&quot;);
						if(!codeFile.exists()){
							codeFile.getParentFile().mkdirs();
						}
						
						FileOutputStream fout = new FileOutputStream(codeFile);
						try{					
							fout.write((&quot;/*path:&quot; + action.getThing().getMetadata().getPath() + &quot;*/
&quot;).getBytes());
							if(action.packageName != null &amp;&amp; !&quot;&quot;.equals(action.packageName)){
								fout.write((&quot;package &quot; + action.packageName + &quot;;

&quot;).getBytes());
							}
							fout.write(action.code.getBytes(&quot;utf-8&quot;));
							
						}finally{
							fout.close();
						}
					}
					
					//int dotIndex = action.className.lastIndexOf(&quot;.&quot;);			
					//String compileClassName = action.className.substring(dotIndex + 1, action.className.length());
					//compiler.compile(file);
					try{
						compiler.compile(codeFile);
						//log.info(&quot;compile groovy &quot; + action.getThing().getMetadata().getPath());
						action.updateCompileTime();					
					}catch(MultipleCompilationErrorsException me){
						log.error(&quot;compile groovy code : &quot; + action.getThing().getMetadata().getPath());
						throw me;
					}
				}
			}
			action.changed = false;
		}
		
		if(action.actionClass == null){
			Thing actionThing = action.getThing();
			String className = actionThing.getStringBlankAsNull(&quot;outterClassName&quot;);
			if(className != null){
				action.actionClass = action.classLoader.loadClass(className);
			}else{			
				className = actionThing.getStringBlankAsNull(&quot;innerClassName&quot;);
				if(className != null){
					action.actionClass = action.classLoader.loadClass(className);
				}else{
					action.actionClass = action.classLoader.loadClass(action.className);	
				}
			}
			
			java.lang.Compiler.compileClass(action.actionClass);
		}
				
		if(action.actionClass  != null){			
			Script script = (Script) action.actionClass .newInstance();//(Script) action.getData(&quot;script&quot;);
			
			Bindings bindings1 = context.push(null);			
			bindings1.put(&quot;actionContext&quot;, context);
			
			try{
				//取原始的self调用者
				//if(context.getScopesSize() &gt;= 5){
				//	Bindings callerBindings = context.getScope(context.getScopesSize() - 5);
				//	Object self = callerBindings.get(&quot;self&quot;);
				//	bindings1.put(&quot;self&quot;, self);
				//}
				context.pushAction(action);
				
				//代码辅助
				Binding binding = new Binding(context);
				script.setBinding(binding);								
				Object result = script.run();			
				return result;
			}finally{
				//bindings1.remove(&quot;self&quot;);
				context.popAction();
				bindings1.remove(&quot;actionContext&quot;);
				
				Bindings varBindings = UtilAction.getVarScope(action.getThing(), context);
				if(varBindings != null){
					varBindings.putAll(bindings1);
				}
				/*
				 * 2013-06-04 采用UtilAction的方式即X-Meta的默认方式获取变量范围，张玉祥
				String varScope = action.getThing().getString(&quot;varScope&quot;);
                if(&quot;Global&quot;.equals(varScope) || varScope == null){
                	context.getScope(0).putAll(bindings1);
                }else if(&quot;Local&quot;.equals(varScope)){
                	bindings.putAll(bindings1);
                }else{
                    try{
                        int scopeIndex = Integer.parseInt(varScope);
                        if(scopeIndex &gt;= 0){
                        	context.getScope(scopeIndex).putAll(bindings1);
                        }else{
                        	context.getScope(context.getScopesSize() + scopeIndex).putAll(bindings1);
                        }
                    }catch(Exception e){
                        Bindings actionBindings = context.getScope(varScope);
                        if(actionBindings != null){
                            actionBindings.putAll(bindings1);
                        }else{
                            bindings.putAll(bindings1);
                        }
                    }
                }*/
                
				context.pop();								
			}
		}else{
			log.warn(&quot;groovy action &quot; + action.getThing().getMetadata().getPath() + &quot; class is null&quot;);
		}
		
		return null;
	}
}</pre>

<p><a href="do?sc=xworker.ide.worldExplorer.swt.http.ThingDoc/@desc&amp;nohead=true&amp;thing=xworker.things.p2016.p10.p27.SelfDefineAction">返回</a>。</p>
#$@text#$@
snotXmlAttribute=false
sjson_isArray=false
sth_createIndex=false
sth_registMyChilds=false
sth_registDisabled=false
sth_mark=false
