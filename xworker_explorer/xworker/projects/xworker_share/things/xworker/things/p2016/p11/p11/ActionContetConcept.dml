%1497419822264
@
sname=ActionContetConcept
slabel=变量上下文
stype=thingDesc
sgroup=常见概念
sicon=icons/html.png
sth_sortWeight=40
sstyledTextForInsert=parentContext.parentContext.codeText
Sdescription=
#$@text#$@
<h1>变量上下文</h1>

<h2>1.概念解释</h2>

<p>&nbsp;&nbsp;&nbsp; 变量上下文是保存变量的容器，是动作执行时的环境。</p>

<h2>2.变量上下文常用方法</h2>

<pre class="brush:java;">
import org.xmeta.ActionContext;
import org.xmeta.Bindings;

//创建变量上下文
ActionContext actionContext = new ActionContext();

//存入变量，一般不建议这么做，参看下面的Bindings介绍
actionContext.put(String key, Object value);

//获取变量
Object value = actionContext.get(String key);

//栈操作，压入和弹出应该是严格匹配，即在finally中弹出
try{
    Bindings bindings = actionContext.push();
}finally{
    actionContext.pop();
}

//Binding的值设置，变量上下文中的值建议用Bindings设置，因为这样可以实现变量的绝对控制
bindings.put(String key, Object value);
</pre>

<h2>3.变量的控制</h2>

<h3>3.1.栈的作用</h3>

<p>&nbsp;&nbsp;&nbsp; 变量上下文是一个栈，一个同名的变量可以在多个栈中存在，由于在不同的栈中所以它们的值和意义可能都不同。</p>

<p>&nbsp;&nbsp;&nbsp; 栈的作用是通过变量上下文取值时，会返回第一个包含该变量名的栈中的值。通过这个方法可以实现参数传递、变量范围等功能。</p>

<h3>3.2.通过栈设置变量</h3>

<p>&nbsp;&nbsp;&nbsp; 以上也是为什么不建议直接使用ActionContext设置变量的原因。因为通过ActionContext设置变量，会把值设给第一个包含此变量名的栈中。由于此时你可能并不知道这个栈是临时的参数栈，还是全局变量栈等，所以可能会出错。</p>

<p>&nbsp;&nbsp;&nbsp; 因此最好通过栈来设置变量，这样能够对变量做精确的控制。</p>

<p>&nbsp;</p>
#$@text#$@
sen_label=ActionContext
sen_group=Common Concept
sdescriptors=xworker.swt.xworker.ThingRegistThing
sinheritDescription=false
sth_createIndex=true
sth_keywords=actioncontext
sth_registThing=child|xworker.command.CommandAssistorIndex
sth_registMyChilds=false
sth_registDisabled=false
sth_mark=false
