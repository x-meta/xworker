%1548988850955
@
sname=ModelTheory
slabel=5.模型API
stype=swtGuide
sgroup=-9000|编程框架.-960|动态模型.-1000|文档和教程
sicon=icons/application.png
sth_sortWeight=380
sstyledTextForInsert=parentContext.parentContext.codeText
suseTargetThingDoc=false
ssimpleBrowser=false
sen_label=5.API
sen_group=-9000|Programing.-960|Dynamic Model.-1000|Documents
sdescriptors=xworker.swt.xworker.ThingRegistThing
sinheritDescription=false
sth_createIndex=true
sth_registThing=command|xworker.command.Root
sth_registMyChilds=false
sth_registDisabled=false
sth_mark=false
  @/@SwtGuide
  sname=SwtGuide
  sshowHeader=true
  sdescriptors=xworker.swt.xworker.ThingRegistThing/@SwtGuide
  sinheritDescription=false
  sth_createIndex=false
  sth_registMyChilds=false
  sth_registDisabled=false
  sth_mark=false
  sid=SwtGuide
    @/@SwtGuide/@SimpleBrowser
    sname=SimpleBrowser
    slabel=模型API
    stype=thingDoc
    Sdescription=
#$@text#$@
<p>&nbsp;&nbsp;&nbsp; XWorker的动态模型引擎是使用Java编写的，XWorker所使用的模型引擎叫X-Meta引擎， 本教程讲介绍模型引擎相关的API&nbsp;。</p>

<p>&nbsp;&nbsp;&nbsp; 点击<strong>下一步按钮</strong>开始教程。</p>

<p>&nbsp;&nbsp;&nbsp;</p>
#$@text#$@
    sen_label=Api
    sdescriptors=xworker.swt.guide.Guide/@SimpleBrowser
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    Sen_description=
#$@text#$@
<p>&nbsp;&nbsp;&nbsp; XWorker&#39;s dynamic model engine is written in Java. The model engine used by XWorker is called X-Meta engine. This tutorial introduces APIs related to model engine.</p>

<p>&nbsp;&nbsp;&nbsp; Click the <strong>next button </strong>to start the tutorial.</p>

<p>&nbsp;&nbsp;</p>
#$@text#$@
    sth_mark=false
    sid=SimpleBrowser
      @/@SwtGuide/@SimpleBrowser/@Buttons
      sname=Buttons
      sdescriptors=xworker.swt.guide.Node/@Buttons
      sinheritDescription=false
      sth_createIndex=false
      sth_registMyChilds=false
      sth_registDisabled=false
      sth_mark=false
      sid=Buttons
        @/@SwtGuide/@SimpleBrowser/@Buttons/@nextButton
        sname=nextButton
        slabel=下一步
        sen_label=Next
        sdescriptors=xworker.swt.guide.Buttons/@NextButton
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton
    @/@SwtGuide/@SimpleBrowser5
    sname=SimpleBrowser
    slabel=初始化模型引擎
    stype=thingDoc
    Sdescription=
#$@text#$@
<h1>初始化模型引擎</h1>

<h2>1.org.xmeta.World</h2>

<p>&nbsp;&nbsp;&nbsp; 动态模型引擎的入口是org.xmetaWorld，org.xmeta.World是单实例的。</p>

<pre class="brush:groovy;">
import org.xmeta.World;

//获取World的实例
World world = World.getInstance();</pre>

<h2>2.初始化引擎</h2>

<p>&nbsp;&nbsp;&nbsp; 初始化引擎的方法是调用World.init(String path)方法，其中path是模型库的路径。初始化方法一般在系统启动时执行一次。</p>

<h3>2.1.path参数为null</h3>

<p>&nbsp;&nbsp;&nbsp; 首先通过变量名XMETA_HOME或XWORKER_HOME从系统环境变量中获取，如果都不存在则使用当前路径&ldquo;.&rdquo;作为模型库的路径。</p>

<h2>3.模型库的目录结构</h2>

<p>&nbsp;&nbsp;&nbsp; 模型库是X-Meta引擎定义的，在X-Meta引擎初始化时会从模型库下加载模型项目、Java类库和各种配置等，模型库也是模型运行时的工作目录，一些临时文件等也会存放到该目录下。</p>

<ul>
	<li><strong>actionClasses</strong><br />
	脚本和Java等临时编译后的类所在根目录。<br />
	&nbsp;</li>
	<li><strong>actionSources</strong><br />
	脚本和Java等在编译之前的代码所保存的目录。<br />
	&nbsp;</li>
	<li><strong>config</strong><br />
	配置目录。<br />
	&nbsp;</li>
	<li><strong>lib</strong><br />
	Java类库的目录。<br />
	&nbsp;</li>
	<li><strong>lib_&lt;os&gt;_&lt;architecture&gt;</strong><br />
	适合操作系统的Java类库。如lib_linux_x86_64，是linux 64位系统适用的Java类库目录。<br />
	&nbsp;</li>
	<li><strong>library</strong><br />
	存放一些动态连接库的目录。<br />
	&nbsp;</li>
	<li><strong>projects</strong><br />
	模型项目目录，一个目录为一个项目。<br />
	&nbsp;</li>
	<li><strong>scripts</strong><br />
	临时生成的一些脚本的目录。<br />
	&nbsp;</li>
	<li><strong>work</strong><br />
	工作临时目录。有模型控制。</li>
</ul>

<p>&nbsp;&nbsp;&nbsp; 以上目录结构随着X-Meta引擎的变动可能会发生变动，这些目录也不是必须的。</p>

<p>&nbsp;</p>
#$@text#$@
    sen_label=Initialization Model Engine
    sdescriptors=xworker.swt.guide.Guide/@SimpleBrowser
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    Sen_description=
#$@text#$@
<h1>Initialization Model Engine</h1>

<h2>1.org.xmeta.World</h2>

<p>&nbsp;&nbsp;&nbsp; The entry of the dynamic model engine is org.xmeta.World, and org.xmeta.World is a single instance.</p>

<pre class="brush:groovy;">
import org.xmeta.World;

//Get the World instance
World world = World.getInstance();</pre>

<h2>2.Initialization Engine</h2>

<p>&nbsp;&nbsp;&nbsp; The way to initialize the engine is to call the World. init (String path) method, where path is the path of the model library. Initialization methods are usually executed once at system startup.</p>

<h3>2.1.When path is null</h3>

<p>&nbsp;&nbsp;&nbsp; Firstly, the variable name XMETA_HOME or XWORKER_HOME is obtained from the system environment variables, and if none exists, the current path &quot;.&quot; is used as the path of the model library.</p>

<h2>3.Directory structure of model library</h2>

<p>&nbsp;&nbsp;&nbsp;The directory structure of the model library is defined by X-Meta engine. When the X-Meta engine is initialized, model projects, Java class libraries and various configurations are loaded from the model library. The model library is also the working directory of the model runtime, and some temporary files are stored in the directory.</p>

<ul>
	<li><strong>actionClasses</strong><br />
	The root directory of temporarily compiled classes such as scripts and Java.<br />
	&nbsp;</li>
	<li><strong>actionSources</strong><br />
	Directories saved by scripts, Java, etc. before compilation.<br />
	&nbsp;</li>
	<li><strong>config</strong><br />
	Config directory.<br />
	&nbsp;</li>
	<li><strong>lib</strong><br />
	A directory of Java class libraries.<br />
	&nbsp;</li>
	<li><strong>lib_&lt;os&gt;_&lt;architecture&gt;</strong><br />
	Java class libraries for operating systems. For example, lib_linux_x86_64 is a Java Class Library Directory suitable for Linux 64-bit systems.<br />
	&nbsp;</li>
	<li><strong>library</strong><br />
	A directory that stores some dynamic connection libraries.<br />
	&nbsp;</li>
	<li><strong>projects</strong><br />
	Model project directory, a directory for a project.<br />
	&nbsp;</li>
	<li><strong>scripts</strong><br />
	A directory of temporarily generated scripts.<br />
	&nbsp;</li>
	<li><strong>work</strong><br />
	Temporary directory of work. Model engine control.</li>
</ul>

<p>&nbsp;&nbsp;&nbsp; The above directory structure may change as the X-Meta engine changes, and some directories are not required.</p>

<p>&nbsp;</p>
#$@text#$@
    sth_mark=false
    sid=SimpleBrowser5
      @/@SwtGuide/@SimpleBrowser5/@Buttons
      sname=Buttons
      sdescriptors=xworker.swt.guide.Node/@Buttons
      sinheritDescription=false
      sth_createIndex=false
      sth_registMyChilds=false
      sth_registDisabled=false
      sth_mark=false
      sid=Buttons
        @/@SwtGuide/@SimpleBrowser5/@Buttons/@nextButton
        sname=nextButton
        slabel=上一步
        sen_label=Previous
        sdescriptors=xworker.swt.guide.Buttons/@NextButton1
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton
        @/@SwtGuide/@SimpleBrowser5/@Buttons/@nextButton1
        sname=nextButton
        slabel=下一步
        sen_label=Next
        sdescriptors=xworker.swt.guide.Buttons/@NextButton
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton1
    @/@SwtGuide/@SimpleBrowser6
    sname=SimpleBrowser
    slabel=获取模型
    stype=thingDoc
    Sdescription=
#$@text#$@
<h2>获取模型</h2>

<h2>1.org.xmeta.Thing</h2>

<p>&nbsp;&nbsp;&nbsp; 模型对应引擎中的类是org.xmeta.Thing。</p>

<h2>2.获取模型</h2>

<p>&nbsp;&nbsp;&nbsp; 模型是通过World获取的，获取时需要指定模型的路径。</p>

<pre class="brush:groovy;">
import org.xmeta.Thing;
import org.xmeta.World;

//获取引擎
World world = World.getInstance();

//获取模型, xxx是模型的路径
Thing thing = world.getThing(xxx);
</pre>

<h2>3.模型的路径</h2>

<h3>3.1.包名</h3>

<p>&nbsp;&nbsp;&nbsp; 如同Java的Package，模型可以放在目录下，它所在的目录组成了它的包名，如xworker.lang。</p>

<p>&nbsp;&nbsp;&nbsp; 由于Package是Java的类，X-Meta引擎使用了Category。</p>

<h3>3.2.文件名</h3>

<p>&nbsp;&nbsp;&nbsp; 文件名是模型的文件名去掉后缀的部分，如模型HelloWorld.dml的文件名是HelloWorld。</p>

<h3>3.3.子节点</h3>

<p>&nbsp;&nbsp;&nbsp; 模型可以包含子节点，在路径里子节点是用/@&lt;nodeId&gt;来表示的，一个模型的子节点中的id是不重复的。</p>

<h3>3.4.路径示例</h3>

<ul>
	<li><strong>不包括子节点</strong><br />
	xworker.lang.MetaDescriptor3<br />
	&nbsp;</li>
	<li><strong>包括子节点</strong><br />
	xworker.lang.MetaDescritpor3/@thing</li>
</ul>

<p>&nbsp;</p>
#$@text#$@
    sen_label=Acquisition model
    sdescriptors=xworker.swt.guide.Guide/@SimpleBrowser
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    Sen_description=
#$@text#$@
<h1>Acquisition model</h1>

<h2>1.org.xmeta.Thing</h2>

<p>&nbsp;&nbsp;&nbsp; The class in the model&#39;s corresponding engine is org.xmeta.Thing.</p>

<h2>2.Acquisition model</h2>

<p>&nbsp;&nbsp;&nbsp; The model is acquired through World, and the path of the model needs to be specified when it is acquired.</p>

<pre class="brush:groovy;">
import org.xmeta.Thing;
import org.xmeta.World;

//Get the engine
World world = World.getInstance();

//Get the model, xxx is the path of model
Thing thing = world.getThing(xxx);
</pre>

<h2>3.The path fo model</h2>

<h3>3.1.Category</h3>

<p>&nbsp;&nbsp;&nbsp; Like Package in Java, the model can be placed in a directory where its package name is composed, such as xworker.lang.</p>

<h3>3.2.Model name</h3>

<p>&nbsp;&nbsp;&nbsp; The model name is the file name of the model with the suffix removed. For example, the file name of the model HelloWorld.dml is HelloWorld.</p>

<h3>3.3.Child node</h3>

<p>&nbsp;&nbsp;&nbsp; The model can contain sub-nodes, which are represented by /@&lt;nodeId&gt; in the path. The ID in the sub-nodes of a model is not repetitive.</p>

<h3>3.4.Path sample</h3>

<ul>
	<li><strong>Excluding child nodes</strong><br />
	xworker.lang.MetaDescriptor3<br />
	&nbsp;</li>
	<li><strong>Including child nodes</strong><br />
	xworker.lang.MetaDescritpor3/@thing</li>
</ul>

<p>&nbsp;</p>
#$@text#$@
    sth_mark=false
    sid=SimpleBrowser6
      @/@SwtGuide/@SimpleBrowser6/@Buttons
      sname=Buttons
      sdescriptors=xworker.swt.guide.Node/@Buttons
      sinheritDescription=false
      sth_createIndex=false
      sth_registMyChilds=false
      sth_registDisabled=false
      sth_mark=false
      sid=Buttons
        @/@SwtGuide/@SimpleBrowser6/@Buttons/@nextButton
        sname=nextButton
        slabel=上一步
        sen_label=Previous
        sdescriptors=xworker.swt.guide.Buttons/@NextButton1
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton
        @/@SwtGuide/@SimpleBrowser6/@Buttons/@nextButton1
        sname=nextButton
        slabel=下一步
        sen_label=Next
        sdescriptors=xworker.swt.guide.Buttons/@NextButton
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton1
    @/@SwtGuide/@SimpleBrowser2
    sname=SimpleBrowser
    slabel=数据相关的方法
    stype=thingDoc
    Sdescription=
#$@text#$@
<h1>模型的方法-数据</h1>

<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 模型是树形结构的数据，可以用XML来表示，本文主要介绍作为数据时模型的主要方法。</p>

<h2>1.节点属性相关的方法</h2>

<p>&nbsp;&nbsp;&nbsp; 模型的节点中的属性是放到Map中的，主要方法如下。</p>

<ul>
	<li><strong>void put(String name, Object value)</strong><br />
	放入一个属性，属性可以是Java对象。<br />
	如：thing.put(&quot;width&quot;, 1024);<br />
	&nbsp;</li>
	<li><strong>Object get(String name)</strong><br />
	返回一个属性的值。<br />
	如:Object width = thing.get(&quot;width&quot;);<br />
	&nbsp;</li>
	<li><strong>Xxx getXxx(String name)</strong><br />
	返回Xxx类型的属性，会把属性转化为对应Xxx类型。<br />
	如：int width = thing.getInt(&quot;width&quot;);</li>
</ul>

<h2>2.&nbsp;子节点相关的方法</h2>

<p>&nbsp;&nbsp;&nbsp; 模型子节点放在List&lt;org.xmeta.Thing&gt;中，Thing中操作子节点的方法主要如下。</p>

<ul>
	<li><strong>List&lt;Thing&gt; getChilds()</strong><br />
	返回所有子节点列表。<br />
	&nbsp;</li>
	<li><strong>List&lt;Thing&gt; getChilds(String thingName)</strong><br />
	返回指定事物名（类名）的子节点列表。比如getChilds(&quot;Button&quot;)，返回事物名为Button的子节点列表。<br />
	&nbsp;</li>
	<li><strong>Thing getThing(String path)</strong><br />
	返回一个子节点。比如gewuhing(&quot;Button@0&quot;)，返回事物名为Button的第一个子节点，如果没有返回null。<br />
	&nbsp;</li>
	<li><strong>void addChild(Thing child)</strong><br />
	添加一个子节点到末尾。<br />
	&nbsp;</li>
	<li><strong>void addChild(Thing child, int index)</strong><br />
	添加一个子节点到指定索引位置。</li>
</ul>

<h3>3.父节点相关的方法</h3>

<ul>
	<li><strong>Thing getParent()</strong><br />
	返回父节点模型，有可能为null。<br />
	&nbsp;</li>
	<li><strong>Thing getRoot()</strong><br />
	返回根节点模型，有可能为null。</li>
</ul>

<p>&nbsp;</p>

<ul>
</ul>
#$@text#$@
    sen_label=Data-related methods
    sdescriptors=xworker.swt.guide.Guide/@SimpleBrowser
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    Sen_description=
#$@text#$@
<h1>Data-related methods</h1>

<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; The model is a tree-structured data, which can be represented by XML. This paper mainly introduces the main method of data-time model.</p>

<h2>1.The Method of Node Attribute Relevance</h2>

<p>&nbsp;&nbsp;&nbsp; The attributes in the nodes of the model are put into Map. The main methods are as follows.</p>

<ul>
	<li><strong>void put(String name, Object value)</strong><br />
	Put in an attribute, which can be a Java object.<br />
	For exmaple：thing.put(&quot;width&quot;, 1024);<br />
	&nbsp;</li>
	<li><strong>Object get(String name)</strong><br />
	Returns the value of an attribute.<br />
	For example: Object width = thing.get(&quot;width&quot;);<br />
	&nbsp;</li>
	<li><strong>X getX(String name)</strong><br />
	Returning an attribute of type X translates the attribute into the corresponding X type.<br />
	For example：int width = thing.getInt(&quot;width&quot;);</li>
</ul>

<h2>2.&nbsp;Subnode-related methods</h2>

<p>&nbsp;&nbsp;&nbsp; Model sub-nodes are placed in List &lt;org.xmeta.Thing&gt;, and the main methods of operating sub-nodes in Thing are as follows.</p>

<ul>
	<li><strong>List&lt;Thing&gt; getChilds()</strong><br />
	Returns all child nodes.<br />
	&nbsp;</li>
	<li><strong>List&lt;Thing&gt; getChilds(String thingName)</strong><br />
	Returns a list of child nodes of the specified object name (class name). For example, getChilds (&quot;Button&quot;) returns a list of child nodes whose name is Button.<br />
	&nbsp;</li>
	<li><strong>Thing getThing(String path)</strong><br />
	Returns a child node. For example, gewuhing (&quot;Button@0&quot;) returns the first child of the object named Button, if it does not return null.<br />
	&nbsp;</li>
	<li><strong>void addChild(Thing child)</strong><br />
	Add a child node to the end.<br />
	&nbsp;</li>
	<li><strong>void addChild(Thing child, int index)</strong><br />
	Add a child node to the specified index location.</li>
</ul>

<h3>3.Parent-node-related methods</h3>

<ul>
	<li><strong>Thing getParent()</strong><br />
	Returns the parent node model, possibly null.<br />
	&nbsp;</li>
	<li><strong>Thing getRoot()</strong><br />
	Returns the root node model, possibly null.</li>
</ul>

<p>&nbsp;</p>
#$@text#$@
    sth_mark=false
    sid=SimpleBrowser2
      @/@SwtGuide/@SimpleBrowser2/@Buttons
      sname=Buttons
      sdescriptors=xworker.swt.guide.Node/@Buttons
      sinheritDescription=false
      sth_createIndex=false
      sth_registMyChilds=false
      sth_registDisabled=false
      sth_mark=false
      sid=Buttons
        @/@SwtGuide/@SimpleBrowser2/@Buttons/@nextButton
        sname=nextButton
        slabel=上一步
        sen_label=Previous
        sdescriptors=xworker.swt.guide.Buttons/@NextButton1
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton
        @/@SwtGuide/@SimpleBrowser2/@Buttons/@nextButton1
        sname=nextButton
        slabel=下一步
        sen_label=Next
        sdescriptors=xworker.swt.guide.Buttons/@NextButton
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton1
    @/@SwtGuide/@SimpleBrowser7
    sname=SimpleBrowser
    slabel=面向对象相关的方法
    stype=thingDoc
    Sdescription=
#$@text#$@
<h1>面向对象相关的方法</h1>

<p>&nbsp;&nbsp;&nbsp; 动态模型是面向对象的，模型也是对象。</p>

<h2>1.类相关的方法</h2>

<ul>
	<li><strong>Thing getDescriptor()</strong><br />
	返回模型的第一个类（描述者）。<br />
	&nbsp;</li>
	<li><strong>Thing getDescriptors()</strong><br />
	返回模型的所有类的列表。<br />
	&nbsp;</li>
	<li><strong>void removeDescriptor(Thing descriptor)</strong><br />
	移除一个类。<br />
	&nbsp;</li>
	<li><strong>void addDescriptor(int index, Thing/String descritpor)</strong><br />
	添加一个类。<br />
	&nbsp;</li>
	<li><strong>String getThingName()</strong><br />
	返回第一个类的名字。相当于Java的object.getClass().getSimpleName()。<br />
	&nbsp;</li>
	<li><strong>boolean isThingByName(String thingName)</strong><br />
	相当于Java的instanceof，只是使用的getThingName()来判断的。<br />
	&nbsp;</li>
	<li><strong>boolean isThing(Thing/String descriptor)</strong><br />
	相当于Java的instanceof，类必须是全路径的。</li>
</ul>

<h2>2.继承相关的方法</h2>

<ul>
	<li><strong>List&lt;Thing&gt; getExtends()</strong><br />
	返回当前模型设置的继承模型列表。<br />
	&nbsp;</li>
	<li><strong>List&lt;Thing&gt; getAllExtends()</strong><br />
	返回所有的继承列表，包括模型的继承的继承......。<br />
	&nbsp;</li>
	<li><strong>void addExtend(int index, Thing thing)</strong><br />
	添加一个继承。<br />
	&nbsp;</li>
	<li><strong>void removeExtend(Thing thing)</strong><br />
	移除一个继承。</li>
</ul>

<h2>3.执行模型的行为</h2>

<h3>3.1.执行一个行为</h3>

<pre class="brush:groovy;">
Object result = thing.doAction(actionName, new ActionContext());</pre>

<p>&nbsp;&nbsp;&nbsp; actionName为行为的名称。</p>

<h3>3.2.使用Map&lt;String, Object&gt;传参</h3>

<pre class="brush:groovy;">
Map&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;()
Object result = thing.doAction(actionName, new ActionContext(), params);</pre>

<h3>3.3.使用Object...传参</h3>

<pre class="brush:groovy;">
Object result = thing.doAction(actionName, new ActionContext(), &quot;param1Name&quot;, param1Value, &quot;param2Name&quot;, param2Value ......);</pre>

<p>&nbsp;&nbsp;&nbsp; 在这里name和value要成对出现。</p>
#$@text#$@
    sen_label=Object-Oriented Related Methods
    sdescriptors=xworker.swt.guide.Guide/@SimpleBrowser
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    Sen_description=
#$@text#$@
<h1>Object-Oriented Related Methods</h1>

<p>&nbsp;&nbsp;&nbsp; Dynamic model is object-oriented, and model is also object.</p>

<h2>1.Class-related methods</h2>

<ul>
	<li><strong>Thing getDescriptor()</strong><br />
	Returns the first class(descriptor) of the model.<br />
	&nbsp;</li>
	<li><strong>Thing getDescriptors()</strong><br />
	Returns a list of all classes of the model.<br />
	&nbsp;</li>
	<li><strong>void removeDescriptor(Thing descriptor)</strong><br />
	Remove a class.<br />
	&nbsp;</li>
	<li><strong>void addDescriptor(int index, Thing/String descritpor)</strong><br />
	Add a class.<br />
	&nbsp;</li>
	<li><strong>String getThingName()</strong><br />
	Returns the name of the first class. Equivalent to Java&#39;s object. getClass (). getSimpleName ().<br />
	&nbsp;</li>
	<li><strong>boolean isThingByName(String thingName)</strong><br />
	Equivalent to Java instanceof, it is only judged by using getThingName ().<br />
	&nbsp;</li>
	<li><strong>boolean isThing(Thing/String descriptor)</strong><br />
	Equivalent to Java instanceof, classes must be full path.</li>
</ul>

<h2>2.Inheritance-related methods</h2>

<ul>
	<li><strong>List&lt;Thing&gt; getExtends()</strong><br />
	Returns a list of inheritance models set by the current model.<br />
	&nbsp;</li>
	<li><strong>List&lt;Thing&gt; getAllExtends()</strong><br />
	Returns all inheritance lists, including the inheritance of the model....<br />
	&nbsp;</li>
	<li><strong>void addExtend(int index, Thing thing)</strong><br />
	Add an inheritance.<br />
	&nbsp;</li>
	<li><strong>void removeExtend(Thing thing)</strong><br />
	Remove an inheritance.</li>
</ul>

<h2>3.Behavior of models</h2>

<h3>3.1.Execute an action</h3>

<pre class="brush:groovy;">
Object result = thing.doAction(actionName, new ActionContext());</pre>

<p>&nbsp;&nbsp;&nbsp; ActionName is the name of the action.</p>

<h3>3.2.Use Map&lt;String, Object&gt; to pass parameters</h3>

<pre class="brush:groovy;">
Map&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;()
Object result = thing.doAction(actionName, new ActionContext(), params);</pre>

<h3>3.3.Use Object... to pass parameters</h3>

<pre class="brush:groovy;">
Object result = thing.doAction(actionName, new ActionContext(), &quot;param1Name&quot;, param1Value, &quot;param2Name&quot;, param2Value ......);</pre>

<p>&nbsp;&nbsp;&nbsp; Here name and value appear in pairs.</p>
#$@text#$@
    sth_mark=false
    sid=SimpleBrowser7
      @/@SwtGuide/@SimpleBrowser7/@Buttons
      sname=Buttons
      sdescriptors=xworker.swt.guide.Node/@Buttons
      sinheritDescription=false
      sth_createIndex=false
      sth_registMyChilds=false
      sth_registDisabled=false
      sth_mark=false
      sid=Buttons
        @/@SwtGuide/@SimpleBrowser7/@Buttons/@nextButton
        sname=nextButton
        slabel=上一步
        sen_label=Previous
        sdescriptors=xworker.swt.guide.Buttons/@NextButton1
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton
        @/@SwtGuide/@SimpleBrowser7/@Buttons/@nextButton1
        sname=nextButton
        slabel=下一步
        sen_label=Next
        sdescriptors=xworker.swt.guide.Buttons/@NextButton
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton1
    @/@SwtGuide/@SimpleBrowser8
    sname=SimpleBrowser
    slabel=模型的存储
    stype=thingDoc
    Sdescription=
#$@text#$@
<h1>模型的存储</h1>

<h2>1.只保存类定义的属性</h2>

<p>&nbsp;&nbsp;&nbsp; 保持模型到存储时只保存类（描述者）所定义过的属性，没有定义的属性则不会保存。</p>

<h2>2.编码格式</h2>

<p>&nbsp;&nbsp;&nbsp; 模型现在大多使用DML的格式也就是XML的格式来存储。初次之外还可以使用其它格式，不过目前DML格式使用的较多。</p>

<h2>3.序列化</h2>

<p>&nbsp;&nbsp;&nbsp; 由于DML格式是文本格式，所以属性的值必须要能够序列化成字符串，并且也要能够反序列化。</p>

<p>&nbsp;&nbsp;&nbsp; X-Meta引擎支持Java基本类型，其它则会调用对象的序列化方法，二进制数据使用Hex字符串来表示。</p>

<h2>4.存储的相关方法</h2>

<ul>
	<li><strong>void save()</strong><br />
	保存当前模型。<br />
	&nbsp;</li>
	<li><strong>void saveAs(String thingManager, String path)</strong><br />
	另存到一个模型项目下，原有的模型保留。<br />
	&nbsp;</li>
	<li><strong>getMetadata().setCoderType()</strong><br />
	改变存储格式。</li>
</ul>

<p>&nbsp;</p>
#$@text#$@
    sen_label=Storage of model
    sdescriptors=xworker.swt.guide.Guide/@SimpleBrowser
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    Sen_description=
#$@text#$@
<h1>Storage of model</h1>

<h2>1.Save only the attributes defined by the class</h2>

<p>&nbsp;&nbsp;&nbsp; Keep the model to store only the attributes defined by the class (descriptor), but not the undefined attributes.</p>

<h2>2.Encoding format</h2>

<p>&nbsp;&nbsp;&nbsp; Most models are now stored in DML format, which is also called XML format. Other formats can be used besides the first time, but currently DML formats are used more.</p>

<h2>3.Serialize</h2>

<p>&nbsp;&nbsp;&nbsp; Since DML format is text format, the values of attributes must be serialized into strings and deserialized.</p>

<p>&nbsp;&nbsp;&nbsp; The X-Meta engine supports Java primitive types, while others call object serialization methods, and binary data is represented by Hex strings.</p>

<h2>4.Relevant methods of storage</h2>

<ul>
	<li><strong>void save()</strong><br />
	Save the current model.<br />
	&nbsp;</li>
	<li><strong>void saveAs(String thingManager, String path)</strong><br />
	Save it to a model project and keep the original model.<br />
	&nbsp;</li>
	<li><strong>getMetadata().setCoderType()</strong><br />
	Change the storage format.</li>
</ul>

<p>&nbsp;</p>
#$@text#$@
    sth_mark=false
    sid=SimpleBrowser8
      @/@SwtGuide/@SimpleBrowser8/@Buttons
      sname=Buttons
      sdescriptors=xworker.swt.guide.Node/@Buttons
      sinheritDescription=false
      sth_createIndex=false
      sth_registMyChilds=false
      sth_registDisabled=false
      sth_mark=false
      sid=Buttons
        @/@SwtGuide/@SimpleBrowser8/@Buttons/@nextButton
        sname=nextButton
        slabel=上一步
        sen_label=Previous
        sdescriptors=xworker.swt.guide.Buttons/@NextButton1
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton
        @/@SwtGuide/@SimpleBrowser8/@Buttons/@nextButton1
        sname=nextButton
        slabel=下一步
        sen_label=Next
        sdescriptors=xworker.swt.guide.Buttons/@NextButton
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton1
    @/@SwtGuide/@SimpleBrowser10
    sname=SimpleBrowser
    slabel=其它API
    stype=thingDoc
    Sdescription=
#$@text#$@
<h1>其它API</h1>

<p>&nbsp;&nbsp;&nbsp; 到目前为止本教程介绍了动态模型入门相关的一些API，动态模型引擎还有一些其它API，具体可以参看X-Meta网站的<a href="http://www.x-meta.org/api/xmeta/overview-summary.html">API文档</a>。</p>

<p>&nbsp;</p>
#$@text#$@
    sen_label=Other API
    sdescriptors=xworker.swt.guide.Guide/@SimpleBrowser
    sinheritDescription=false
    sth_createIndex=false
    sth_registMyChilds=false
    sth_registDisabled=false
    Sen_description=
#$@text#$@
<h1>Other API</h1>

<p>&nbsp;&nbsp;&nbsp; So far, this tutorial has introduced some APIs related to the introduction of dynamic model, dynamic model engine and other APIs. See the <a href="http://www.x-meta.org/api/xmeta/overview-summary.html"><font color="#0066cc">API</font></a> documentation of the X-Meta website for details.</p>

<p>&nbsp;</p>
#$@text#$@
    sth_mark=false
    sid=SimpleBrowser10
      @/@SwtGuide/@SimpleBrowser10/@Buttons
      sname=Buttons
      sdescriptors=xworker.swt.guide.Node/@Buttons
      sinheritDescription=false
      sth_createIndex=false
      sth_registMyChilds=false
      sth_registDisabled=false
      sth_mark=false
      sid=Buttons
        @/@SwtGuide/@SimpleBrowser10/@Buttons/@nextButton
        sname=nextButton
        slabel=上一步
        sen_label=Previous
        sdescriptors=xworker.swt.guide.Buttons/@NextButton1
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=nextButton
        @/@SwtGuide/@SimpleBrowser10/@Buttons/@GoButton
        sname=GoButton
        slabel=重新开始教程
        sen_label=Restart Tutorial
        sthingPath=xworker.things.p2018.p12.p06.ModelTheory/@SwtGuide/@SimpleBrowser
        sdescriptors=xworker.swt.guide.Buttons/@GoButton
        sinheritDescription=false
        sth_createIndex=false
        sth_registMyChilds=false
        sth_registDisabled=false
        sth_mark=false
        sid=GoButton
