<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="DynamicModel" descriptors="xworker.swt.xworker.ThingRegistThing" label="动态模型"
     type="thingDesc" group="dynamicModel" groupDescriptor="true" icon="icons/html.png"
     th_sortWeight="-9000" simpleBrowser="true" en_label="Dynamic Model" th_createIndex="true"
     th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>动态模型</h1>

<h2>1.概念</h2>

<p>&nbsp;&nbsp;&nbsp; 动态模型是一个基于模型的面向对象的编程方法，而模型是像XML这样的树形结构的数据。</p>

<p>&nbsp;&nbsp;&nbsp; 动态模型是实时解释执行的，使用它可以实现实时编程，即可以在系统运行时给系统自身编程，可以动态增加和修改系统的功能。</p>

<p>&nbsp;&nbsp;&nbsp; <span style="background-color:rgb(255, 255, 255); color:rgb(51, 51, 51); float:none; font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px">动态模型介于代码和应用之间，如底层的算法可以用代码（如Java)编写，而算法的使用接口可以包装成模型，通过模型可以在应用里动态使用这些算法。</span></p>

<h2>2.用途</h2>

<h3>2.1.快速编程</h3>

<ul>
	<li>模型是像XML这样的数据，通过简单配置就可以编写出模型程序，也可以编写各种工具来帮助编程。</li>
	<li>模型通常是对各种功能的封装，可以快速编写各种应用。</li>
	<li>XWorker已经配置好环境，可以随时编程。</li>
	<li>模型可以导出为可执行的Jar或War，也可以在Java项目中使用动态模型。</li>
</ul>

<h3>2.2.平台</h3>

<ul>
	<li>模型是数据，易于整合。</li>
	<li>使用动态模型可以实时编程，可以随时修改平台本身。</li>
</ul>

<h2>3.原理</h2>

<p>&nbsp;&nbsp;&nbsp; 动态模型的核心是使用<strong>数据</strong>来编程，即使用像XML这样的树形结构的数据来编程，并通过实时解释模型来运行。</p>

<h3>3.1.面向对象</h3>

<p>&nbsp;&nbsp;&nbsp; 动态模型实现了面向对象的编程方法，它把每一个模型都当成对象，并且任何东西都用对象类表示，如类和行为等等。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;模型是像XML这样树形结构的数据，因此对象的属性可以用树节点中的属性和子节点来表示，对象的行为可以用某些子节点来表示，而类和继承等可以理解为对象之间的关系。</p>

<h3>3.2.执行对象</h3>

<p>&nbsp;&nbsp;&nbsp; 实现动态模型的关键是如何执行一个对象，动态模型采用了递归的执行方法。</p>

<ol>
	<li>要执行一个对象，是要执行对象的某个行为。</li>
	<li>对象的行为还是对象，要执行行为对象，规定执行行为对象的名字为run的方法。</li>
	<li>要执行行为对象的名字为run的方法，回到步骤2，行为对象的名字为run的方法也是行为对象。</li>
	<li>以上是递归的，要让递归能够终止，那么规定某些模型是由引擎直接解释执行的。</li>
</ol>

<h2>4.X-Meta引擎和XWorker</h2>

<p>&nbsp;&nbsp;&nbsp; 动态模型已经使用Java实现了，它称为X-Meta引擎。XWorker也是使用动态模型开发的，是动态模型的开发平台和应用平台。</p>

<p>&nbsp;&nbsp;</p>
]]></description>
</QuickFunction>