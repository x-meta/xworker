<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="UsingAction" descriptors="xworker.swt.xworker.ThingRegistThing" label="使用动作"
     type="thingDesc" group="dynamicModel.-1000|Actions.using" groupDescriptor="true"
     icon="icons/html.png" th_sortWeight="-10100" simpleBrowser="true" en_label="Using Action"
     th_createIndex="true" th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>使用动作</h1>

<h2>1.编辑动作模型</h2>

<p>&nbsp;&nbsp;&nbsp; 动作也是模型，理论上任何一个模型都可以转化为动作来执行，所以编辑动作的方法就是编辑模型的方法。</p>

<p>&nbsp;&nbsp;&nbsp; 动作可以作为单独的应用也可以作为其它模型的行为。动作作为单独应用时，常常使用xworker.lang.ActionThing模型来编写。作为对象的行为时则可以在任何一个模型里编写。</p>

<h2>2.获取动作</h2>

<p>&nbsp;&nbsp;&nbsp; 动作也是模型，可以首先获取模型，然后再转化为动作。如下面的Groovy代码。</p>

<pre class="brush:groovy;">
import org.xmeta.Action;
import org.xmeta.Thing;

//获取动作模型
Thing thing = world.getThing(&quot;xworker.example.action._actions.HelloWorld&quot;);

//转化为动作
Action action = thing.getAction();</pre>

<p>&nbsp;&nbsp;&nbsp; 也可以直接通过World获取动作，World的getAction()方法内部也是先获取模型再转化为动作。</p>

<pre class="brush:groovy;">
import org.xmeta.Action;

Action action = world.getAction(&quot;xworker.example.action._actions.HelloWorld&quot;);</pre>

<h2>3.执行动作</h2>

<p>&nbsp;&nbsp;&nbsp; 获取动作后就可以用来执行了，执行前需要先准备好执行环境，即动作上下文。</p>

<pre class="brush:groovy;">
import org.xmeta.Action;
import org.xmeta.ActionContext;
import org.xmeta.Thing;

//获取动作模型
Thing thing = world.getThing(&quot;xworker.example.action._actions.HelloWorld&quot;);

//转化为动作
Action action = thing.getAction();

//准备运行环境，创建动作上下文
ActionContext ac = new ActionContext();

//执行动作
action.run(ac);</pre>

<p>&nbsp;&nbsp;&nbsp;</p>
]]></description>
</QuickFunction>