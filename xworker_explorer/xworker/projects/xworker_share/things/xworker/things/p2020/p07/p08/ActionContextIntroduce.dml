<?xml version="1.0" encoding="utf-8"?>

<ShellGuide name="ActionContextIntroduce" descriptors="xworker.swt.guide.ShellGuide" label="动作上下文"
     en_label="ActionContext" en_group="-20000|Dynamic Model.1000|Action" th_createIndex="true"
     th_registThing="child|xworker.lang.util.indexs.ShellGuideIndex" group="-20000|动态模型.1000|动作"
     th_sortWeight="300">
    <actions>
        <getIDEShell name="getMaskComposite" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIDEShell"></getIDEShell>
        <getIdeActionContext name="getActionContext" descriptors="xworker.lang.actions.utils.XWorkerActions/@getIdeActionContainer1"></getIdeActionContext>
    </actions>
    <Guide name="introduce" label="简介">
        <description><![CDATA[<h2>动作上下文</h2>

<p>&nbsp;&nbsp;&nbsp; 动作上下文也称为变量上下文，主要用于<strong>管理变量和线程状态</strong>，每一个动作执行时必须要指定动作上下文，动作中的能使用的变量是由变量上下文提供的。</p>

<h3>创建变量上下文</h3>

<pre class="brush:groovy;">
import org.xmeta.ActionContext;

ActionContext actionContext = new ActionContext();</pre>

<p>&nbsp;</p>
]]></description>
    </Guide>
    <Guide name="Guide" label="全局变量">
        <description><![CDATA[<h2>全局变量</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;一个ActionContext可以同时在多个线程下给多个动作同时使用，全局变量是指在不同的线程下都可以访问的变量。</p>

<h3>初始变量</h3>

<p>&nbsp;&nbsp;&nbsp; 初始变量都是全局的。</p>

<pre class="brush:groovy;">
import org.xmeta.ActionContext;

ActionContext actionContext = new ActionContext();

//此时设置的变量是全局的
actionContext.put(name, value);</pre>

<h3>g()栈层的变量</h3>

<p>&nbsp;&nbsp;&nbsp; 通过g()方法获取的栈中的变量也是全局的。</p>

<pre class="brush:groovy;">
import org.xmeta.Bindings;

//通过下面设置的变量也是全局的
Bindings g = actionContext.g();
g.put(name, value);</pre>

<p>&nbsp;</p>
]]></description>
    </Guide>
    <Guide name="Guide" _xmeta_id_="Guide1" label="局部变量">
        <description><![CDATA[<h2>局部变量</h2>

<p>&nbsp;&nbsp;&nbsp; 局部变量是和线程绑定的，其它线程看不到本线程的局部变量，局部变量是通过栈实现的。</p>

<h3>通过栈来设置局部变量</h3>

<p>&nbsp;&nbsp;&nbsp; 可以通过peek()、push()和pop()和来设置局部变量。</p>

<pre class="brush:groovy;">
import org.xmeta.Bindings;

//通过peek()，设置局部变量
Bindings bindings = actionContext.peek();
bindings.put(name, value);

//通过push()和pop()来管理局部变量
Bindings bindings = actionContext.push()
try{
    bindings.put(name, value);
}finally{
    //push和pop要成对出现，必须保证pop要执行
    actionContext.pop();
}</pre>

<h3>通过l()或局部变量栈</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;如果一个Bindings执行了setVarScopeFlag()方法，那么该Bindings可以通过l()方法获取。</p>

<pre class="brush:groovy;">
//设置为局部栈标记
actionContext.pee().setVarScopeFlag();

//获取靠近栈的顶端的执行过setVarScopeFlag()方法的Bindings，可能会返回null
Bindings bindings = actionContext.l();</pre>

<p>&nbsp;&nbsp; &nbsp;</p>

<p>&nbsp;</p>
]]></description>
    </Guide>
    <Guide name="threadStatus" label="线程状态">
        <description><![CDATA[<h2>线程状态</h2>

<p>&nbsp;&nbsp;&nbsp; ActionContext的线程状态可以用来实现语法类的模型，比如实现return、try/catch、continue、break等等语法模型。</p>

<h3>示意代码</h3>

<p>&nbsp;&nbsp;&nbsp; 比如下面是While模型的示意代码，这里用到了ActionContext的线程状态。</p>

<pre class="brush:groovy;">
while(checkCondition(self, actionContext)){
	 
	for (Thing child : childActions.getChilds()) {
		Action action = world.getAction(child);
		if (action != null) {
			result = action.run(actionContext, null, true);
		}

		int sint = actionContext.getStatus();
		if (sint != ActionContext.RUNNING) {
			break;
		}
	}

	//判断循环的状态
	if (actionContext.getStatus() == ActionContext.BREAK) {
		actionContext.setStatus(ActionContext.RUNNING);
		break;
	} else if (actionContext.getStatus() == ActionContext.CONTINUE) {
		actionContext.setStatus(ActionContext.RUNNING);
		continue;
	} else if (actionContext.getStatus() != ActionContext.RUNNING) {
		break;
	}
}</pre>

<p>&nbsp;</p>
]]></description>
    </Guide>
    <Guide name="Guide" _xmeta_id_="Guide2" label="变量约定">
        <description><![CDATA[<h2>变量约定</h2>

<p>&nbsp;&nbsp;&nbsp; 变量上下文中有一些约定俗成的变量，比如下面的变量。</p>

<ul>
	<li><strong>actionContext: org.xmeta.ActionContext</strong><br />
	变量上下文自己。<br />
	&nbsp;</li>
	<li><strong>parentContext: org.xmeta.ActionContext</strong><br />
	父变量上下文，可能不存在。<br />
	&nbsp;</li>
	<li><strong>_g: org.xmeta.Bindings</strong><br />
	全局变量栈。<br />
	&nbsp;</li>
	<li><strong>world: org.xmeta.World&nbsp;</strong><br />
	动态模型引擎的World实例。&nbsp;</li>
</ul>

<p>&nbsp;</p>
]]></description>
    </Guide>
</ShellGuide>