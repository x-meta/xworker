<?xml version="1.0" encoding="utf-8"?>

<QuickFunction name="StaticVariables" descriptors="xworker.swt.xworker.ThingRegistThing" label="静态和临时变量"
     type="thingDesc" group="dynamicModel.-1000|Actions.variables" icon="icons/html.png"
     th_sortWeight="60" simpleBrowser="true" en_label="Static &amp; Temp Variables" th_createIndex="true"
     th_registThing="child|xworker.example.ExamplesIndex">
    <description><![CDATA[<h1>静态和临时变量</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;有时可能需要管理一些静态的和临时的变量，比如像Java的System.out这样的变量，可以用下面的方法。</p>

<h2>通过World</h2>

<p>&nbsp;&nbsp;&nbsp; 由于World只有一个实例且是静态的，所以保存到World上的变量可以起到静态变量的效果。</p>

<ul>
	<li><strong>void World.getIntance().setData(String key, Object value)</strong><br />
	设置一个变量。该变量不会被系统回收，因此要谨慎设置。<br />
	&nbsp;</li>
	<li><strong>Object World.getInstance().getData(String key)</strong><br />
	返回一个变量。如果没有设置过返回null。</li>
</ul>

<h2>通过Thing</h2>

<p>&nbsp;&nbsp;&nbsp; 通过模型的以下方法可以设置和获取变量。注以下方法都是成对出现的，在这里省去了对应get方法。如setXXXData(String key, Object value)，那么对应一个Object getXXXData(String key)方法。</p>

<ul>
	<li><strong>void thing.setData(String key, Object value)</strong><br />
	设置一个绑定到模型上的变量，当模型被回收时变量也会被系统回收。<br />
	&nbsp;&nbsp;</li>
	<li><strong>void thing.setCachedData(String key, Object value)</strong><br />
	设置一个绑定到模型上的变量，如果模型修改了，那么变量也失效了（返回null)。<br />
	&nbsp;</li>
	<li><strong>void thing.setThreadData(String key, Object value)</strong><br />
	设置一个绑定到模型上的且和线程绑定的变量。<br />
	&nbsp;</li>
	<li><strong>void thing.setStaticData(String key, Object value)</strong><br />
	设置一个放到World上的变量，其中键值是模型路径和key的组合。<br />
	&nbsp;</li>
	<li><strong>void thing.setStaticCachedData(String key, Object value)</strong><br />
	设置一个放到World上的变量，其中键值是模型路径和key的组合，并且当模型修改也失效了。<br />
	&nbsp;</li>
	<li><strong>void thing.setStaticThreadData(String key, Object value)</strong><br />
	设置一个放到World上且和线程绑定的变量，其中键值是模型路径和key的组合。<br />
	&nbsp;</li>
</ul>

<p>&nbsp;</p>
]]></description>
</QuickFunction>