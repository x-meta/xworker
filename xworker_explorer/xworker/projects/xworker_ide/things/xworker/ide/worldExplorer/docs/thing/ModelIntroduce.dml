^1463466432960
@
sname
ModelIntroduce
slabel
ModelIntroduce
sthingTabRoot
true
sstartOnLoad
false
sdescriptors
xworker.lang.flow.uiflow.UiFlow
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
@/@11506
sname
newBrowser
slabel
动态模型简介
shtmlType
self
Sdescription
#$@text#$@
<p>动态模型是一个以模型为基本元素的编程方法，由于其特别简单，所以可能还称不上是一个编程语言，所以说它是一个编程方法。</p>
#$@text#$@
sx
280
sy
33
seditor
form
sconnections
core:动态模型编程的本质
sdescriptors
xworker.lang.flow.uiflow.Nodes/@Browser
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
11506
@/@11506/@11920
sname
core
slabel
动态模型编程的本质
snodeRef
xworker.ide.worldExplorer.docs.thing.ModelIntroduce/@11916
sdescriptors
xworker.lang.flow.uiflow.Connection
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
11920
@/@11916
sname
newBrowser
slabel
模型是数据
shtmlType
self
Sdescription
#$@text#$@
<p>动态模型编程的本质是模型是数据，我们用代码来处理模型的数据。</p>

<p><strong>模型是像XML这样的数据：</strong></p>

<pre class="brush:xml;">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;

&lt;Group name=&quot;gorup&quot; text=&quot;Browser&quot; label=&quot;Browser&quot;&gt;
    &lt;FillLayout name=&quot;groupFillLayout&quot;&gt;&lt;/FillLayout&gt;
    &lt;Browser name=&quot;browser&quot; url=&quot;http://www.xworker.org&quot;&gt;&lt;/Browser&gt;
&lt;/Group&gt;</pre>

<p><strong>可以用代码来处理模型数据：</strong></p>

<pre class="brush:java;">
//World是管理模型的容器
World world = World.getInstance();
world.init(&quot;.&quot;);

//可以通过world使用模型的路径来获取模型，模型的类是Thing（事物）
Thing thing = world.getThing(&quot;&lt;thingPath&gt;&quot;);

//模型可以包含各种属性
for(String key : thing.getAttributes().keySet()){
    System.out.println(&quot;属性：&quot; + key + &quot;=&quot; + thing.get(key));
}

//模型可以包含子节点，子节点也是子事物
for(Thing child : thing.getChilds()){
    System.out.println(&quot;子事物：&quot; + child.get(&quot;name&quot;));
}</pre>

<p><strong>动态模型编程的本质</strong></p>

<p>&nbsp;&nbsp;&nbsp; 根据以上可以总结动态模型编程的本质，即模型是数据，我们可以通过代码来处理模型数据，这是模型编程的本质。</p>

<p>&nbsp;</p>
#$@text#$@
sx
286
sy
105
seditor
form
sconnections
innerCode:把代码集成到模型中
sdescriptors
xworker.lang.flow.uiflow.Nodes/@Browser
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
11916
@/@11916/@12973
sname
innerCode
slabel
把代码集成到模型中
snodeRef
xworker.ide.worldExplorer.docs.thing.ModelIntroduce/@12870
sdescriptors
xworker.lang.flow.uiflow.Connection
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
12973
@/@12870
sname
newBrowser
slabel
动作的产生
shtmlType
self
Sdescription
#$@text#$@
<p><strong>传统的处理模型的方式的缺点</strong></p>

<p>&nbsp;&nbsp;&nbsp; 传统的处理模型的方法的缺点是调用模型的接口不统一。比如如果存在A和B两种截然不同的模型，那么必然有A代码来处理A模型，B代码来处理B模型，当模型种类比较少时我们调用起来可能还容易，但如果存在很多个不同类型的模型，那么我们就要面对很多个不同的接口，这样非常麻烦。</p>

<p><strong>把代码嵌入到模型中</strong></p>

<p>&nbsp;&nbsp;&nbsp; 把代码嵌入到模型中可以很容易解决上面的难题，它的思路如下。</p>

<p><strong>&nbsp;&nbsp;&nbsp; 1.在静态方法里来处理模型。</strong></p>

<pre class="brush:java;">
/**
 * 用静态方法来处理模型。
 *
 * @param actionContext ActionContext是变量上下文，用来保存模型和其它变量
 */
public static void handleModel(ActionContext actionContext){
     //self变量在动态模型里一般是模型
     Thing self = (Thing) actionContext.get(&quot;self&quot;);

     //获取其它变量
     Object var = actionContext.get(&quot;otherVar&quot;);

     //处理模型的代码
     ........
}</pre>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp; 2.把用调用的静态方法写在模型里。</strong></p>

<pre class="brush:java;">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;

&lt;JavaAction name=&quot;flowRun&quot; descriptors=&quot;xworker.lang.actions.Actions/@JavaAction&quot;
     outerClassName=&quot;xxx.xxx.HandleModelClass&quot; 
     methodName=&quot;handleModel&quot;&gt;
&lt;/JavaAction&gt;</pre>

<p><strong>&nbsp;&nbsp;&nbsp; 3.用模型来执行解释代码。</strong></p>

<pre class="brush:java;">
//获取2中的示意模型
Thing javaAction = world.getThing(&quot;JavaAction&quot;);

//由于javaAction模型包含了要调用的Java类和方法，所以可以执行
Action action = javaAction.getAction(); //转化为可以执行的Action形式

//执行
action.run(new ActionContext());

</pre>

<p><strong>动作的产生</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如上面的做法，当我们把模型的解释代码嵌入到模型里后，不管有多少种类的模型，都可以通过模型来调用它，从而调用模型的解释代码的接口统一了。</p>

<p>&nbsp;&nbsp;&nbsp; 同时也产生了一个副产品，即动作的概念，可以看到动作也是一个模型，它是可以执行的，它相当于传统编程中的函数和方法。</p>

<p>&nbsp;</p>
#$@text#$@
sx
285
sy
176
seditor
form
sconnections
object:把动作作为行为
sdescriptors
xworker.lang.flow.uiflow.Nodes/@Browser
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
12870
@/@12870/@13460
sname
object
slabel
把动作作为行为
snodeRef
xworker.ide.worldExplorer.docs.thing.ModelIntroduce/@13409
sdescriptors
xworker.lang.flow.uiflow.Connection
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
13460
@/@13409
sname
newBrowser
slabel
对象的产生
shtmlType
self
Sdescription
#$@text#$@
<p><strong>行为的产生</strong></p>

<p>&nbsp;&nbsp;&nbsp; 有了动作的概念，而动作也是模型一个节点，所以可以把一个模型的某些子节点当作是它的行为，从而产生了行为的概念。</p>

<pre class="brush:xml;">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;

&lt;thing name=&quot;Person&quot; descriptors=&quot;xworker.lang.MetaDescriptor3&quot;&gt;
    &lt;attribute name=&quot;name&quot;&gt;&lt;/attribute&gt;
    &lt;attribute name=&quot;age&quot; type=&quot;int&quot;&gt;&lt;/attribute&gt;
    &lt;thing name=&quot;Child&quot; extends=&quot;xworker.example.otandoo.example.Person&quot;&gt;&lt;/thing&gt;
    &lt;actions&gt;
        &lt;GroovyAction name=&quot;whoAmI&quot; varScope=&quot;Global&quot; 
                code=&quot;return &amp;quot;I am a Person, my name is ${self.name}&amp;quot;;&quot;&gt;
        &lt;/GroovyAction&gt;
        &lt;GroovyAction name=&quot;sayHello&quot; varScope=&quot;Global&quot; 
                    code=&quot;println self.name + &amp;quot; say hello&amp;quot;;&quot;&gt;
         &lt;/GroovyAction&gt;
    &lt;/actions&gt;
&lt;/thing&gt;</pre>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 在上面的代码里，我们可以把&lt;actions&gt;子节点下的节点当作它的行为，所以Person拥有whoAmI和sayHello两个行为。</p>

<p><strong>行为的调用</strong></p>

<p>&nbsp;&nbsp;&nbsp; 在Java代码中，行为可以这样来调用。</p>

<pre class="brush:java;">
//获取示意模型
Thing perosn = world.getThing(&quot;Person&quot;);

//执行模型的方法
person.doAction(&quot;whoAmI&quot;, new ActionContext());
person.doAction(&quot;sayHello&quot;, new ActionContext());</pre>

<p><strong>对象的产生</strong></p>

<p>&nbsp;&nbsp;&nbsp; 当一个模型有属性和行为时，我们自然而然的会把它当做一个对象来看待，所以就产生了对象的概念。</p>

<p>&nbsp;</p>
#$@text#$@
sx
284
sy
248
seditor
form
sconnections
descriptor:定义类的概念
sdescriptors
xworker.lang.flow.uiflow.Nodes/@Browser
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
13409
@/@13409/@13807
sname
descriptor
slabel
定义类的概念
snodeRef
xworker.ide.worldExplorer.docs.thing.ModelIntroduce/@13704
sdescriptors
xworker.lang.flow.uiflow.Connection
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
13807
@/@13704
sname
newBrowser
slabel
类的产生
shtmlType
self
Sdescription
#$@text#$@
<p><strong>类的概念</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp; 当模型也是对象时，此时就自然而然的会想到类的概念，即一个对象应该有类。</p>

<p><strong>把模型的结构当作它的类</strong></p>

<p>&nbsp;&nbsp;&nbsp; 由于模型是像XML这样的数据，而一个XML有结构定义如DTD或Schema，由于DTD或Schema起到描述XML结构的能力，能够说明一个XML是什么，所以我们也把一个模型的结构当作它的类。</p>

<p><strong>模型的描述是可变的</strong></p>

<p>&nbsp;&nbsp;&nbsp; 我们意识到结构的用途是用于描述，所以我们认为它是可变的，即模型的描述是可变的。</p>

<p><strong>描述者的概念</strong></p>

<p>&nbsp;&nbsp;&nbsp; 本来当模型是对象时，我们想定义类的概念，最后发现用描述的概念可能比较合适，所以在动态模型里一个模型对象的类就称为描述者。</p>

<p><strong>描述者的作用</strong></p>

<p>&nbsp;&nbsp;&nbsp; 描述者起到描述模型对象的能力，一个模型对象也继承其描述者的行为。</p>
#$@text#$@
sx
290
sy
316
seditor
form
sconnections
extnds:类之间可以继承
sdescriptors
xworker.lang.flow.uiflow.Nodes/@Browser
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
13704
@/@13704/@13953
sname
extnds
slabel
类之间可以继承
snodeRef
xworker.ide.worldExplorer.docs.thing.ModelIntroduce/@13903
sdescriptors
xworker.lang.flow.uiflow.Connection
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
13953
@/@13903
sname
newBrowser
slabel
继承的产生
shtmlType
self
Sdescription
#$@text#$@
<p><strong>继承的产生</strong></p>

<p>&nbsp;&nbsp;&nbsp; 类通常具有继承关系，如人也是动物，动物也是生物等，所以动态模型中也引入了继承的概念。</p>

<p><strong>继承作用</strong></p>

<p>&nbsp;&nbsp;&nbsp; 如果一个模型继承另一个模型，那么就继承它的行为。由于模型是数据，所以想要继承有其它功能，那么可以自行实现。</p>
#$@text#$@
sx
285
sy
392
seditor
form
sconnections
oop:面向对象的产生
sdescriptors
xworker.lang.flow.uiflow.Nodes/@Browser
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
13903
@/@13903/@14134
sname
oop
slabel
面向对象的产生
snodeRef
xworker.ide.worldExplorer.docs.thing.ModelIntroduce/@14074
sdescriptors
xworker.lang.flow.uiflow.Connection
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
14134
@/@14074
sname
newBrowser
slabel
面向对象
shtmlType
self
Sdescription
#$@text#$@
<p><strong>面向对象的产生</strong></p>

<p>&nbsp;&nbsp;&nbsp; 现在模型中有了函数（动作）、对象、类和继承等概念，它自然而然的就成为了一个面向对象的编程方法。</p>
#$@text#$@
sx
289
sy
462
seditor
form
sdescriptors
xworker.lang.flow.uiflow.Nodes/@Browser
sinheritDescription
false
sth_createIndex
false
sth_registMyChilds
false
sth_registDisabled
false
sth_mark
false
sid
14074
