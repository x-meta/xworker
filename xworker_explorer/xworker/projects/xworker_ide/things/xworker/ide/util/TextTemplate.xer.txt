@xworker.ide.util.TextTemplate
sname
TextTemplate
slabel
TextTemplate
sdescriptors
xworker.lang.MetaDescriptor3
sextends
xworker.lang.actions.SelfAction
smany
true
seditCols
2
sinitialization
false
sgroup
template
smodifier
public
sinheritDescription
false
sdescription
<p>文本模板。</p>
sid
TemplateObject
sth_createIndex
true
sth_registThing
child|xworker.lang.actions.Actions
@xworker.ide.util.TextTemplate/@name
sname
name
sgroup
template
sdescription
模板对象名称。
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
name
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@label
sname
label
sgroup
template
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
label
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@path
sname
templatePath
ssize
60
scolspan
2
sgroup
template
sreadOnly
false
sinheritDescription
false
Sdescription
#$@text#$@
<p>模板文件的路径种类。</p>
<ul>
    <li><strong>World的相对路径</strong><br />
    以World路径为模板的根路径。<br />
    &nbsp;</li>
    <li><strong>类路径</strong><br />
    放在类库下的模板或者放在事物（事物管理器）目录下的模板文件都是类路径下的模板文件。<br />
    &nbsp;</li>
    <li><strong>事物</strong><br />
    使用thing:&lt;thingPath&gt;的路径为事物定义的模板，其中thing:是固定的前缀，&lt;thingPath&gt;是事物模板的路径，事物模板应该有templateCode属性。</li>
</ul>
#$@text#$@
svalidateAllowBlank
true
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
path
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@type
sname
type
sinputtype
select
sgroup
template
sdefault
freemarker
sdescription
类型。
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
type
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@type/@freemarker
sname
freemarker
slabel
freemarker
svalue
freemarker
sid
freemarker
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
@xworker.ide.util.TextTemplate/@type/@velocity
sname
velocity
slabel
velocity
svalue
velocity
sid
velocity
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
@xworker.ide.util.TextTemplate/@dataVariableName
sname
contextName
sgroup
template
Sdescription
#$@text#$@
<p>模板上下文的变量名。</p>
<p>通过ContextName从动作上下文中取模板的上下文，如果ContextName为空，那么把整个动作上下文作为模板的上下文。</p>
#$@text#$@
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
dataVariableName
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@output
sname
output
ssize
60
scolspan
2
sgroup
output
Sdescription
#$@text#$@
<p>模板结果的输出目的地。<br />
<br />
如果output是字符串类型，比如常量类型&quot;d:/test.txt&quot;或output对应的变量是字符串，那么认为字符串指的是文件，此时模板的结果会输出到指定的文件中。</p>
<p>如果通过output取得的变量为java.io.OutputStream或PrintStream，那么模板的结构输入到这些变量中。</p>
<p>如果为空没有设置，那么模板执行的结果作为返回值。</p>
#$@text#$@
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
output
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@outputName
sname
outputVarName
sgroup
output
sdescription
<p>如果output没有设置，那么可以把模板的结果当作一个变量保存在动作上下文中。</p>
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
outputName
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@varScope
sname
varScope
sinputtype
inputSelect
ssize
60
scolspan
2
sgroup
output
sdefault
Local
Sdescription
#$@text#$@
<p>变量的输出范围。</p>
<p>脚本中可能含有一些脚本的全局变量，这些脚本的全局变量可以通过varScope参数设定输出到哪一个变量范围里，如果选择Local那么输出到当前的动作变量范围中，如果选择Global那么输出到全局变量范围里（ActionContext的底层变量范围），如果输入是动作路径，那么输出到相应动作的变量范围，如果是数字，那么输入到指定变量范围中，正数表示从0往上数，负数表示从顶部往下数。</p>
#$@text#$@
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
varScope
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@varScope/@Local
sname
Local
slabel
Local
svalue
Local
sid
Local
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
@xworker.ide.util.TextTemplate/@varScope/@Global
sname
Global
slabel
Global
svalue
Global
sid
Global
sdescriptors
xworker.lang.MetaDescriptor3/@attribute/@value
@xworker.ide.util.TextTemplate/@templateEncoding
sname
templateEncoding
sgroup
template
sdefault
UTF-8
sdescription
模板本身的编码、
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
templateEncoding
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@encoding
sname
outputEncoding
sgroup
output
sdefault
UTF-8
sdescription
输出编码。
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
encoding
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@templateCode
sname
templateCode
stype
text
sinputtype
textarea
scolspan
2
sgroup
template
Sdescription
#$@text#$@
<p>模板代码。<br />
<br />
如果没有指定模板的路径，那么可以编写模板的代码，模板路径和模板代码同时只能有一个生效，当有模板路径时模板代码不生效。<br />
<br />
模板代码是保存在内存变量中的字符串模板，这个功能要看具体的模板引擎是否支持。</p>
<p>建议最好使用文件形式的模板，通过模板路径引用。</p>
#$@text#$@
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
templateCode
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@xworker.ide.util.TextTemplate/@scripts
sname
scripts
sid
scripts
slabel
scripts
sdescriptors
xworker.lang.MetaDescriptor3/@actions
@xworker.ide.util.TextTemplate/@scripts/@run
sname
run
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
import org.xmeta.ActionContext;
import org.xmeta.Bindings;

import xworker.util.UtilTemplate;

import org.apache.velocity.VelocityContext;

String templateName = self.templatePath;
if(self.templatePath == null || self.templatePath == ""){
    //如果路径为空，那么使用templateCode所定义的模板
    templateName = "thing:" + self.metadata.path;
}

//模板的上下文
Object templateContext = null;
if(self.contextName == null || self.contextName == ""){
    if("velocity" == self.type){
        templateContext = new VelocityContext(actionContext);
    }else{
        templateContext = actionContext;
    }
}else{
    templateContext = actionContext.get(self.contextName);
}

//设置输出
def output = null;
def fileOut = null;
try{
    //设置输出编码
    def outputEncoding = self.outputEncoding;
    if(outputEncoding == null || outputEncoding == ""){
        outputEncoding = "UTF-8";
    }
    
    if(self.output != null && self.output != ""){
        output = actionContext.get(self.output);
        if(output instanceof java.io.OutputStream){
            output = new OutputStreamWriter(output, (String) outputEncoding);
        }else if(output instanceof OutputStreamWriter){
        }else if(output instanceof String || output instanceof File){
            fileOut = new FileOutputStream(output);
            output = new OutputStreamWriter(fileOut, outputEncoding);
        }else{
            if(self.output.startsWith("\"")){
                //""包围的字符串常量，当作文件路径
                def fileName = self.output.substring(1, self.output.length() - 1);
                File f = new File(fileName);
                if(!f.exists()){
                    f.getParentFile().mkdirs();
                }
                fileOut = new FileOutputStream(fileName);
                output = new OutputStreamWriter(fileOut, outputEncoding);
            }            
        }
    }
    
    boolean isString = false;
    ByteArrayOutputStream out = null;
    if(output == null){
        out = new ByteArrayOutputStream();
        if(self.outputEncoding != null && self.outputEncoding != "")
            output = new OutputStreamWriter(out, (String) self.outputEncoding);
        else 
            output = new OutputStreamWriter(out);
        isString = true;
    }

    //log.info("templateName=" + templateName);
    UtilTemplate.process(templateContext, templateName, self.type, output, self.templateEncoding);
    if(isString){
        //String result = out.toString();
        String result = new String(out.toByteArray(), outputEncoding);
        //log.info(result);
        if(self.outputVarName != null && self.outputVarName != ""){
            String varScope = self.getString("varScope");
            if("Global".equals(varScope) || varScope == null){
            	actionContext.getScope(0).put(self.outputVarName, result);
            }else{
                try{
                    int scopeIndex = Integer.parseInt(varScope);
                    if(scopeIndex >= 0){
                    	actionContext.getScope(scopeIndex).put(self.outputVarName, result);
                    }else{
                     	actionContext.getScope(actionContext.getScopesSize() + scopeIndex).put(self.outputVarName, result);
                    }
                }catch(Exception e){
                    Bindings actionBindings = actionContext.getScope(varScope);
                    if(actionBindings != null){
                        actionBindings.put(self.outputVarName, result);
                    }else{
                        actionContext.put(self.outputVarName, result);
                    }
                }
            }

            return result;
        }else{
            return result;
        }
    }
    
    return "";
}finally{
    if(fileOut != null) fileOut.close();
}
#$@text#$@
sinitBreakPoint
false
ssuccessBreakPoint
false
sexceptionBreakPoint
false
seditBreakPoint
false
sinterpretationType
Action
sid
run
sdescriptors
xworker.lang.actions.GroovyAction
@xworker.ide.util.TextTemplate/@scripts/@process
sname
process
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
scode
self.doAction("run", actionContext);
sid
process
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
