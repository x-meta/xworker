@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor
sname
RuntimeGroovyEditor
slabel
RuntimeGroovyEditor
sid
RuntimeGroovyEditor
sdescriptors
xworker.swt.widgets.Display
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell
sname
shell
stext
Runtime Groovy Editor
sNO_TRIM
false
sCLOSE
true
sTITLE
true
sMIN
true
sMAX
true
sBORDER
false
sRESIZE
true
sON_TOP
false
sTOOL
false
sNO_FOCUS
false
swidth
800
sheight
600
scenterScreen
true
spack
false
smaximized
false
sfullScreen
false
sH_SCROLL
false
sV_SCROLL
false
sNO_BACKGROUND
false
sNO_MERGE_PAINTS
false
sNO_REDRAW_RESIZE
false
sNO_RADIO_GROUP
false
sEMBEDDED
false
sDOUBLE_BUFFERED
false
scapture
false
senabled
true
sredraw
true
svisible
true
sxw_cl_global
false
sid
shell
sdescriptors
xworker.swt.widgets.Display/@Shell
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@shellFillLayout
sname
shellFillLayout
stype
SWT.HORIZONTAL
sxw_cl_global
false
sid
shellFillLayout
slabel
shellFillLayout
sdescriptors
xworker.swt.Layouts/@FillLayout
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite
sname
mainComposite
sBORDER
false
sH_SCROLL
false
sV_SCROLL
false
sNO_BACKGROUND
false
sNO_FOCUS
false
sNO_MERGE_PAINTS
false
sNO_REDRAW_RESIZE
false
sNO_RADIO_GROUP
false
sEMBEDDED
false
sDOUBLE_BUFFERED
false
scapture
false
senabled
true
sredraw
true
svisible
true
sxw_cl_global
false
sid
mainComposite
sdescriptors
xworker.swt.Widgets/@Composite
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainCompositeGridLayout
sname
mainCompositeGridLayout
smakeColumnsEqualWidth
false
smarginWidth
5
smarginHeight
5
smarginLeft
0
smarginTop
0
smarginRight
0
smarginBottom
0
shorizontalSpacing
5
sverticalSpacing
5
sid
mainCompositeGridLayout
slabel
mainCompositeGridLayout
sdescriptors
xworker.swt.Layouts/@GridLayout
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm
sname
mainSashForm
sstyle
HORIZONTAL
sSMOOTH
false
sweights
70,30
sBORDER
false
sH_SCROLL
false
sV_SCROLL
false
sNO_BACKGROUND
false
sNO_FOCUS
false
sNO_MERGE_PAINTS
false
sNO_REDRAW_RESIZE
false
sNO_RADIO_GROUP
false
sEMBEDDED
false
sDOUBLE_BUFFERED
false
scapture
false
senabled
true
sredraw
true
svisible
true
sxw_cl_global
false
sid
mainSashForm
sdescriptors
xworker.swt.Widgets/@SashForm
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@mainSashFormGridData
sname
mainSashFormGridData
sstyle
FILL_BOTH
shorizontalIndent
0
swidth
-1
sheight
-1
shorizontalAlignment
BEGINNING
sverticalAlignment
CENTER
shorizontalSpan
1
sverticalSpan
1
sgrabExcessHorizontalSpace
false
sgrabExcessVerticalSpace
false
sxw_cl_global
false
sid
mainSashFormGridData
slabel
mainSashFormGridData
sdescriptors
xworker.swt.layout.LayoutDatas/@GridData
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1
scodeName
java
scodeType
java
sname
codeText
sstyle
MULTI
sFULL_SELECTION
false
sREAD_ONLY
false
sWRAP
false
sH_SCROLL
false
sV_SCROLL
true
sBORDER
false
salign
LEFT
Stext
#$@text#$@
import groovy.GroovyCodeHelper;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.TreeItem;

if(System.currentTimeMillis() - codeText_lastTime < 500){
    return;
}
codeText_hitCount = 0;
def codeText = codeText;
def varList = varList;
def context = context;
def outlineTree = outlineTree;

shell.display.asyncExec({
    try{
        def offset = codeText.getCaretOffset();
        def line = codeText.getLineAtOffset(offset);
        def column = offset - codeText.getOffsetAtLine(line);
        
        def codeHelper = new GroovyCodeHelper(codeText.getText());
        def cunit = codeHelper.getCompileUnit();
        outlineTree.removeAll();
        for(classNode in cunit.getClasses()){
            initClasses(outlineTree, classNode);
        }
    }catch(Exception e){
        e.printStackTrace();
    }
  
} as Runnable);

def initClasses(outlineTree, classNode){
    def item = new TreeItem(outlineTree, SWT.NONE);
    item.setText(classNode.name + "(class)");
    
    for(field in classNode.getFields()){
        def fitem = new TreeItem(item, SWT.NONE);
        fitem.setText(field.name + "(field)");
    }
    
    for(method in classNode.getAllDeclaredMethods()){
        def mitem = new TreeItem(item, SWT.NONE);
        mitem.setText(method.name + "(method)");
    }
}

//初始化一般的参数列表
def initVars(codeText, varList, preText, endText, context){
}

//初始化参数
def initParams(codeText, varList, preText, endText, context){
}
#$@text#$@
sid
codeText1
sdescriptors
xworker.swt.xworker.CodeText
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1/@listeners
sname
listeners
sid
listeners
slabel
listeners
sdescriptors
xworker.swt.events.Listeners/@listeners
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1/@listeners/@codeTextKeyUp
sname
codeTextKeyUp
stype
KeyDown
sid
codeTextKeyUp
slabel
codeTextKeyUp
sdescriptors
xworker.swt.events.Listeners/@listeners/@Listener
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1/@listeners/@codeTextKeyUp/@GroovyAction
sname
GroovyAction
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
import org.eclipse.swt.SWT;

if(event.stateMask == SWT.CONTROL && varList.getItemCount() > 0){
    def varIndex = varList.getSelectionIndex();
    switch(event.keyCode){
        case SWT.ARROW_UP:
            if(varIndex == -1){
                varList.select(0);
            }else{
                varIndex = varIndex -1;
                if(varIndex < 0){
                    varList.select(varList.getItemCount() - 1);
                }else{
                    varList.select(varIndex);
                }
            }
            event.doit = false;
            break;
        case SWT.ARROW_DOWN:
            if(varIndex == -1){
                varList.select(0);
            }else{
                varIndex = varIndex + 1;
                if(varIndex >= varList.getItemCount()){
                    varList.select(0);
                }else{
                    varList.select(varIndex);
                }
            }
            event.doit = false;
            break;
        case SWT.PAGE_UP:
            varIndex = varIndex - 10;
            if(varIndex < 0){
                varIndex = 0;                
            }
            varList.select(varIndex);
            event.doit = false;
            break;
        case SWT.PAGE_DOWN:
            varIndex = varIndex + 10;
            if(varIndex >= varList.getItemCount()){
                varIndex = varList.getItemCount() - 1;                
            }
            varList.select(varIndex);
            event.doit = false;
            break;
        
    }
    
    if(event.keyCode == SWT.INSERT && varIndex != -1){
        def text = varList.getSelection()[0];
        codeText.insert(text);
        codeText.setCaretOffset(codeText.getCaretOffset() + text.length());
        event.doit = false;
    }
}

if(event.doit){
    synchronized(codeText_obj){
        codeText_initVars = true;
        codeText_lastTime = System.currentTimeMillis();
        codeText_hitCount++;
        codeText_obj.notify();
    }
}
#$@text#$@
sid
GroovyAction
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1/@listeners/@codeTextMouseDown
sname
codeTextMouseDown
stype
MouseDown
sid
codeTextMouseDown
slabel
codeTextMouseDown
sdescriptors
xworker.swt.events.Listeners/@listeners/@Listener
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1/@listeners/@codeTextMouseDown/@GroovyAction
sname
GroovyAction
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
synchronized(codeText_obj){
    codeText_initVars = true;
    codeText_lastTime = System.currentTimeMillis();
    codeText_hitCount++;
    codeText_obj.notify();
}
#$@text#$@
sid
GroovyAction
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1/@listeners/@codeTextDisposeListener
sname
codeTextDisposeListener
stype
Dispose
sid
codeTextDisposeListener
slabel
codeTextDisposeListener
sdescriptors
xworker.swt.events.Listeners/@listeners/@Listener
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@codeText1/@listeners/@codeTextDisposeListener/@GroovyAction
sname
GroovyAction
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
//停止辅助线程
println "displose";

synchronized(codeText_obj){
    codeText_initVars = true;
    codeText_status = 2;
    codeText_obj.notify();
}
#$@text#$@
sid
GroovyAction
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@rightSash
sname
rightSash
sstyle
VERTICAL
sSMOOTH
false
sweights
50,50
sBORDER
false
sH_SCROLL
false
sV_SCROLL
false
sNO_BACKGROUND
false
sNO_FOCUS
false
sNO_MERGE_PAINTS
false
sNO_REDRAW_RESIZE
false
sNO_RADIO_GROUP
false
sEMBEDDED
false
sDOUBLE_BUFFERED
false
scapture
false
senabled
true
sredraw
true
svisible
true
sxw_cl_global
false
sid
rightSash
sdescriptors
xworker.swt.Widgets/@SashForm
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@rightSash/@outlineTree
sname
outlineTree
sselectStyle
SINGLE
sV_SCROLL
true
sH_SCROLL
true
sCHECK
false
sFULL_SELECTION
false
sHIDE_SELECTION
true
sBORDER
false
slineVisible
false
smultipleColumns
false
sheaderVisible
false
ssortIndicator
false
smoveableColumns
false
sheadImages
false
ssubImages
false
scheckSelection
false
sxw_cl_global
false
sid
outlineTree
slabel
outlineTree
sdescriptors
xworker.swt.Widgets/@Tree
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@mainSashForm/@rightSash/@varList
sname
varList
sstyle
SINGLE
sH_SCROLL
true
sV_SCROLL
true
sBORDER
false
scapture
false
senabled
true
sredraw
true
svisible
true
sxw_cl_global
false
sid
varList
slabel
varList
sdescriptors
xworker.swt.Widgets/@List
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170
sname
buttonComposite
sBORDER
false
sH_SCROLL
false
sV_SCROLL
false
sNO_BACKGROUND
false
sNO_FOCUS
false
sNO_MERGE_PAINTS
false
sNO_REDRAW_RESIZE
false
sNO_RADIO_GROUP
false
sEMBEDDED
false
sDOUBLE_BUFFERED
false
scapture
false
senabled
true
sredraw
true
svisible
true
sid
170
sdescriptors
xworker.swt.Widgets/@Composite
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@171
sname
buttonCompositeGridData
sstyle
FILL_HORIZONTAL
shorizontalIndent
0
swidth
-1
sheight
-1
shorizontalAlignment
END
sverticalAlignment
CENTER
shorizontalSpan
1
sverticalSpan
1
sgrabExcessHorizontalSpace
false
sgrabExcessVerticalSpace
false
sid
171
slabel
buttonCompositeGridData
sdescriptors
xworker.swt.layout.LayoutDatas/@GridData
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@172
sname
buttonCompositeRowLayout
sfill
false
sjustify
false
smarginWidth
0
smarginHeight
0
smarginLeft
3
smarginTop
3
smarginRight
3
smarginBottom
3
spack
true
sspacing
3
stype
SWT.HORIZONTAL
swrap
true
sid
172
slabel
buttonCompositeRowLayout
sdescriptors
xworker.swt.Layouts/@RowLayout
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@174
sname
okButton
stext
确定
stype
SWT.PUSH
sflat
false
sborder
false
sselected
false
scapture
false
senabled
true
sredraw
true
svisible
true
sxw_cl_global
false
sid
174
slabel
okButton
sdescriptors
xworker.swt.Widgets/@Button
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@174/@175
sname
RowData
sexclude
false
swidth
80
sheight
-1
sid
175
slabel
RowData
sdescriptors
xworker.swt.layout.LayoutDatas/@RowData
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@174/@Listeners
sname
Listeners
sid
Listeners
slabel
Listeners
sdescriptors
xworker.swt.widgets.Widget/@Listeners
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@174/@Listeners/@okButtonSelection
sname
okButtonSelection
stype
Selection
sref
xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@actions/@getCaretWord
sid
okButtonSelection
slabel
okButtonSelection
sdescriptors
xworker.swt.events.Listeners/@listeners/@Listener
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@176
sname
cancelButton
stext
取消
stype
SWT.PUSH
sflat
false
sborder
false
sselected
false
scapture
false
senabled
true
sredraw
true
svisible
true
sxw_cl_global
false
sid
176
slabel
cancelButton
sdescriptors
xworker.swt.Widgets/@Button
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@176/@177
sname
RowData
sexclude
false
swidth
80
sheight
-1
sid
177
slabel
RowData
sdescriptors
xworker.swt.layout.LayoutDatas/@RowData
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@176/@2511
sname
Listeners
sid
2511
slabel
Listeners
sdescriptors
xworker.swt.widgets.Widget/@Listeners
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@176/@2511/@2512
sname
cancelButtonSelectionSelection
stype
Selection
sid
2512
slabel
cancelButtonSelectionSelection
sdescriptors
xworker.swt.events.Listeners/@listeners/@Listener
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@170/@176/@2511/@2512/@2513
sname
cancelButtonSelectionAction
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
scode
shell.dispose();
sid
2513
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@actions
sname
actions
sid
actions
slabel
actions
sdescriptors
xworker.swt.Widgets/@actions
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@actions/@initList
sname
initList
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
import java.util.Collections;
import org.xmeta.ActionContext;

def list = [];
//获取变量列表
if(currentContext instanceof ActionContext){
    for(key in currentContext.keySet()){
        list.add(key);
    }
}

//显示变量
Collections.sort(list);
varList.removeAll();
for(l in list){
    varList.add(l);
}
#$@text#$@
sid
initList
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@actions/@getCaretWord
sname
getWordAtCaret
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
//光标的偏移量
def offset = codeText.getCaretOffset();
//行的偏移量
def lineOffset = codeText.getLineAtOffset(offset);
//行中的光标偏移量
offset = offset - codeText.getOffsetAtLine(lineOffset);
//行数据
def lineStr = codeText.getLine(lineOffset);

def preText = "";
if(offset > 0){
    def index = offset - 1;
    def skipSpace = isDotAfter(lineStr, offset);
    def ending = false;
    while(index > 0){        
        preText = lineStr.substring(index, index + 1);
        println "skipSpace=" + skipSpace + ",ending=" + ending + ",text=" + preText;
        if(preText == ";"){
            index++;
            break;
        }else if(preText == " "){
            if(!skipSpace){
                ending = true;
            }
        }else if(preText == "\n"){
            index++;
            break;
        }else if(preText == "."){
            skipSpace = true;            
            ending = false;
        }else if(ending){
            index++;
            break;
        }else{
            skipSpace = false;
        }
        index--;
    }
    if(index < 0){
        index = 0;
    }
    preText = lineStr.substring(index, offset-1);
}

def endText = "";
if(lineStr.length() > offset + 1){
    index = offset;
    def skipSpace = isDotBefore(lineStr, offset);
    def caLast = true;
    if(!skipSpace && lineStr.substring(index, index+1) == " "){
        caLast = false;
    }
    def ending = false;
    while(caLast && index < lineStr.length()){
        endText = lineStr.substring(index, index + 1);
        if(preText == ";"){
            index--;
            break;
        }else if(endText == " "){
            if(!skipSpace){
                ending = true;
            }else if(ending){
                index--;
                break;
            }
        }else if(endText == "\n"){
            index--;
            break;
        }else if(endText == "."){
            skipSpace = true;
            ending = false;
        }else if(ending){
            index--;
            break;
        }else{
            skipSpace = false;
        }
        
        index++;
    }
    if(index > lineStr.length()){
        index = lineStr.length() - 1;
    }
    if(offset == 0){
        endText = lineStr.substring(offset, index);
    }else{
        endText = lineStr.substring(offset-1, index);
    }
}

println [preText, endText];

//返回index之后是否紧跟着.号
def isDotAfter(str, index){    
    while(index < str.length()){
        def c = str.substring(index, index + 1);
        if(c == " "){
            index++;
        }else if(c == "."){
            return true;
        }else{
            return false;
        }
    }
    
    return false;
}

//返回index之前是否紧跟.号
def isDotBefore(str, index){
    if(isDotAfter(str, index)){
        return true;
    }
    
    while(index >= 0){
        def c = str.substring(index, index + 1);
        if(c == " "){
            index--;
        }else if(c == "."){
            return true;
        }else{
            return false;
        }
    }
    
    return false;
}
#$@text#$@
sid
getCaretWord
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@actions/@codeTextHelper
sname
codeTextHelper
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
import groovy.GroovyCodeHelper;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.TreeItem;

if(System.currentTimeMillis() - codeText_lastTime < 500){
    return;
}
codeText_hitCount = 0;
def codeText = codeText;
def varList = varList;
def context = context;
def outlineTree = outlineTree;
def codeThing = world.getThing("xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@actions/@codeTextHelper");

shell.display.asyncExec({
    try{
        def offset = codeText.getCaretOffset();
        def line = codeText.getLineAtOffset(offset);
        def column = offset - codeText.getOffsetAtLine(line);
        
        def codeHelper = new GroovyCodeHelper(codeThing, "code");
        def cunit = codeHelper.getCompileUnit();
        outlineTree.removeAll();
        for(classNode in cunit.getClasses()){
            initClasses(outlineTree, classNode);
        }
    }catch(Exception e){
        e.printStackTrace();
    }
  
} as Runnable);

def initClasses(outlineTree, classNode){
    def item = new TreeItem(outlineTree, SWT.NONE);
    item.setText(classNode.name + "(class)");
    
    for(field in classNode.getFields()){
        def fitem = new TreeItem(item, SWT.NONE);
        fitem.setText(field.name + "(field)");
    }
    
    for(method in classNode.getAllDeclaredMethods()){
        def mitem = new TreeItem(item, SWT.NONE);
        mitem.setText(method.name + "(method)");
    }
    
    for(property in classNode.getProperties()){
        def pitem = new TreeItem(item, SWT.NONE);
        pitem.setText(property.name + "(property)");
    }
}

//初始化一般的参数列表
def initVars(codeText, varList, preText, endText, context){
}

//初始化参数
def initParams(codeText, varList, preText, endText, context){
}
#$@text#$@
sid
codeTextHelper
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@xworker.ide.worldexplorer.swt.editor.RuntimeGroovyEditor/@shell/@mainComposite/@init
sname
init
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
import org.xmeta.ActionContext;

context = actionContext.get("context");
if(context == null){
    context = actionContext;
}
currentContext = context;
actions.doAction("initList", actionContext);

//启动codeText的背景辅助线程
codeText_status = 1; //正在运行
codeText_obj = new Object();
codeText_initVars = false; //是否要初始化变量
codeText_lastTime = 0;
codeText_hitCount = 0;
def actions = actions;
new Thread({
    while(true){        
        synchronized(codeText_obj){
            if(!codeText_initVars && codeText_hitCount == 0){
                codeText_obj.wait();
            }
        }
        
        if(codeText_status != 1){
            println "helper thread stop";
            return;
        }
        
        try{
            Thread.sleep(600);
            actions.doAction("codeTextHelper");
            codeText_initVars = false;
        }catch(Exception e){
            e.printStackTrace();
        }
    }
} as Runnable).start();
#$@text#$@
sid
init
sdescriptors
xworker.swt.Widgets/@Code
