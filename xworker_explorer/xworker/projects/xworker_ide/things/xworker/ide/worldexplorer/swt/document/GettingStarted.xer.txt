@xworker.ide.worldexplorer.swt.document.GettingStarted
sname
GettingStarted
slabel
GettingStarted
sdescriptors
xworker.http.ControlSet
@xworker.ide.worldexplorer.swt.document.GettingStarted/@commonDescritpors
sname
commonDescritpors
sdescriptors
xworker.http.ControlSet/@SimpleControl
@xworker.ide.worldexplorer.swt.document.GettingStarted/@commonDescritpors/@forms
sname
forms
sbelongToHtml
true
sstyle
default
SotherHeads
#$@text#$@
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<LINK REL ="stylesheet" TYPE="text/css" HREF="fckeditor/editor/css/fck_editorarea.css" TITLE="Style"/>
<script type="text/javascript" src="js/xworker/InnerBrowserUtil.js"></script>
#$@text#$@
sdescriptors
xworker.http.controls.SimpleControl/@view
@xworker.ide.worldexplorer.swt.document.GettingStarted/@commonDescritpors/@forms/@htmlCode
sname
htmlCode
ShtmlCode
#$@text#$@
<p><span style="font-size: small"><span><b>常用描述者</b><span style="font-size: xx-small"><b><a onClick="invoke('thing:xworker.ide.worldexplorer.swt.document.GettingStarted:/@commonDescritpors/@forms/@htmlCode')" href="javascript:void(0)">edit</a></b></span></span></span></p>
<p>&nbsp;&nbsp;&nbsp; 每一个事物原则上是使用已存在的事物创建出来的，并且理论上每个事物都能够用来创建其他事物，但是一般使用起到分类描述作用的事物创建新事物才有意义，所以出现一些常用的用来创建新事物的事物。</p>
<p>&nbsp;&nbsp;&nbsp; 用于创建新事物的事物称作新事物的描述者，描述者也是普通事物可以不断的被创建，所以常用的描述者在使用中也可能会不断的变化，目前比较常用的描述者有下列事物。</p>
<p><b>元描述3（<a onClick="invoke('thing.core.thingslang.MetaDescriptor3')" href="javascriptvoid(0)">corethingslang.MetaDescriptor3</a>）</b></p>
<p>&nbsp;&nbsp;&nbsp; 元描述3是一种元事物，常用于创建其它描述者，XWorker中很大一部分描述者都是通过元描述3创建的，事物管理器的事物编辑器很多功能是参考元描述3所制定。</p>
<p>&nbsp;<b>SWT Display或Shell（<a onClick="invoke('thing.ui.localswt.widgets.Display')" href="javascriptvoid(0)">uilocalswt.widgets.Display</a>或<a onClick="invoke('thinguilocalswt.widgets.Shell')" href="javascriptvoid(0)">uilocalswt.widgets.Shell</a>）</b></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事物管理器本身就是通过Display事物创建的，一般Display和Shell是SWT应用的入口对象，所以如要用SWT创建本地应用，那么可以通过Display或Shell事物创建。</p>
<p><b>&nbsp;ControlSet（<a onClick="invoke('thing.xworker.uiweb.http.ControlSet')" href="javascriptvoid(0)">xworker.http.ControlSet</a>）</b></p>
<p>&nbsp;&nbsp;&nbsp; XWorker可以用于WEB开发，ControlSet事物是一些常用的Control的集合，可以通过ControlSet事物创建WEB应用控制、界面等。</p>
<p><b>&nbsp;Hibernate（<a onClick="invoke('thing.db.hibernatehibernate_configuration')" href="javascriptvoid(0)">dbhibernatehibernate_configuration</a>和<a onclick="invoke('thingdbhibernatehibernate-mapping')" href="javascriptvoid(0)">dbhibernatehibernate-mapping</a>）</b></p>
<p>&nbsp;&nbsp;&nbsp; db.hibernate.hibernate_configuration事物是Hibernate的配置文件。</p>
<p>&nbsp;&nbsp;&nbsp; db.hibernate.hibernate-mapping事物是Hibernate的映射文件。</p>
<p>&nbsp;&nbsp;&nbsp; 可以通过编写hibernate_configuration和hibernate-mapping事物创建Hibernate的配置，可以在XWorker的动作（Actions）使用Hibernate管理数据库。</p>
<p>&nbsp;</p>
#$@text#$@
sdescriptors
xworker.html.base.container.childs/@htmlCode
@xworker.ide.worldexplorer.swt.document.GettingStarted/@commonDescritpors/@success
sname
success
stype
form
scontentType
text/html;
svalue
xworker.ide.worldexplorer.swt.document.GettingStarted/@commonDescritpors/@forms
sdescriptors
xworker.http.controls.SimpleControl/@result
@xworker.ide.worldexplorer.swt.document.GettingStarted/@editThing
sname
editThing
sdescriptors
xworker.http.ControlSet/@SimpleControl
@xworker.ide.worldexplorer.swt.document.GettingStarted/@editThing/@forms
sname
forms
sbelongToHtml
true
sstyle
default
SotherHeads
#$@text#$@
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<LINK REL ="stylesheet" TYPE="text/css" HREF="fckeditor/editor/css/fck_editorarea.css" TITLE="Style"/>
#$@text#$@
sdescriptors
xworker.http.controls.SimpleControl/@view
@xworker.ide.worldexplorer.swt.document.GettingStarted/@editThing/@forms/@htmlCode
sname
htmlCode
ShtmlCode
#$@text#$@
<p>参看使用编辑器的视频。</p>
<object codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,28;" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="1024" height="792">
<param value="editor_toolbar.swf" name="movie" />
<param value="high" name="quality" />
<param value="#FFFFFF" name="bgcolor" />
<param value="true" name="allowFullScreen" /><embed width="1024" height="792" bgcolor="#FFFFFF" quality="high" allowfullscreen="true" src="editor_toolbar.swf" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"></embed></object>
<p>&nbsp;</p>
#$@text#$@
sdescriptors
xworker.html.base.container.childs/@htmlCode
@xworker.ide.worldexplorer.swt.document.GettingStarted/@editThing/@success
sname
success
stype
form
scontentType
text/html;
svalue
xworker.ide.worldexplorer.swt.document.GettingStarted/@editThing/@forms
sdescriptors
xworker.http.controls.SimpleControl/@result
@xworker.ide.worldexplorer.swt.document.GettingStarted/@defineThing
sname
defineThing
sdescriptors
xworker.http.ControlSet/@SimpleControl
@xworker.ide.worldexplorer.swt.document.GettingStarted/@defineThing/@forms
sname
forms
sbelongToHtml
true
sstyle
default
SotherHeads
#$@text#$@
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<LINK REL ="stylesheet" TYPE="text/css" HREF="fckeditor/editor/css/fck_editorarea.css" TITLE="Style"/>
<script type="text/javascript" src="js/xworker/InnerBrowserUtil.js"></script>
#$@text#$@
sdescriptors
xworker.http.controls.SimpleControl/@view
@xworker.ide.worldexplorer.swt.document.GettingStarted/@defineThing/@forms/@htmlCode
sname
htmlCode
ShtmlCode
#$@text#$@
<p><span style="font-size: small"><b>如何定义事物<span style="font-size: xx-small"><b><a onclick="invoke('thing:xworker.ide.worldexplorer.swt.document.GettingStarted:/@defineThing/@forms/@htmlCode')" href="javascript:void(0)">edit</a></b></span></b></span></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在XWorker中任何事物都是通过已知事物创建的，用于创建新事物的已知事物称作新事物的描述者。</p>
<p>&nbsp;&nbsp;&nbsp; 在XWorker中编辑事物的原理和使用Schema或DTD编辑XML的XML编辑器原理一样，描述者相当于新事物的结构，描述者能够描述属性和子事物等。</p>
<p>&nbsp;&nbsp;&nbsp; 描述者也是事物，所以也是通过已存在的事物所创建出来的，目前用于创建描述者的最常用事物是core.things.lang.MetaDescriptor3，下面将讲述如何通过corethingslang.MetaDescriptor3创建一个描述者。</p>
<p><b>定义新事物</b></p>
<p>&nbsp;&nbsp;&nbsp; 使用core.things.lang.MetaDescriptor3创建一个事物，比如事物<a onClick="invoke('thingxworker.exampletutorialbase.FirstThing')" href="javascriptvoid(0)">xworker.exampletutorialbase.FirstThing</a>。</p>
<p>&nbsp;&nbsp;&nbsp; 新事物创建后的编辑界面如下，</p>
<p style="text-align: center"><img height="490" alt="" width="551" src="/files/Image/thingexplorer/getingstarted/fisrtThing1.jpg" /></p>
<p style="text-align: left"><b>定义事物的属性</b></p>
<p style="text-align: left">&nbsp;&nbsp;&nbsp; 新事物创建后就可以增加属性（attributre）子事物了，属性子事物用于描述将来通过此事物创建的新事物的属性。</p>
<p style="text-align: center">&nbsp;<img height="216" alt="" width="513" src="/files/Image/thingexplorer/thingEditorTutorial/thingDesAttributeForm.jpg" /></p>
<p style="text-align: left">&nbsp;&nbsp;&nbsp; 其中和属性输入有关的属性有：</p>
<ul>
    <li>输入方式<br />
    此属性使用什么方式编辑，可以选择的编辑方式有文本框、文本区域、Html格式编辑、下拉选择框、多选、单选、日期输入、颜色输入、字体输入、数据选择、输入选择、真假、代码输入等。</li>
    <li>默认值<br />
    新建事物时改属性的默认值。</li>
    <li>可选<br />
    可选表示此属性可以为空，否则在编辑时如果为空会提示为空需要输入。</li>
    <li>长度<br />
    一般在文本框、日期输入、颜色输入、字体输入、数据选择等输入方法时有效，表示这些控件的宽度。</li>
    <li>模式<br />
    事物属性编辑快控件的显示格式。</li>
    <li>跨行<br />
    事物属性编辑控件的GriData跨行设置。</li>
    <li>跨列<br />
    事物属性编辑控件的快列设置。</li>
    <li>分组<br />
    属性的分组名称相同的会放入到同组Group中，如果分组为空那么没有Group或放入基础属性Group中。</li>
    <li>分组索引<br />
    分组的按照分组索引的大小的排列顺序。</li>
    <li>输入扩展属性<br />
    和具体的输入方式对应，对输入方式做进一步约束控制的属性。</li>
</ul>
<p style="text-align: left">&nbsp;&nbsp;&nbsp; 通过添加属性子事物可以定义更过的事物属性。</p>
<p><b>使用新创建的描述这创建一个新事物</b>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp; 通过以上的编辑，那么就可以使用上面的事物来创建更新的事物了。</p>
<p style="text-align: center">&nbsp;<img height="397" alt="" width="596" src="/files/Image/thingexplorer/getingstarted/firstThing2.jpg" /></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 点击确定按钮创建新事物<a onClick="invoke('thing.xworker.example.tutorialbase.CreatedByFirstThing')" href="javascriptvoid(0)">xworker.exampletutorialbase.CreatedByFirstThing</a>，可以看到新事物的编辑界面，</p>
<p style="text-align: center">&nbsp;&nbsp;&nbsp;<img height="388" alt="" width="534" src="/files/Image/thingexplorer/getingstarted/firstThing3.jpg" /></p>
<p><b>&nbsp;定义子事物</b></p>
<p>&nbsp;&nbsp;&nbsp; 可以通过添加描述者的&ldquo;事物&rdquo;子事物的方法来定义子事物的描述，子事物的定义方法和父事物的定义方法一样。</p>
<p>&nbsp;&nbsp;&nbsp; 比如事物xworker.example.tutorial.base.FirstThing的Child的子事物。</p>
<p><b>使用继承</b></p>
<p>&nbsp;&nbsp;&nbsp; 在定义描述者时灵活应用继承可以简化描述者的定义，并能很大程度上丰富定义出的事物的复杂性。</p>
<p>&nbsp;&nbsp;&nbsp; 比如事物xworker.example.tutorial.base.FirstThing的Child的ChildLikeParent子事物继承了父事物，而Class子事物继承了xworkerdbhibernate.hibernate-mapping/@class，那么通过这两个子事物就能编辑和父事物同样的子事物以及Hibernate的映射文件了。</p>
<p>&nbsp;&nbsp;&nbsp; 比如：</p>
<p style="text-align: center">&nbsp;<img height="87" alt="" width="280" src="/files/Image/thingexplorer/getingstarted/firstThing4.jpg" /><img height="393" alt="" width="533" src="/files/Image/thingexplorer/getingstarted/firstThing5.jpg" /></p>
<p style="text-align: center">&nbsp;</p>
#$@text#$@
sdescriptors
xworker.html.base.container.childs/@htmlCode
@xworker.ide.worldexplorer.swt.document.GettingStarted/@defineThing/@success
sname
success
stype
form
scontentType
text/html;
svalue
xworker.ide.worldexplorer.swt.document.GettingStarted/@defineThing/@forms
sdescriptors
xworker.http.controls.SimpleControl/@result
@xworker.ide.worldexplorer.swt.document.GettingStarted/@htmlVisitExplorer
sname
htmlVisitExplorer
sdescriptors
xworker.http.ControlSet/@SimpleControl
@xworker.ide.worldexplorer.swt.document.GettingStarted/@htmlVisitExplorer/@forms
sname
forms
sbelongToHtml
true
sstyle
default
SotherHeads
#$@text#$@
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<LINK REL ="stylesheet" TYPE="text/css" HREF="fckeditor/editor/css/fck_editorarea.css" TITLE="Style"/>
<script type="text/javascript" src="js/xworker/InnerBrowserUtil.js"></script>
#$@text#$@
sdescriptors
xworker.http.controls.SimpleControl/@view
@xworker.ide.worldexplorer.swt.document.GettingStarted/@htmlVisitExplorer/@forms/@htmlCode
sname
htmlCode
ShtmlCode
#$@text#$@
<p><span style="font-size: small"><b>在HTML中加入XWorker的特殊功能</b><span style="font-size: xx-small"><b><a onClick="invoke('thing:xworker.ide.worldexplorer.swt.document.GettingStarted:/@htmlVisitExplorer/@forms/@htmlCode')" href="javascript:void(0)">edit</a></b></span></span></p>
<p>&nbsp;&nbsp;&nbsp; 在事物管理器中HTML和本地SWT是一起综合混合使用的，事物管理器里集成了一个Web服务器，帮助、ToolTip以及描述属性编辑等都使用了通过Web服务器获得的相关的HTML页面。</p>
<p>&nbsp;&nbsp;&nbsp; 从SWT访问浏览器中的HTML可参看SWT的文档，从HTML中访问事物管理器常用的功能有打开事物、打开TabItem、打开一个url和执行一个动作等。</p>
<p><b>从HTML中访问事物管理器的方法</b></p>
<p>&nbsp;&nbsp;&nbsp; 从HTML中访问事物管理器的方法是改变浏览器的状态，用特殊的状态字符串来提示浏览器的状态监听触发相应的事件。</p>
<p>&nbsp;&nbsp;&nbsp; 设置浏览器的状态的方法是：window.status=&lt;status&gt;，当设置了状态后应马上设置状态为空window.status='';</p>
<p>&nbsp;&nbsp;&nbsp; 状态字符串的格式为：&lt;command&gt;:&lt;thingPath&gt;?&lt;&lt;paraName&gt;=&lt;value&gt;&amp;&gt;，比如状态字符串示例：</p>
<ul>
    <li><b>打开事物</b><br />
    <b>thing.</b>core.langthings._CoreDescritpor，可以打开事物corelangthings._CoreDescritpor。</li>
    <li><b>打开TabItem</b><br />
    <b>tab.</b>xworker.example.explorerExplorerTabTest/@shell/@mainCompsotie?title=测试openTab。</li>
    <li><b>打开URL&nbsp;<br />
    </b><b>url.</b>http.//www.xworker.org，打开一个URL。</li>
    <li><b>打开动作</b><br />
    <b>action.</b>xworker.example.explorerBrowserTest/@actions/@doAction</li>
</ul>
<p><b>示例</b></p>
<ul>
    <li>打开事物<br />
    <a onClick="invoke('thing.xworker.uiworldExplorer.swt.document.Reference/@worldContext/@forms/@htmlCode')" href="javascriptvoid(0)">xworker.ide.worldexplorer.swt.document.Reference/@worldContext/@forms/@htmlCode</a></li>
    <li>打开一个TabItem<br />
    <a onClick="invoke('tab.xworker.example.explorerExplorerTabTest/@shell/@mainCompsotie?title=测试openTab')" href="javascriptvoid(0)">xworker.exampleexplorerExplorerTabTest/@shell/@mainCompsotie&nbsp;</a></li>
    <li>测试打开URL<br />
    <a onclick="invoke('url.http.//www.xworker.org')" href="javascriptvoid(0)">http//www.xworker.org</a></li>
    <li>执行动作<br />
    <a onclick="invoke('action.xworker.example.explorerBrowserTest/@actions/@doAction')" href="javascriptvoid(0)">xworker.exampleexplorerBrowserTest/@actions/@doAction&nbsp;</a></li>
</ul>
<p>&nbsp;</p>
#$@text#$@
sdescriptors
xworker.html.base.container.childs/@htmlCode
@xworker.ide.worldexplorer.swt.document.GettingStarted/@htmlVisitExplorer/@success
sname
success
stype
form
scontentType
text/html;
svalue
xworker.ide.worldexplorer.swt.document.GettingStarted/@htmlVisitExplorer/@forms
sdescriptors
xworker.http.controls.SimpleControl/@result
